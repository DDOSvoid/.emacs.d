(((elisp org-element--headline-cache) . #s(avl-tree- [[[[[[nil nil #70=(headline (:raw-value #1="early-init.el" :begin 110 :end 1094 :pre-blank 0 :contents-begin 126 :contents-end 1093 :robust-begin 180 :robust-end 1091 :level 1 :priority nil :tags nil :todo-keyword nil :todo-type nil :post-blank 1 :footnote-section-p nil :archivedp nil :commentedp nil :post-affiliated 110 :HEADER-ARGS ":tangle early-init.el" :title #1# :mode nil :granularity element :cached t :parent #4=(org-data (:begin 1 :contents-begin 1 :contents-end 46407 :end 46409 :robust-begin 3 :robust-end 46405 :post-blank 2 :post-affiliated 1 :path "/home/ddosvoid/.emacs.d/emacs-config.org" :mode org-data :CATEGORY "emacs-config" :cached t :org-element--cache-sync-key nil)) :org-element--cache-sync-key nil)) 0] [nil nil #72=(headline (:raw-value #2="init.el header" :begin 1154 :end 1308 :pre-blank 1 :contents-begin 1173 :contents-end 1307 :robust-begin 1175 :robust-end 1305 :level 2 :priority nil :tags nil :todo-keyword nil :todo-type nil :post-blank 1 :footnote-section-p nil :archivedp nil :commentedp nil :post-affiliated 1154 :title #2# :mode nil :granularity element :cached t :parent #5=(headline (:raw-value #3="init.el" :begin 1094 :end 3532 :pre-blank 0 :contents-begin 1104 :contents-end 3532 :robust-begin 1152 :robust-end 3530 :level 1 :priority nil :tags nil :todo-keyword nil :todo-type nil :post-blank 0 :footnote-section-p nil :archivedp nil :commentedp nil :post-affiliated 1094 :HEADER-ARGS ":tangle init.el" :title #3# :mode nil :granularity element :cached t :parent #4# :org-element--cache-sync-key nil)) :org-element--cache-sync-key nil)) 0] #5# 0] [[nil nil #76=(headline (:raw-value #6="use-package" :begin 1651 :end 2345 :pre-blank 0 :contents-begin 1666 :contents-end 2344 :robust-begin 1668 :robust-end 2342 :level 2 :priority nil :tags nil :todo-keyword nil :todo-type nil :post-blank 1 :footnote-section-p nil :archivedp nil :commentedp nil :post-affiliated 1651 :title #6# :mode nil :granularity element :cached t :parent #5# :org-element--cache-sync-key nil)) 0] [[nil nil #79=(headline (:raw-value #7="loading config" :begin 2740 :end 3162 :pre-blank 1 :contents-begin 2759 :contents-end 3161 :robust-begin 2761 :robust-end 3159 :level 2 :priority nil :tags nil :todo-keyword nil :todo-type nil :post-blank 1 :footnote-section-p nil :archivedp nil :commentedp nil :post-affiliated 2740 :title #7# :mode nil :granularity element :cached t :parent #5# :org-element--cache-sync-key nil)) 0] [nil nil #84=(headline (:raw-value #8="init.el footer" :begin 3369 :end 3532 :pre-blank 1 :contents-begin 3388 :contents-end 3532 :robust-begin 3390 :robust-end 3530 :level 2 :priority nil :tags nil :todo-keyword nil :todo-type nil :post-blank 0 :footnote-section-p nil :archivedp nil :commentedp nil :post-affiliated 3369 :title #8# :mode nil :granularity element :cached t :parent #5# :org-element--cache-sync-key nil)) 0] #82=(headline (:raw-value #9="other config" :begin 3162 :end 3369 :pre-blank 1 :contents-begin 3179 :contents-end 3368 :robust-begin 3181 :robust-end 3366 :level 2 :priority nil :tags nil :todo-keyword nil :todo-type nil :post-blank 1 :footnote-section-p nil :archivedp nil :commentedp nil :post-affiliated 3162 :title #9# :mode nil :granularity element :cached t :parent #5# :org-element--cache-sync-key nil)) 0] #78=(headline (:raw-value #10="quelpa" :begin 2345 :end 2740 :pre-blank 0 :contents-begin 2355 :contents-end 2739 :robust-begin 2357 :robust-end 2737 :level 2 :priority nil :tags nil :todo-keyword nil :todo-type nil :post-blank 1 :footnote-section-p nil :archivedp nil :commentedp nil :post-affiliated 2345 :title #10# :mode nil :granularity element :cached t :parent #5# :org-element--cache-sync-key nil)) 1] #74=(headline (:raw-value #11="package" :begin 1308 :end 1651 :pre-blank 0 :contents-begin 1319 :contents-end 1650 :robust-begin 1321 :robust-end 1648 :level 2 :priority nil :tags nil :todo-keyword nil :todo-type nil :post-blank 1 :footnote-section-p nil :archivedp nil :commentedp nil :post-affiliated 1308 :title #11# :mode nil :granularity element :cached t :parent #5# :org-element--cache-sync-key nil)) 1] [[[nil nil #86=(headline (:raw-value #12="init-ui.el header" :begin 3615 :end 3757 :pre-blank 1 :contents-begin 3637 :contents-end 3756 :robust-begin 3639 :robust-end 3754 :level 2 :priority nil :tags nil :todo-keyword nil :todo-type nil :post-blank 1 :footnote-section-p nil :archivedp nil :commentedp nil :post-affiliated 3615 :title #12# :mode nil :granularity element :org-element--cache-sync-key nil :cached t :parent #15=(headline (:raw-value #13="init-ui.el" :begin 3532 :end 15376 :pre-blank 0 :contents-begin 3545 :contents-end 15375 :robust-begin 3613 :robust-end 15373 :level 1 :priority nil :tags nil :todo-keyword nil :todo-type nil :post-blank 1 :footnote-section-p nil :archivedp nil :commentedp nil :post-affiliated 3532 :HEADER-ARGS ":tangle lisp/init-ui.el :mkdirp yes" :title #13# :mode nil :granularity element :cached t :parent #4# :org-element--cache-sync-key nil)))) 0] [[nil nil #90=(headline (:raw-value #14="all-the-icons" :begin 5366 :end 5549 :pre-blank 1 :contents-begin 5384 :contents-end 5548 :robust-begin 5386 :robust-end 5546 :level 2 :priority nil :tags nil :todo-keyword nil :todo-type nil :post-blank 1 :footnote-section-p nil :archivedp nil :commentedp nil :post-affiliated 5366 :title #14# :mode nil :granularity element :org-element--cache-sync-key nil :cached t :parent #15#)) 0] [nil nil #96=(headline #16=(:raw-value "fontaine" :begin 5853 :end 9682 :pre-blank 1 :contents-begin 5866 :contents-end 9682 :robust-begin 5868 :robust-end 9680 :level 2 :priority nil :tags nil :todo-keyword nil :todo-type nil :post-blank 0 :footnote-section-p nil :archivedp nil :commentedp nil :post-affiliated 5853 :title (#("fontaine" 0 8 (:parent (headline #16#)))) :parent #15# :cached t :org-element--cache-sync-key nil)) 0] #92=(headline (:raw-value #17="nerd-icons" :begin 5549 :end 5853 :pre-blank 1 :contents-begin 5564 :contents-end 5852 :robust-begin 5566 :robust-end 5850 :level 2 :priority nil :tags nil :todo-keyword nil :todo-type nil :post-blank 1 :footnote-section-p nil :archivedp nil :commentedp nil :post-affiliated 5549 :title #17# :mode nil :granularity element :org-element--cache-sync-key nil :cached t :parent #15#)) 0] #87=(headline (:raw-value #18="ef-themes" :begin 3757 :end 5366 :pre-blank 1 :contents-begin 3774 :contents-end 5365 :robust-begin 3776 :robust-end 5363 :level 2 :priority nil :tags nil :todo-keyword nil :todo-type nil :post-blank 1 :footnote-section-p nil :archivedp nil :commentedp nil :post-affiliated 3757 :title #18# :mode nil :granularity element :org-element--cache-sync-key nil :cached t :parent #15#)) 1] [[nil nil #21=(headline (:raw-value #19="mode line config" :begin 13698 :end 15204 :pre-blank 0 :contents-begin 13718 :contents-end 15203 :robust-begin 13720 :robust-end 15201 :level 2 :priority nil :tags nil :todo-keyword nil :todo-type nil :post-blank 1 :footnote-section-p nil :archivedp nil :commentedp nil :post-affiliated 13698 :title #19# :mode nil :granularity element :org-element--cache-sync-key nil :cached t :parent #15#)) 0] [[nil nil #102=(headline (:raw-value #20="minions" :begin 13917 :end 14015 :pre-blank 1 :contents-begin 13930 :contents-end 14014 :robust-begin 13932 :robust-end 14012 :level 3 :priority nil :tags nil :todo-keyword nil :todo-type nil :post-blank 1 :footnote-section-p nil :archivedp nil :commentedp nil :post-affiliated 13917 :title #20# :mode nil :granularity element :cached t :parent #21# :org-element--cache-sync-key nil)) 0] [nil nil #106=(headline (:raw-value #22="init-ui.el footer" :begin 15204 :end 15376 :pre-blank 1 :contents-begin 15226 :contents-end 15375 :robust-begin 15228 :robust-end 15373 :level 2 :priority nil :tags nil :todo-keyword nil :todo-type nil :post-blank 1 :footnote-section-p nil :archivedp nil :commentedp nil :post-affiliated 15204 :title #22# :mode nil :granularity element :org-element--cache-sync-key nil :cached t :parent #15#)) 0] #104=(headline (:raw-value #23="keycast" :begin 14015 :end 15204 :pre-blank 1 :contents-begin 14028 :contents-end 15203 :robust-begin 14030 :robust-end 15201 :level 3 :priority nil :tags nil :todo-keyword nil :todo-type nil :post-blank 1 :footnote-section-p nil :archivedp nil :commentedp nil :post-affiliated 14015 :title #23# :mode nil :granularity element :org-element--cache-sync-key nil :cached t :parent #21#)) 0] #100=(headline (:raw-value #24="doom-modeline" :begin 13718 :end 13917 :pre-blank 1 :contents-begin 13737 :contents-end 13916 :robust-begin 13739 :robust-end 13914 :level 3 :priority nil :tags nil :todo-keyword nil :todo-type nil :post-blank 1 :footnote-section-p nil :archivedp nil :commentedp nil :post-affiliated 13718 :title #24# :mode section :granularity element :org-element--cache-sync-key nil :cached t :parent #21#)) 1] #98=(headline (:raw-value #25="other config" :begin 9682 :end 13698 :pre-blank 1 :contents-begin 9699 :contents-end 13698 :robust-begin 9701 :robust-end 13696 :level 2 :priority nil :tags nil :todo-keyword nil :todo-type nil :post-blank 0 :footnote-section-p nil :archivedp nil :commentedp nil :post-affiliated 9682 :title #25# :mode nil :granularity element :org-element--cache-sync-key nil :cached t :parent #15#)) 0] #15# 0] [[[[[nil nil #108=(headline (:raw-value #26="init-base header" :begin 15462 :end 15610 :pre-blank 1 :contents-begin 15483 :contents-end 15609 :robust-begin 15485 :robust-end 15607 :level 2 :priority nil :tags nil :todo-keyword nil :todo-type nil :post-blank 1 :footnote-section-p nil :archivedp nil :commentedp nil :post-affiliated 15462 :title #26# :mode nil :granularity element :cached t :parent #29=(headline (:raw-value #27="init-base.el" :begin 15376 :end 19020 :pre-blank 0 :contents-begin 15391 :contents-end 19020 :robust-begin 15461 :robust-end 19018 :level 1 :priority nil :tags nil :todo-keyword nil :todo-type nil :post-blank 0 :footnote-section-p nil :archivedp nil :commentedp nil :post-affiliated 15376 :HEADER-ARGS ":tangle lisp/init-base.el :mkdirp yes" :title #27# :mode nil :granularity element :cached t :parent #4# :org-element--cache-sync-key nil)) :org-element--cache-sync-key nil)) 0] [nil nil #113=(headline (:raw-value #28="savehist" :begin 15767 :end 16393 :pre-blank 1 :contents-begin 15780 :contents-end 16392 :robust-begin 15782 :robust-end 16390 :level 2 :priority nil :tags nil :todo-keyword nil :todo-type nil :post-blank 1 :footnote-section-p nil :archivedp nil :commentedp nil :post-affiliated 15767 :title #28# :mode nil :granularity element :cached t :parent #29# :org-element--cache-sync-key nil)) 0] #110=(headline (:raw-value #30="no-littering" :begin 15610 :end 15767 :pre-blank 1 :contents-begin 15627 :contents-end 15766 :robust-begin 15629 :robust-end 15764 :level 2 :priority nil :tags nil :todo-keyword nil :todo-type nil :post-blank 1 :footnote-section-p nil :archivedp nil :commentedp nil :post-affiliated 15610 :title #30# :mode nil :granularity element :cached t :parent #29# :org-element--cache-sync-key nil)) 0] [[nil nil #116=(headline (:raw-value #31="recentf" :begin 16518 :end 17956 :pre-blank 1 :contents-begin 16530 :contents-end 17955 :robust-begin 16532 :robust-end 17953 :level 2 :priority nil :tags nil :todo-keyword nil :todo-type nil :post-blank 1 :footnote-section-p nil :archivedp nil :commentedp nil :post-affiliated 16518 :title #31# :mode nil :granularity element :cached t :parent #29# :org-element--cache-sync-key nil)) 0] [nil [nil nil #123=(headline (:raw-value #32="init-base footer" :begin 18846 :end 19020 :pre-blank 1 :contents-begin 18867 :contents-end 19020 :robust-begin 18869 :robust-end 19018 :level 2 :priority nil :tags nil :todo-keyword nil :todo-type nil :post-blank 0 :footnote-section-p nil :archivedp nil :commentedp nil :post-affiliated 18846 :title #32# :mode nil :granularity element :cached t :parent #29# :org-element--cache-sync-key nil)) 0] #121=(headline (:raw-value #33="crux" :begin 18239 :end 18846 :pre-blank 1 :contents-begin 18248 :contents-end 18845 :robust-begin 18250 :robust-end 18843 :level 2 :priority nil :tags nil :todo-keyword nil :todo-type nil :post-blank 1 :footnote-section-p nil :archivedp nil :commentedp nil :post-affiliated 18239 :title #33# :mode nil :granularity element :cached t :parent #29# :org-element--cache-sync-key nil)) 1] #119=(headline (:raw-value #34="undo-tree" :begin 17956 :end 18239 :pre-blank 1 :contents-begin 17970 :contents-end 18238 :robust-begin 17972 :robust-end 18236 :level 2 :priority nil :tags nil :todo-keyword nil :todo-type nil :post-blank 1 :footnote-section-p nil :archivedp nil :commentedp nil :post-affiliated 17956 :title #34# :mode nil :granularity element :cached t :parent #29# :org-element--cache-sync-key nil)) 1] #115=(headline (:raw-value #35="saveplace" :begin 16393 :end 16518 :pre-blank 1 :contents-begin 16407 :contents-end 16517 :robust-begin 16409 :robust-end 16515 :level 2 :priority nil :tags nil :todo-keyword nil :todo-type nil :post-blank 1 :footnote-section-p nil :archivedp nil :commentedp nil :post-affiliated 16393 :title #35# :mode nil :granularity element :cached t :parent #29# :org-element--cache-sync-key nil)) 1] [[nil [nil nil #128=(headline (:raw-value #36="backup config" :begin 19257 :end 19394 :pre-blank 1 :contents-begin 19275 :contents-end 19394 :robust-begin 19277 :robust-end 19392 :level 2 :priority nil :tags nil :todo-keyword nil :todo-type nil :post-blank 0 :footnote-section-p nil :archivedp nil :commentedp nil :post-affiliated 19257 :title #36# :mode nil :granularity element :cached t :parent #39=(headline (:raw-value #37="init-edit.el" :begin 19020 :end 20257 :pre-blank 0 :contents-begin 19035 :contents-end 20256 :robust-begin 19105 :robust-end 20254 :level 1 :priority nil :tags nil :todo-keyword nil :todo-type nil :post-blank 1 :footnote-section-p nil :archivedp nil :commentedp nil :post-affiliated 19020 :HEADER-ARGS ":tangle lisp/init-edit.el :mkdirp yes" :title #37# :mode nil :granularity element :cached t :parent #4# :org-element--cache-sync-key nil)) :org-element--cache-sync-key nil)) 0] #125=(headline (:raw-value #38="init-edit.el header" :begin 19107 :end 19257 :pre-blank 1 :contents-begin 19131 :contents-end 19257 :robust-begin 19133 :robust-end 19255 :level 2 :priority nil :tags nil :todo-keyword nil :todo-type nil :post-blank 0 :footnote-section-p nil :archivedp nil :commentedp nil :post-affiliated 19107 :title #38# :mode nil :granularity element :cached t :parent #39# :org-element--cache-sync-key nil)) 1] [[nil nil #132=(headline (:raw-value #40="autorevert" :begin 19621 :end 20073 :pre-blank 1 :contents-begin 19636 :contents-end 20072 :robust-begin 19638 :robust-end 20070 :level 2 :priority nil :tags nil :todo-keyword nil :todo-type nil :post-blank 1 :footnote-section-p nil :archivedp nil :commentedp nil :post-affiliated 19621 :title #40# :mode nil :granularity element :cached t :parent #39# :org-element--cache-sync-key nil)) 0] [nil nil #134=(headline (:raw-value #41="init-edit.el footer" :begin 20080 :end 20257 :pre-blank 1 :contents-begin 20104 :contents-end 20256 :robust-begin 20106 :robust-end 20254 :level 2 :priority nil :tags nil :todo-keyword nil :todo-type nil :post-blank 1 :footnote-section-p nil :archivedp nil :commentedp nil :post-affiliated 20080 :title #41# :mode nil :granularity element :cached t :parent #39# :org-element--cache-sync-key nil)) 0] #136=(headline (:raw-value #42="avy" :begin 20073 :end 20080 :pre-blank 0 :contents-begin nil :contents-end nil :robust-begin nil :robust-end nil :level 2 :priority nil :tags nil :todo-keyword nil :todo-type nil :post-blank 0 :footnote-section-p nil :archivedp nil :commentedp nil :post-affiliated 20073 :title #42# :mode nil :granularity element :cached t :parent #39# :org-element--cache-sync-key nil)) 0] #130=(headline (:raw-value #43="delsel" :begin 19394 :end 19621 :pre-blank 1 :contents-begin 19405 :contents-end 19621 :robust-begin 19407 :robust-end 19619 :level 2 :priority nil :tags nil :todo-keyword nil :todo-type nil :post-blank 0 :footnote-section-p nil :archivedp nil :commentedp nil :post-affiliated 19394 :title #43# :mode nil :granularity element :cached t :parent #39# :org-element--cache-sync-key nil)) 0] #39# -1] [[[nil [nil nil #140=(headline (:raw-value #44="org-mode config" :begin 20490 :end 29493 :pre-blank 1 :contents-begin 20510 :contents-end 29493 :robust-begin 20512 :robust-end 29491 :level 2 :priority nil :tags nil :todo-keyword nil :todo-type nil :post-blank 0 :footnote-section-p nil :archivedp nil :commentedp nil :post-affiliated 20490 :title #44# :mode nil :granularity element :cached t :parent #47=(headline (:raw-value #45="init-org.el" :begin 20257 :end 36406 :pre-blank 0 :contents-begin 20271 :contents-end 36404 :robust-begin 20340 :robust-end 36402 :level 1 :priority nil :tags nil :todo-keyword nil :todo-type nil :post-blank 1 :footnote-section-p nil :archivedp nil :commentedp nil :post-affiliated 20257 :HEADER-ARGS ":tangle lisp/init-org.el :mkdirp yes" :title #45# :mode nil :granularity element :cached t :parent #4# :org-element--cache-sync-key nil)) :org-element--cache-sync-key nil)) 0] #138=(headline (:raw-value #46="init-org.el header" :begin 20341 :end 20490 :pre-blank 1 :contents-begin 20364 :contents-end 20490 :robust-begin 20366 :robust-end 20488 :level 2 :priority nil :tags nil :todo-keyword nil :todo-type nil :post-blank 0 :footnote-section-p nil :archivedp nil :commentedp nil :post-affiliated 20341 :title #46# :mode nil :granularity element :cached t :parent #47# :org-element--cache-sync-key nil)) 1] [[nil nil #144=(headline (:raw-value #48="org-appear" :begin 30661 :end 31025 :pre-blank 1 :contents-begin 30676 :contents-end 31024 :robust-begin 30678 :robust-end 31022 :level 2 :priority nil :tags nil :todo-keyword nil :todo-type nil :post-blank 1 :footnote-section-p nil :archivedp nil :commentedp nil :post-affiliated 30661 :title #48# :mode nil :granularity element :cached t :parent #47# :org-element--cache-sync-key nil)) 0] [[nil nil #148=(headline (:raw-value #49="denote" :begin 32660 :end 34465 :pre-blank 1 :contents-begin 32671 :contents-end 34464 :robust-begin 32673 :robust-end 34462 :level 2 :priority nil :tags nil :todo-keyword nil :todo-type nil :post-blank 1 :footnote-section-p nil :archivedp nil :commentedp nil :post-affiliated 32660 :title #49# :mode nil :granularity element :cached t :parent #47# :org-element--cache-sync-key nil)) 0] [nil nil #152=(headline (:raw-value #50="init-org.el footer" :begin 36227 :end 36406 :pre-blank 1 :contents-begin 36253 :contents-end 36404 :robust-begin 36255 :robust-end 36402 :level 2 :priority nil :tags nil :todo-keyword nil :todo-type nil :post-blank 1 :footnote-section-p nil :archivedp nil :commentedp nil :post-affiliated 36227 :title #50# :mode nil :granularity element :cached t :parent #47# :org-element--cache-sync-key nil)) 0] #150=(headline (:raw-value #51="consult-notes" :begin 34465 :end 36227 :pre-blank 1 :contents-begin 34483 :contents-end 36226 :robust-begin 34485 :robust-end 36224 :level 2 :priority nil :tags nil :todo-keyword nil :todo-type nil :post-blank 1 :footnote-section-p nil :archivedp nil :commentedp nil :post-affiliated 34465 :title #51# :mode nil :granularity element :org-element--cache-sync-key nil :cached t :parent #47#)) 0] #146=(headline (:raw-value #52="org-capture" :begin 31025 :end 32660 :pre-blank 1 :contents-begin 31041 :contents-end 32659 :robust-begin 31043 :robust-end 32657 :level 2 :priority nil :tags nil :todo-keyword nil :todo-type nil :post-blank 1 :footnote-section-p nil :archivedp nil :commentedp nil :post-affiliated 31025 :title #52# :mode nil :granularity element :cached t :parent #47# :org-element--cache-sync-key nil)) 1] #142=(headline (:raw-value #53="org-modern" :begin 29493 :end 30661 :pre-blank 1 :contents-begin 29508 :contents-end 30661 :robust-begin 29510 :robust-end 30659 :level 2 :priority nil :tags nil :todo-keyword nil :todo-type nil :post-blank 0 :footnote-section-p nil :archivedp nil :commentedp nil :post-affiliated 29493 :title #53# :mode nil :granularity element :cached t :parent #47# :org-element--cache-sync-key nil)) 1] [[[[nil nil #155=(headline (:raw-value #54="init-dev header" :begin 36491 :end 36645 :pre-blank 1 :contents-begin 36511 :contents-end 36645 :robust-begin 36513 :robust-end 36643 :level 2 :priority nil :tags nil :todo-keyword nil :todo-type nil :post-blank 0 :footnote-section-p nil :archivedp nil :commentedp nil :post-affiliated 36491 :title #54# :mode nil :granularity element :cached t :parent #57=(headline (:raw-value #55="init-dev.el" :begin 36406 :end 37155 :pre-blank 0 :contents-begin 36420 :contents-end 37154 :robust-begin 36489 :robust-end 37152 :level 1 :priority nil :tags nil :todo-keyword nil :todo-type nil :post-blank 1 :footnote-section-p nil :archivedp nil :commentedp nil :post-affiliated 36406 :HEADER-ARGS ":tangle lisp/init-dev.el :mkdirp yes" :title #55# :mode nil :granularity element :cached t :parent #4# :org-element--cache-sync-key nil)) :org-element--cache-sync-key nil)) 0] [nil nil #160=(headline (:raw-value #56="init-dev footer" :begin 36975 :end 37155 :pre-blank 1 :contents-begin 36995 :contents-end 37154 :robust-begin 36997 :robust-end 37152 :level 2 :priority nil :tags nil :todo-keyword nil :todo-type nil :post-blank 1 :footnote-section-p nil :archivedp nil :commentedp nil :post-affiliated 36975 :title #56# :mode nil :granularity element :cached t :parent #57# :org-element--cache-sync-key nil)) 0] #158=(headline (:raw-value #58="magit" :begin 36645 :end 36975 :pre-blank 1 :contents-begin 36655 :contents-end 36974 :robust-begin 36657 :robust-end 36972 :level 2 :priority nil :tags nil :todo-keyword nil :todo-type nil :post-blank 1 :footnote-section-p nil :archivedp nil :commentedp nil :post-affiliated 36645 :title #58# :mode nil :granularity element :cached t :parent #57# :org-element--cache-sync-key nil)) 0] [[nil nil #163=(headline (:raw-value #59="init-completion.el header" :begin 37254 :end 37420 :pre-blank 1 :contents-begin 37284 :contents-end 37419 :robust-begin 37286 :robust-end 37417 :level 2 :priority nil :tags nil :todo-keyword nil :todo-type nil :post-blank 1 :footnote-section-p nil :archivedp nil :commentedp nil :post-affiliated 37254 :title #59# :mode nil :granularity element :org-element--cache-sync-key nil :cached t :parent #62=(headline #60=(:raw-value "init-completion.el" :begin 37155 :end 46409 :pre-blank 0 :contents-begin 37176 :contents-end 46407 :robust-begin 37252 :robust-end 46405 :level 1 :priority nil :tags nil :todo-keyword nil :todo-type nil :post-blank 2 :footnote-section-p nil :archivedp nil :commentedp nil :post-affiliated 37155 :HEADER-ARGS ":tangle lisp/init-completion.el :mkdirp yes" :title (#("init-completion.el" 0 18 (:parent (headline #60#)))) :parent #4# :cached t :org-element--cache-sync-key nil)))) 0] nil #166=(headline (:raw-value #61="vertico" :begin 37420 :end 38697 :pre-blank 1 :contents-begin 37432 :contents-end 38696 :robust-begin 37434 :robust-end 38694 :level 2 :priority nil :tags nil :todo-keyword nil :todo-type nil :post-blank 1 :footnote-section-p nil :archivedp nil :commentedp nil :post-affiliated 37420 :title #61# :mode nil :granularity element :org-element--cache-sync-key nil :cached t :parent #62#)) -1] #62# 0] [[nil nil #170=(headline (:raw-value #63="marginalia" :begin 39491 :end 39802 :pre-blank 1 :contents-begin 39506 :contents-end 39801 :robust-begin 39508 :robust-end 39799 :level 2 :priority nil :tags nil :todo-keyword nil :todo-type nil :post-blank 1 :footnote-section-p nil :archivedp nil :commentedp nil :post-affiliated 39491 :title #63# :mode nil :granularity element :org-element--cache-sync-key nil :cached t :parent #62#)) 0] [[nil nil #174=(headline (:raw-value #64="corfu" :begin 43679 :end 45331 :pre-blank 1 :contents-begin 43689 :contents-end 45330 :robust-begin 43691 :robust-end 45328 :level 2 :priority nil :tags nil :todo-keyword nil :todo-type nil :post-blank 1 :footnote-section-p nil :archivedp nil :commentedp nil :post-affiliated 43679 :title #64# :mode nil :granularity element :org-element--cache-sync-key nil :cached t :parent #62#)) 0] [nil nil #178=(headline (:raw-value #65="init-completion.el footer" :begin 46213 :end 46409 :pre-blank 0 :contents-begin 46242 :contents-end 46407 :robust-begin 46244 :robust-end 46405 :level 2 :priority nil :tags nil :todo-keyword nil :todo-type nil :post-blank 2 :footnote-section-p nil :archivedp nil :commentedp nil :post-affiliated 46213 :title #65# :mode nil :granularity element :cached t :parent #62# :org-element--cache-sync-key nil)) 0] #176=(headline (:raw-value #66="yasnippet" :begin 45331 :end 46213 :pre-blank 1 :contents-begin 45345 :contents-end 46212 :robust-begin 45347 :robust-end 46210 :level 2 :priority nil :tags nil :todo-keyword nil :todo-type nil :post-blank 1 :footnote-section-p nil :archivedp nil :commentedp nil :post-affiliated 45331 :title #66# :mode nil :granularity element :org-element--cache-sync-key nil :cached t :parent #62#)) 0] #171=(headline (:raw-value #67="consult" :begin 39802 :end 43679 :pre-blank 1 :contents-begin 39814 :contents-end 43678 :robust-begin 39816 :robust-end 43676 :level 2 :priority nil :tags nil :todo-keyword nil :todo-type nil :post-blank 1 :footnote-section-p nil :archivedp nil :commentedp nil :post-affiliated 39802 :title #67# :mode nil :granularity element :org-element--cache-sync-key nil :cached t :parent #62#)) 1] #168=(headline (:raw-value #68="orderless" :begin 38697 :end 39491 :pre-blank 1 :contents-begin 38711 :contents-end 39490 :robust-begin 38713 :robust-end 39488 :level 2 :priority nil :tags nil :todo-keyword nil :todo-type nil :post-blank 1 :footnote-section-p nil :archivedp nil :commentedp nil :post-affiliated 38697 :title #68# :mode nil :granularity element :org-element--cache-sync-key nil :cached t :parent #62#)) 0] #57# 0] #47# 0] #29# 1] nil nil 0] org-element--cache-compare)) ((elisp org-element--cache) . #s(avl-tree- [[[[[[[[[nil nil #4# 0] [nil nil (keyword (:key "TITLE" :value "Emacs config file" :begin 1 :end 33 :post-blank 0 :post-affiliated 1 :mode top-comment :granularity element :cached t :parent #69=(section (:begin 1 :end 110 :contents-begin 1 :contents-end 109 :robust-begin 1 :robust-end 107 :post-blank 1 :post-affiliated 1 :mode first-section :granularity element :cached t :parent #4# :org-element--cache-sync-key nil)) :org-element--cache-sync-key nil)) 0] #69# 0] [[nil nil (keyword (:key "DATE" :value "2023-11-01 18:10:23" :begin 55 :end 89 :post-blank 1 :post-affiliated 55 :mode nil :granularity element :cached t :parent #69# :org-element--cache-sync-key nil)) 0] [nil nil #70# 0] (keyword (:key "STARTUP" :value "overview" :begin 89 :end 110 :post-blank 1 :post-affiliated 89 :mode nil :granularity element :cached t :parent #69# :org-element--cache-sync-key nil)) 0] (keyword (:key "AUTHOR" :value "DDOSvoid" :begin 33 :end 55 :post-blank 0 :post-affiliated 33 :mode nil :granularity element :cached t :parent #69# :org-element--cache-sync-key nil)) 0] [[[nil nil (property-drawer (:begin 126 :end 182 :contents-begin 139 :contents-end 175 :post-blank 1 :post-affiliated 126 :mode planning :granularity element :cached t :parent #71=(section (:begin 126 :end 1094 :contents-begin 126 :contents-end 1093 :robust-begin 126 :robust-end 1091 :post-blank 1 :post-affiliated 126 :mode section :granularity element :cached t :parent #70# :org-element--cache-sync-key nil)) :org-element--cache-sync-key nil)) 0] [nil nil (src-block (:language "emacs-lisp" :switches nil :parameters nil :begin 211 :end 1094 :number-lines nil :preserve-indent nil :retain-labels t :use-labels t :label-fmt nil :value ";;; early-init.el --- Emacs pre-initialization config -*- lexical-binding: t -*-\12;;; Commentary:\12\12;;; Code:\12\12;; 设置垃圾回收参数\12(setq gc-cons-threshold most-positive-fixnum)\12(setq gc-cons-percentage 0.6)\12\12;; 启动早期不加载`package.el'包管理器\12(setq package-enable-at-startup nil)\12;; 不从包缓存中加载\12(setq package-quickstart nil)\12\12;; 禁止展示菜单栏、工具栏和纵向滚动条\12(push '(menu-bar-lines . 0) default-frame-alist)\12(push '(tool-bar-lines . 0) default-frame-alist)\12(push '(vertical-scroll-bars) default-frame-alist)\12\12;; 禁止自动缩放窗口先\12(setq frame-inhibit-implied-resize t)\12\12;; 禁止菜单栏、工具栏、滚动条模式，禁止启动屏幕和文件对话框\12(menu-bar-mode -1)\12(tool-bar-mode -1)\12(scroll-bar-mode -1)\12(setq inhibit-splash-screen t)\12(setq use-file-dialog nil)\12\12;; 在这个阶段不编译\12(setq comp-deferred-compilation nil)\12\12(provide 'early-init)\12;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;\12;;; early-init.el ends here\12" :post-blank 1 :post-affiliated 211 :mode nil :granularity element :cached t :parent #71# :org-element--cache-sync-key nil)) 0] (paragraph (:begin 182 :end 211 :contents-begin 182 :contents-end 210 :post-blank 1 :post-affiliated 182 :mode nil :granularity element :cached t :parent #71# :org-element--cache-sync-key nil)) 0] [nil nil #75=(section (:begin 1104 :end 1154 :contents-begin 1104 :contents-end 1153 :robust-begin 1104 :robust-end 1151 :post-blank 1 :post-affiliated 1104 :mode section :granularity element :cached t :parent #5# :org-element--cache-sync-key nil)) 0] #5# -1] #71# 0] [[[nil nil #72# 0] [nil nil (src-block (:language "emacs-lisp" :switches nil :parameters nil :begin 1173 :end 1308 :number-lines nil :preserve-indent nil :retain-labels t :use-labels t :label-fmt nil :value ";;; init.el --- The main init entry for Emacs -*- lexical-binding: t -*-\12;;; Commentary:\12\12;;; Code:\12\12" :post-blank 1 :post-affiliated 1173 :mode planning :granularity element :cached t :parent #73=(section (:begin 1173 :end 1308 :contents-begin 1173 :contents-end 1307 :robust-begin 1173 :robust-end 1305 :post-blank 1 :post-affiliated 1173 :mode section :granularity element :cached t :parent #72# :org-element--cache-sync-key nil)) :org-element--cache-sync-key nil)) 0] #73# 0] [nil nil #95=(section (:begin 1319 :end 1651 :contents-begin 1319 :contents-end 1650 :robust-begin 1319 :robust-end 1648 :post-blank 1 :post-affiliated 1319 :mode section :granularity element :cached t :parent #74# :org-element--cache-sync-key nil)) 0] #74# -1] (property-drawer (:begin 1104 :end 1154 :contents-begin 1117 :contents-end 1147 :post-blank 1 :post-affiliated 1104 :mode planning :granularity element :cached t :parent #75# :org-element--cache-sync-key nil)) -1] [[[[[nil nil #76# 0] [nil nil (paragraph (:begin 1666 :end 1724 :contents-begin 1666 :contents-end 1723 :post-blank 1 :post-affiliated 1666 :mode planning :granularity element :cached t :parent #77=(section (:begin 1666 :end 2345 :contents-begin 1666 :contents-end 2344 :robust-begin 1666 :robust-end 2342 :post-blank 1 :post-affiliated 1666 :mode section :granularity element :cached t :parent #76# :org-element--cache-sync-key nil)) :org-element--cache-sync-key nil)) 0] #77# 0] [nil nil #78# 0] (src-block (:language "emacs-lisp" :switches nil :parameters nil :begin 1724 :end 2345 :number-lines nil :preserve-indent nil :retain-labels t :use-labels t :label-fmt nil :value ";; 安装 `use-package'\12(unless (package-installed-p 'use-package)\12  (package-refresh-contents)\12  (package-install 'use-package))\12\12;; 配置 `use-package'\12(eval-and-compile\12  (setq use-package-always-ensure nil)\12  (setq use-package-always-defer nil)\12  (setq use-package-expand-minimally nil)\12  (setq use-package-enable-imenu-support t)\12  (if (daemonp)\12\11  (setq use-package-always-demand t)))\12\12(eval-when-compile\12  (require 'use-package))\12\12;; 安装 `use-package' 的集成模块\12(use-package use-package-ensure-system-package\12  :ensure t)\12(use-package diminish\12  :ensure t)\12(use-package bind-key\12  :ensure t)\12" :post-blank 1 :post-affiliated 1724 :mode nil :granularity element :cached t :parent #77# :org-element--cache-sync-key nil)) -1] [[[[nil nil (paragraph (:begin 2355 :end 2401 :contents-begin 2355 :contents-end 2400 :post-blank 1 :post-affiliated 2355 :mode planning :granularity element :cached t :parent #80=(section (:begin 2355 :end 2740 :contents-begin 2355 :contents-end 2739 :robust-begin 2355 :robust-end 2737 :post-blank 1 :post-affiliated 2355 :mode section :granularity element :cached t :parent #78# :org-element--cache-sync-key nil)) :org-element--cache-sync-key nil)) 0] [nil nil #79# 0] (src-block (:language "emacs-lisp" :switches nil :parameters nil :begin 2401 :end 2740 :number-lines nil :preserve-indent nil :retain-labels t :use-labels t :label-fmt nil :value "(use-package quelpa\12  :ensure t\12  :commands quelpa\12  :config\12  :custom\12  (quelpa-git-clone-depth 1)\12  (quelpa-update-melpa-p nil)\12  (quelpa-self-upgrade-p nil)\12  (quelpa-checkout-melpa-p nil))\12\12;; `quelpa' 与 `use-package' 集成\12(use-package quelpa-use-package\12  :ensure t)\12(use-package quelpa\12  :ensure t)\12\12" :post-blank 1 :post-affiliated 2401 :mode nil :granularity element :cached t :parent #80# :org-element--cache-sync-key nil)) 0] [nil nil (src-block (:language "emacs-lisp" :switches nil :parameters nil :begin 2759 :end 3162 :number-lines nil :preserve-indent nil :retain-labels t :use-labels t :label-fmt nil :value "  ;; 将lisp目录放到加载路径的前面以加快启动速度\12  (let ((dir (locate-user-emacs-file \"lisp\")))\12    (add-to-list 'load-path (file-name-as-directory dir)))\12\12  ;; 加载各模块化配置\12  ;; 不要在`*message*'缓冲区显示加载模块化配置的信息\12  (with-temp-message \"\"\12    (require 'init-ui) \12    (require 'init-base)\12    (require 'init-edit) \12    (require 'init-org)\12    (require 'init-completion)\12    (require 'init-dev)\12    )\12" :post-blank 1 :post-affiliated 2759 :mode planning :granularity element :cached t :parent #81=(section (:begin 2759 :end 3162 :contents-begin 2759 :contents-end 3161 :robust-begin 2759 :robust-end 3159 :post-blank 1 :post-affiliated 2759 :mode section :granularity element :cached t :parent #79# :org-element--cache-sync-key nil)) :org-element--cache-sync-key nil)) 0] #81# -1] [[nil [nil nil (src-block (:language "emacs-lisp" :switches nil :parameters nil :begin 3179 :end 3369 :number-lines nil :preserve-indent nil :retain-labels t :use-labels t :label-fmt nil :value ";; F2 to open init file\12(defun open-init-file()\12  (interactive)\12  (find-file \"~/.emacs.d/emacs-config.org\"))\12\12(global-set-key (kbd \"<f2>\") 'open-init-file)\12" :post-blank 1 :post-affiliated 3179 :mode planning :granularity element :cached t :parent #83=(section (:begin 3179 :end 3369 :contents-begin 3179 :contents-end 3368 :robust-begin 3179 :robust-end 3366 :post-blank 1 :post-affiliated 3179 :mode section :granularity element :cached t :parent #82# :org-element--cache-sync-key nil)) :org-element--cache-sync-key nil)) 0] #83# 1] [[nil nil #85=(section (:begin 3388 :end 3532 :contents-begin 3388 :contents-end 3532 :robust-begin 3388 :robust-end 3530 :post-blank 0 :post-affiliated 3388 :mode section :granularity element :cached t :parent #84# :org-element--cache-sync-key nil)) 0] [nil nil #15# 0] (src-block (:language "emacs-lisp" :switches nil :parameters nil :begin 3388 :end 3532 :number-lines nil :preserve-indent nil :retain-labels t :use-labels t :label-fmt nil :value "\12(provide 'init)\12;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;\12;;; init.el ends here\12" :post-blank 0 :post-affiliated 3388 :mode planning :granularity element :cached t :parent #85# :org-element--cache-sync-key nil)) 0] #84# 0] #82# 0] #80# 1] [[[[nil nil (property-drawer (:begin 3545 :end 3615 :contents-begin 3558 :contents-end 3608 :post-blank 1 :post-affiliated 3545 :mode planning :granularity element :cached t :parent #94=(section (:begin 3545 :end 3615 :contents-begin 3545 :contents-end 3614 :robust-begin 3545 :robust-end 3612 :post-blank 1 :post-affiliated 3545 :mode section :granularity element :org-element--cache-sync-key nil :cached t :parent #15#)) :org-element--cache-sync-key nil)) 0] [nil nil #89=(section (:begin 3637 :end 3757 :contents-begin 3637 :contents-end 3756 :robust-begin 3637 :robust-end 3754 :post-blank 1 :post-affiliated 3637 :mode section :granularity element :cached t :parent #86# :org-element--cache-sync-key nil)) 0] #86# 0] [[nil nil #87# 0] [nil [nil nil (src-block (:language "emacs-lisp" :switches nil :parameters nil :begin 3830 :end 5366 :number-lines nil :preserve-indent nil :retain-labels t :use-labels t :label-fmt nil :value "(use-package ef-themes\12  :ensure t\12  :bind (\"C-c t\" . ef-themes-toggle)\12  :init\12  ;; set two specific themes and switch between them\12  (setq ef-themes-to-toggle '(ef-summer ef-winter))\12  ;; set org headings and function syntax\12  (setq ef-themes-headings\12        '((0 . (bold 1))\12          (1 . (bold 1))\12          (2 . (rainbow bold 1))\12          (3 . (rainbow bold 1))\12          (4 . (rainbow bold 1))\12          (t . (rainbow bold 1))))\12  (setq ef-themes-region '(intense no-extend neutral))\12  ;; Disable all other themes to avoid awkward blending:\12  (mapc #'disable-theme custom-enabled-themes)\12\12  ;; Load the theme of choice:\12  ;; The themes we provide are recorded in the `ef-themes-dark-themes',\12  ;; `ef-themes-light-themes'.\12\12  ;; 如果你不喜欢随机主题，也可以直接固定选择一个主题，如下：\12  ;; (ef-themes-select 'ef-summer)\12\12  ;; 随机挑选一款主题，如果是命令行打开Emacs，则随机挑选一款黑色主题\12  (if (display-graphic-p)\12      (ef-themes-load-random)\12    (ef-themes-load-random 'dark))\12\12  :config\12  ;; auto change theme, aligning with system themes.\12  (defun my/apply-theme (appearance)\12    \"Load theme, taking current system APPEARANCE into consideration.\"\12    (mapc #'disable-theme custom-enabled-themes)\12    (pcase appearance\12      ('light (if (display-graphic-p) (ef-themes-load-random 'light) (ef-themes-load-random 'dark)))\12      ('dark (ef-themes-load-random 'dark))))\12\12  (if (eq system-type 'darwin)\12      ;; only for emacs-plus\12      (add-hook 'ns-system-appearance-change-functions #'my/apply-theme)\12    (ef-themes-select 'ef-summer)\12    )\12  )\12" :post-blank 1 :post-affiliated 3830 :mode nil :granularity element :cached t :parent #88=(section (:begin 3774 :end 5366 :contents-begin 3774 :contents-end 5365 :robust-begin 3774 :robust-end 5363 :post-blank 1 :post-affiliated 3774 :mode section :granularity element :cached t :parent #87# :org-element--cache-sync-key nil)) :org-element--cache-sync-key nil)) 0] (paragraph (:begin 3774 :end 3830 :contents-begin 3774 :contents-end 3829 :post-blank 1 :post-affiliated 3774 :mode planning :granularity element :cached t :parent #88# :org-element--cache-sync-key nil)) 1] #88# 1] (src-block (:language "emacs-lisp" :switches nil :parameters nil :begin 3637 :end 3757 :number-lines nil :preserve-indent nil :retain-labels t :use-labels t :label-fmt nil :value ";;; init-ui.el --- UI settings -*- lexical-binding: t -*-\12;;; Commentary:\12\12;;; Code:\12\12" :post-blank 1 :post-affiliated 3637 :mode planning :granularity element :cached t :parent #89# :org-element--cache-sync-key nil)) 1] [[[nil nil #91=(section (:begin 5384 :end 5549 :contents-begin 5384 :contents-end 5548 :robust-begin 5384 :robust-end 5546 :post-blank 1 :post-affiliated 5384 :mode section :granularity element :cached t :parent #90# :org-element--cache-sync-key nil)) 0] [nil nil (src-block (:language "emacs-lisp" :switches nil :parameters nil :begin 5449 :end 5549 :number-lines nil :preserve-indent nil :retain-labels t :use-labels t :label-fmt nil :value "(use-package all-the-icons\12  :ensure t\12  :if (display-graphic-p))\12" :post-blank 1 :post-affiliated 5449 :mode nil :granularity element :cached t :parent #91# :org-element--cache-sync-key nil)) 0] (paragraph (:begin 5384 :end 5449 :contents-begin 5384 :contents-end 5448 :post-blank 1 :post-affiliated 5384 :mode planning :granularity element :cached t :parent #91# :org-element--cache-sync-key nil)) 0] [nil [nil nil (src-block (:language "emacs-lisp" :switches nil :parameters nil :begin 5564 :end 5853 :number-lines nil :preserve-indent nil :retain-labels t :use-labels t :label-fmt nil :value "(use-package nerd-icons\12  ;; :custom\12  ;; The Nerd Font you want to use in GUI\12  ;; \"Symbols Nerd Font Mono\" is the default and is recommended\12  ;; but you can use any other Nerd Font if you want\12  ;; (nerd-icons-font-family \"Symbols Nerd Font Mono\")\12  )\12" :post-blank 1 :post-affiliated 5564 :mode planning :granularity element :cached t :parent #93=(section (:begin 5564 :end 5853 :contents-begin 5564 :contents-end 5852 :robust-begin 5564 :robust-end 5850 :post-blank 1 :post-affiliated 5564 :mode section :granularity element :cached t :parent #92# :org-element--cache-sync-key nil)) :org-element--cache-sync-key nil)) 0] #93# 1] #92# 0] #90# -1] #94# 0] (src-block (:language "emacs-lisp" :switches nil :parameters nil :begin 1319 :end 1651 :number-lines nil :preserve-indent nil :retain-labels t :use-labels t :label-fmt nil :value "  (require 'package)\12  (setq package-archives\12        '((\"melpa\" . \"http://mirrors.tuna.tsinghua.edu.cn/elpa/melpa/\")\12          (\"melpa-stable\" . \"http://mirrors.tuna.tsinghua.edu.cn/elpa/stable-melpa/\")\12          (\"gnu\" . \"http://mirrors.tuna.tsinghua.edu.cn/elpa/gnu/\")))\12  (package-initialize)\12" :post-blank 1 :post-affiliated 1319 :mode planning :granularity element :cached t :parent #95# :org-element--cache-sync-key nil)) 1] [[[[nil nil #97=(section (:begin 5866 :end 9682 :contents-begin 5866 :contents-end 9682 :robust-begin 5866 :robust-end 9680 :post-blank 0 :post-affiliated 5866 :mode section :granularity element :org-element--cache-sync-key nil :cached t :parent #96#)) 0] [nil [nil nil (src-block (:language "emacs-lisp" :switches nil :parameters nil :begin 6099 :end 9682 :number-lines nil :preserve-indent nil :retain-labels t :use-labels t :label-fmt nil :value "(use-package fontaine\12  :ensure t\12  :when (display-graphic-p)\12  ;; :hook (kill-emacs . fontaine-store-latest-preset)\12  :config\12  (setq fontaine-latest-state-file\12        (locate-user-emacs-file \"etc/fontaine-latest-state.eld\"))\12  (setq fontaine-presets\12        '((regular\12           :default-height 140\12           :default-weight regular\12           :fixed-pitch-height 1.0\12           :variable-pitch-height 1.0\12           )\12          (large\12           :default-height 180\12           :default-weight normal\12           :fixed-pitch-height 1.0\12           :variable-pitch-height 1.05\12           )\12          (t\12           :default-family \"Source Code Pro\"\12           :fixed-pitch-family \"Source Code Pro\"\12           :variable-pitch-family \"Source Code Pro\"\12           :italic-family \"Source Code Pro\"\12           :variable-pitch-weight normal\12           :bold-weight normal\12           :italic-slant italic\12           :line-spacing 0.1)\12          ))\12  ;; (fontaine-set-preset (or (fontaine-restore-latest-preset) 'regular))\12  (fontaine-set-preset 'regular)\12\12  ;; set emoji font\12  (set-fontset-font\12   t\12   (if (version< emacs-version \"28.1\")\12       '(#x1f300 . #x1fad0)\12     'emoji)\12   (cond\12    ((member \"Noto Emoji\" (font-family-list)) \"Noto Emoji\")\12    ((member \"Symbola\" (font-family-list)) \"Symbola\")\12    ((member \"Apple Color Emoji\" (font-family-list)) \"Apple Color Emoji\")\12    ((member \"Noto Color Emoji\" (font-family-list)) \"Noto Color Emoji\")\12    ((member \"Segoe UI Emoji\" (font-family-list)) \"Segoe UI Emoji\")\12    ))\12\12  ;; set Chinese font\12  (dolist (charset '(kana han symbol cjk-misc bopomofo))\12    (set-fontset-font\12     (frame-parameter nil 'font)\12     charset\12     (font-spec :family\12                (cond\12                 ((eq system-type 'darwin)\12                  (cond\12                   ((member \"Sarasa Mono SC Nerd\" (font-family-list)) \"Sarasa Mono SC Nerd\")\12                   ((member \"PingFang SC\" (font-family-list)) \"PingFang SC\")\12                   ((member \"WenQuanYi Zen Hei\" (font-family-list)) \"WenQuanYi Zen Hei\")\12                   ((member \"Microsoft YaHei\" (font-family-list)) \"Microsoft YaHei\")\12                   ))\12                 ((eq system-type 'gnu/linux)\12                  (cond\12                   ((member \"Sarasa Mono SC Nerd\" (font-family-list)) \"Sarasa Mono SC Nerd\")\12                   ((member \"WenQuanYi Micro Hei\" (font-family-list)) \"WenQuanYi Micro Hei\")\12                   ((member \"WenQuanYi Zen Hei\" (font-family-list)) \"WenQuanYi Zen Hei\")\12                   ((member \"Microsoft YaHei\" (font-family-list)) \"Microsoft YaHei\")\12                   ))\12                 (t\12                  (cond\12                   ((member \"Sarasa Mono SC Nerd\" (font-family-list)) \"Sarasa Mono SC Nerd\")\12                   ((member \"Microsoft YaHei\" (font-family-list)) \"Microsoft YaHei\")\12                   )))\12                )))\12\12  ;; set Chinese font scale\12  (setq face-font-rescale-alist `(\12                                  (\"Symbola\"             . 1.3)\12                                  (\"Microsoft YaHei\"     . 1.2)\12                                  (\"WenQuanYi Zen Hei\"   . 1.2)\12                                  (\"Sarasa Mono SC Nerd\" . 1.2)\12                                  (\"PingFang SC\"         . 1.16)\12                                  (\"Lantinghei SC\"       . 1.16)\12                                  (\"Kaiti SC\"            . 1.16)\12                                  (\"Yuanti SC\"           . 1.16)\12                                  (\"Apple Color Emoji\"   . 0.91)\12                                  ))\12  )\12" :post-blank 0 :post-affiliated 6099 :mode nil :granularity element :cached t :parent #97# :org-element--cache-sync-key nil)) 0] (paragraph (:begin 5920 :end 6099 :contents-begin 5920 :contents-end 6098 :post-blank 1 :post-affiliated 5920 :mode nil :granularity element :org-element--cache-sync-key nil :cached t :parent #97#)) 1] (paragraph (:begin 5866 :end 5920 :contents-begin 5866 :contents-end 5919 :post-blank 1 :post-affiliated 5866 :mode planning :granularity element :org-element--cache-sync-key nil :cached t :parent #97#)) 1] [[[[nil nil #99=(section (:begin 9699 :end 13698 :contents-begin 9699 :contents-end 13698 :robust-begin 9699 :robust-end 13696 :post-blank 0 :post-affiliated 9699 :mode section :granularity element :org-element--cache-sync-key nil :cached t :parent #98#)) 0] [nil nil #21# 0] (src-block (:language "emacs-lisp" :switches nil :parameters nil :begin 9699 :end 13698 :number-lines nil :preserve-indent nil :retain-labels t :use-labels t :label-fmt nil :value ";; 禁用一些GUI特性\12(setq use-dialog-box nil)               ; 鼠标操作不使用对话框\12(setq inhibit-default-init t)           ; 不加载 `default' 库\12(setq inhibit-startup-screen t)         ; 不加载启动画面\12(setq inhibit-startup-message t)        ; 不加载启动消息\12(setq inhibit-startup-buffer-menu t)    ; 不显示缓冲区列表\12\12;; 全屏启动\12(add-to-list 'default-frame-alist '(fullscreen . maximized))\12\12;; 草稿缓冲区默认文字设置\12(setq initial-scratch-message (concat \";; Happy hacking, DDOSvoid - Emacs ♥ you!\\n\\n\"))\12\12;; 设置缓冲区的文字方向为从左到右\12(setq bidi-paragraph-direction 'left-to-right)\12;; 禁止使用双向括号算法\12;; (setq bidi-inhibit-bpa t)\12\12;; 设置自动折行宽度为80个字符，默认值为70\12(setq-default fill-column 80)\12\12;; 设置大文件阈值为100MB，默认10MB\12(setq large-file-warning-threshold 100000000)\12\12;; 以16进制显示字节数\12(setq display-raw-bytes-as-hex t)\12;; 有输入时禁止 `fontification' 相关的函数钩子，能让滚动更顺滑\12(setq redisplay-skip-fontification-on-input t)\12\12;; 禁止响铃\12(setq ring-bell-function 'ignore)\12\12;; 禁止闪烁光标\12(blink-cursor-mode -1)\12\12;; 在光标处而非鼠标所在位置粘贴\12(setq mouse-yank-at-point t)\12\12;; 拷贝粘贴设置\12(setq select-enable-primary nil)        ; 选择文字时不拷贝\12(setq select-enable-clipboard t)        ; 拷贝时使用剪贴板\12\12;; 鼠标滚动设置\12(setq scroll-step 2)\12(setq scroll-margin 2)\12(setq hscroll-step 2)\12(setq hscroll-margin 2)\12(setq scroll-conservatively 101)\12(setq scroll-up-aggressively 0.01)\12(setq scroll-down-aggressively 0.01)\12(setq scroll-preserve-screen-position 'always)\12\12;; 对于高的行禁止自动垂直滚动\12(setq auto-window-vscroll nil)\12\12;; 设置新分屏打开的位置的阈值\12(setq split-width-threshold (assoc-default 'width default-frame-alist))\12(setq split-height-threshold nil)\12\12;; TAB键设置，在Emacs里不使用TAB键，所有的TAB默认为4个空格\12(setq-default indent-tabs-mode nil)\12(setq-default tab-width 4)\12\12;; yes或no提示设置，通过下面这个函数设置当缓冲区名字匹配到预设的字符串时自动回答yes\12(setq original-y-or-n-p 'y-or-n-p)\12(defalias 'original-y-or-n-p (symbol-function 'y-or-n-p))\12(defun default-yes-sometimes (prompt)\12  \"automatically say y when buffer name match following string\"\12  (if (or\12\11   (string-match \"has a running process\" prompt)\12\11   (string-match \"does not exist; create\" prompt)\12\11   (string-match \"modified; kill anyway\" prompt)\12\11   (string-match \"Delete buffer using\" prompt)\12\11   (string-match \"Kill buffer of\" prompt)\12\11   (string-match \"still connected.  Kill it?\" prompt)\12\11   (string-match \"Shutdown the client's kernel\" prompt)\12\11   (string-match \"kill them and exit anyway\" prompt)\12\11   (string-match \"Revert buffer from file\" prompt)\12\11   (string-match \"Kill Dired buffer of\" prompt)\12\11   (string-match \"delete buffer using\" prompt)\12\11   (string-match \"Kill all pass entry\" prompt)\12\11   (string-match \"for all cursors\" prompt)\12\11   (string-match \"Do you want edit the entry\" prompt))\12\11  t\12    (original-y-or-n-p prompt)))\12(defalias 'yes-or-no-p 'default-yes-sometimes)\12(defalias 'y-or-n-p 'default-yes-sometimes)\12\12;; 设置剪贴板历史长度300，默认为60\12(setq kill-ring-max 200)\12\12;; 在剪贴板里不存储重复内容\12(setq kill-do-not-save-duplicates t)\12\12;; 设置位置记录长度为6，默认为16\12;; 可以使用 `counsel-mark-ring' or `consult-mark' (C-x j) 来访问光标位置记录\12;; 使用 C-x C-SPC 执行 `pop-global-mark' 直接跳转到上一个全局位置处\12;; 使用 C-u C-SPC 跳转到本地位置处\12(setq mark-ring-max 6)\12(setq global-mark-ring-max 6)\12\12;; 设置 emacs-lisp 的限制\12(setq max-lisp-eval-depth 10000)        ; 默认值为 800\12(setq max-specpdl-size 10000)           ; 默认值为 1600\12\12;; 启用 `list-timers', `list-threads' 这两个命令\12(put 'list-timers 'disabled nil)\12(put 'list-threads 'disabled nil)\12\12;; 在命令行里支持鼠标\12(xterm-mouse-mode 1)\12\12;; 退出Emacs时进行确认\12(setq confirm-kill-emacs 'y-or-n-p)\12\12;; 在模式栏上显示当前光标的列号\12(column-number-mode t)\12\12;; 配置所有的编码为UTF-8，参考：\12;; https://thraxys.wordpress.com/2016/01/13/utf-8-in-emacs-everywhere-forever/\12(setq locale-coding-system 'utf-8)\12(set-terminal-coding-system 'utf-8)\12(set-keyboard-coding-system 'utf-8)\12(set-selection-coding-system 'utf-8)\12(set-default-coding-systems 'utf-8)\12(set-language-environment 'utf-8)\12(set-clipboard-coding-system 'utf-8)\12(set-file-name-coding-system 'utf-8)\12(set-buffer-file-coding-system 'utf-8)\12(prefer-coding-system 'utf-8)\12(modify-coding-system-alist 'process \"*\" 'utf-8)\12(when (display-graphic-p)\12  (setq x-select-request-type '(UTF8_STRING COMPOUND_TEXT TEXT STRING)))\12" :post-blank 0 :post-affiliated 9699 :mode planning :granularity element :org-element--cache-sync-key nil :cached t :parent #99#)) 0] [[nil nil #101=(section (:begin 13737 :end 13917 :contents-begin 13737 :contents-end 13916 :robust-begin 13737 :robust-end 13914 :post-blank 1 :post-affiliated 13737 :mode section :granularity element :cached t :parent #100# :org-element--cache-sync-key nil)) 0] [nil nil (src-block (:language "emacs-lisp" :switches nil :parameters nil :begin 13801 :end 13917 :number-lines nil :preserve-indent nil :retain-labels t :use-labels t :label-fmt nil :value "(use-package doom-modeline\12  :ensure t\12  :hook (after-init . doom-modeline-mode))\12" :post-blank 1 :post-affiliated 13801 :mode nil :granularity element :cached t :parent #101# :org-element--cache-sync-key nil)) 0] (paragraph (:begin 13737 :end 13801 :contents-begin 13737 :contents-end 13800 :post-blank 1 :post-affiliated 13737 :mode planning :granularity element :cached t :parent #101# :org-element--cache-sync-key nil)) 0] #100# 0] [[[nil nil #103=(section (:begin 13930 :end 14015 :contents-begin 13930 :contents-end 14014 :robust-begin 13930 :robust-end 14012 :post-blank 1 :post-affiliated 13930 :mode section :granularity element :cached t :parent #102# :org-element--cache-sync-key nil)) 0] [nil nil (src-block (:language "emacs-lisp" :switches nil :parameters nil :begin 13979 :end 14015 :number-lines nil :preserve-indent nil :retain-labels t :use-labels t :label-fmt nil :value "\12" :post-blank 1 :post-affiliated 13979 :mode nil :granularity element :cached t :parent #103# :org-element--cache-sync-key nil)) 0] (paragraph (:begin 13930 :end 13979 :contents-begin 13930 :contents-end 13978 :post-blank 1 :post-affiliated 13930 :mode planning :granularity element :cached t :parent #103# :org-element--cache-sync-key nil)) 0] [nil [nil nil (src-block (:language "emacs-lisp" :switches nil :parameters nil :begin 14028 :end 15204 :number-lines nil :preserve-indent nil :retain-labels t :use-labels t :label-fmt nil :value "(use-package keycast\12  :ensure t\12  :hook (after-init . keycast-mode)\12  :config\12  ;; set for doom-modeline support\12  ;; With the latest change 72d9add, mode-line-keycast needs to be modified to keycast-mode-line.\12  (define-minor-mode keycast-mode\12    \"Show current command and its key binding in the mode line (fix for use with doom-mode-line).\"\12    :global t\12    (if keycast-mode\12        (progn\12          (add-hook 'pre-command-hook 'keycast--update t)\12          (add-to-list 'global-mode-string '(\"\" keycast-mode-line \"  \")))\12      (remove-hook 'pre-command-hook 'keycast--update)\12      (setq global-mode-string (delete '(\"\" keycast-mode-line \"  \") global-mode-string))\12      ))\12\12  (dolist (input '(self-insert-command\12                   org-self-insert-command))\12    (add-to-list 'keycast-substitute-alist `(,input \".\" \"Typing…\")))\12\12  (dolist (event '(mouse-event-p\12                   mouse-movement-p\12                   mwheel-scroll))\12    (add-to-list 'keycast-substitute-alist `(,event nil)))\12\12  (setq keycast-log-format \"%-20K%C\\n\")\12  (setq keycast-log-frame-alist\12        '((minibuffer . nil)))\12  (setq keycast-log-newest-first t)\12  )\12" :post-blank 1 :post-affiliated 14028 :mode planning :granularity element :org-element--cache-sync-key nil :cached t :parent #105=(section (:begin 14028 :end 15204 :contents-begin 14028 :contents-end 15203 :robust-begin 14028 :robust-end 15201 :post-blank 1 :post-affiliated 14028 :mode section :granularity element :org-element--cache-sync-key nil :cached t :parent #104#)))) 0] #105# 1] #104# 0] #102# 0] #98# 1] [[[[[nil [nil nil (src-block (:language "emacs-lisp" :switches nil :parameters nil :begin 15226 :end 15376 :number-lines nil :preserve-indent nil :retain-labels t :use-labels t :label-fmt nil :value "\12(provide 'init-ui)\12;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;\12;;; init-ui.el ends here\12" :post-blank 1 :post-affiliated 15226 :mode planning :granularity element :org-element--cache-sync-key nil :cached t :parent #107=(section (:begin 15226 :end 15376 :contents-begin 15226 :contents-end 15375 :robust-begin 15226 :robust-end 15373 :post-blank 1 :post-affiliated 15226 :mode section :granularity element :org-element--cache-sync-key nil :cached t :parent #106#)))) 0] #107# 1] [nil nil #112=(section (:begin 15391 :end 15462 :contents-begin 15391 :contents-end 15462 :robust-begin 15391 :robust-end 15460 :post-blank 0 :post-affiliated 15391 :mode section :granularity element :cached t :parent #29# :org-element--cache-sync-key nil)) 0] #29# -1] [[[nil nil #108# 0] [nil nil (src-block (:language "emacs-lisp" :switches nil :parameters nil :begin 15483 :end 15610 :number-lines nil :preserve-indent nil :retain-labels t :use-labels t :label-fmt nil :value ";;; init-base.el --- Basical settings -*- lexical-binding: t -*-\12;;; Commentary:\12\12;;; Code:\12\12" :post-blank 1 :post-affiliated 15483 :mode planning :granularity element :cached t :parent #109=(section (:begin 15483 :end 15610 :contents-begin 15483 :contents-end 15609 :robust-begin 15483 :robust-end 15607 :post-blank 1 :post-affiliated 15483 :mode section :granularity element :cached t :parent #108# :org-element--cache-sync-key nil)) :org-element--cache-sync-key nil)) 0] #109# 0] [[nil nil #111=(section (:begin 15627 :end 15767 :contents-begin 15627 :contents-end 15766 :robust-begin 15627 :robust-end 15764 :post-blank 1 :post-affiliated 15627 :mode section :granularity element :cached t :parent #110# :org-element--cache-sync-key nil)) 0] [nil nil (src-block (:language "emacs-lisp" :switches nil :parameters nil :begin 15694 :end 15767 :number-lines nil :preserve-indent nil :retain-labels t :use-labels t :label-fmt nil :value "(use-package no-littering\12  :ensure t)\12" :post-blank 1 :post-affiliated 15694 :mode nil :granularity element :cached t :parent #111# :org-element--cache-sync-key nil)) 0] (paragraph (:begin 15627 :end 15694 :contents-begin 15627 :contents-end 15693 :post-blank 1 :post-affiliated 15627 :mode planning :granularity element :cached t :parent #111# :org-element--cache-sync-key nil)) 0] #110# 0] (property-drawer (:begin 15391 :end 15462 :contents-begin 15404 :contents-end 15456 :post-blank 0 :post-affiliated 15391 :mode planning :granularity element :cached t :parent #112# :org-element--cache-sync-key nil)) 0] [[nil [nil nil (src-block (:language "emacs-lisp" :switches nil :parameters nil :begin 15780 :end 16393 :number-lines nil :preserve-indent nil :retain-labels t :use-labels t :label-fmt nil :value "(use-package savehist\12  :ensure nil\12  :hook (after-init . savehist-mode)\12  :config\12  ;; Allow commands in minibuffers, will affect `dired-do-dired-do-find-regexp-and-replace' command:\12  (setq enable-recursive-minibuffers t)\12  (setq history-length 1000)\12  (setq savehist-additional-variables '(mark-ring\12                                        global-mark-ring\12                                        search-ring\12                                        regexp-search-ring\12                                        extended-command-history))\12  (setq savehist-autosave-interval 300))\12" :post-blank 1 :post-affiliated 15780 :mode planning :granularity element :cached t :parent #114=(section (:begin 15780 :end 16393 :contents-begin 15780 :contents-end 16392 :robust-begin 15780 :robust-end 16390 :post-blank 1 :post-affiliated 15780 :mode section :granularity element :cached t :parent #113# :org-element--cache-sync-key nil)) :org-element--cache-sync-key nil)) 0] #114# 1] [[nil nil #118=(section (:begin 16407 :end 16518 :contents-begin 16407 :contents-end 16517 :robust-begin 16407 :robust-end 16515 :post-blank 1 :post-affiliated 16407 :mode section :granularity element :cached t :parent #115# :org-element--cache-sync-key nil)) 0] [[nil nil #116# 0] [nil nil (src-block (:language "emacs-lisp" :switches nil :parameters nil :begin 16530 :end 17956 :number-lines nil :preserve-indent nil :retain-labels t :use-labels t :label-fmt nil :value "(use-package recentf\12  :ensure nil\12  :defines no-littering-etc-directory no-littering-var-directory\12  :hook (after-init . recentf-mode)\12  :custom\12  (recentf-max-saved-items 300)\12  (recentf-auto-cleanup 'never)\12  ;; `recentf-add-file' will apply handlers first, then call `string-prefix-p'\12  ;; to check if it can be pushed to recentf list.\12  (recentf-filename-handlers '(abbreviate-file-name))\12  (recentf-exclude `(,@(cl-loop for f in `(,package-user-dir\12                                           ,no-littering-var-directory\12                                           ,no-littering-etc-directory)\12                                collect (abbreviate-file-name f))\12                     ;; Folders on MacOS start\12                     \"^/private/tmp/\"\12                     \"^/var/folders/\"\12                     ;; Folders on MacOS end\12                     \".cache\"\12                     \".cask\"\12                     \".elfeed\"\12                     \"elfeed\"\12                     \"bookmarks\"\12                     \"cache\"\12                     \"ido.*\"\12                     \"persp-confs\"\12                     \"recentf\"\12                     \"undo-tree-hist\"\12                     \"url\"\12                     \"^/tmp/\"\12                     \"/ssh\\\\(x\\\\)?:\"\12                     \"/su\\\\(do\\\\)?:\"\12                     \"^/usr/include/\"\12                     \"/TAGS\\\\'\"\12                     \"COMMIT_EDITMSG\\\\'\")))\12" :post-blank 1 :post-affiliated 16530 :mode planning :granularity element :cached t :parent #117=(section (:begin 16530 :end 17956 :contents-begin 16530 :contents-end 17955 :robust-begin 16530 :robust-end 17953 :post-blank 1 :post-affiliated 16530 :mode section :granularity element :cached t :parent #116# :org-element--cache-sync-key nil)) :org-element--cache-sync-key nil)) 0] #117# 0] (src-block (:language "emacs-lisp" :switches nil :parameters nil :begin 16407 :end 16518 :number-lines nil :preserve-indent nil :retain-labels t :use-labels t :label-fmt nil :value "(use-package saveplace\12  :ensure nil\12  :hook (after-init . save-place-mode))\12" :post-blank 1 :post-affiliated 16407 :mode planning :granularity element :cached t :parent #118# :org-element--cache-sync-key nil)) 1] #115# 1] #113# 0] [[[[nil nil #120=(section (:begin 17970 :end 18239 :contents-begin 17970 :contents-end 18238 :robust-begin 17970 :robust-end 18236 :post-blank 1 :post-affiliated 17970 :mode section :granularity element :cached t :parent #119# :org-element--cache-sync-key nil)) 0] [nil nil (src-block (:language "emacs-lisp" :switches nil :parameters nil :begin 18026 :end 18239 :number-lines nil :preserve-indent nil :retain-labels t :use-labels t :label-fmt nil :value "(use-package undo-tree\12  :ensure t\12  :hook (after-init . global-undo-tree-mode)\12  :config\12  ;; don't save undo history to local files\12  (setq undo-tree-auto-save-history nil)\12  )\12" :post-blank 1 :post-affiliated 18026 :mode nil :granularity element :cached t :parent #120# :org-element--cache-sync-key nil)) 0] (paragraph (:begin 17970 :end 18026 :contents-begin 17970 :contents-end 18025 :post-blank 1 :post-affiliated 17970 :mode planning :granularity element :cached t :parent #120# :org-element--cache-sync-key nil)) 0] [[nil nil #122=(section (:begin 18248 :end 18846 :contents-begin 18248 :contents-end 18845 :robust-begin 18248 :robust-end 18843 :post-blank 1 :post-affiliated 18248 :mode section :granularity element :cached t :parent #121# :org-element--cache-sync-key nil)) 0] [nil nil (src-block (:language "emacs-lisp" :switches nil :parameters nil :begin 18291 :end 18846 :number-lines nil :preserve-indent nil :retain-labels t :use-labels t :label-fmt nil :value "(use-package crux\12  :ensure t\12  :bind ((\"C-a\" . crux-move-beginning-of-line)\12         (\"C-x 4 t\" . crux-transpose-windows)\12         (\"C-x K\" . crux-kill-other-buffers)\12         (\"C-k\" . crux-smart-kill-line)\12         (\"C-c r\" . crux-rename-file-and-buffer)\12         (\"C-x DEL\" . crux-kill-line-backwards))\12  :config\12  (crux-with-region-or-buffer indent-region)\12  (crux-with-region-or-buffer untabify)\12  (crux-with-region-or-point-to-eol kill-ring-save)\12  (defalias 'rename-file-and-buffer #'crux-rename-file-and-buffer))\12" :post-blank 1 :post-affiliated 18291 :mode nil :granularity element :cached t :parent #122# :org-element--cache-sync-key nil)) 0] (paragraph (:begin 18248 :end 18291 :contents-begin 18248 :contents-end 18290 :post-blank 1 :post-affiliated 18248 :mode planning :granularity element :cached t :parent #122# :org-element--cache-sync-key nil)) 0] #121# 0] [[[nil nil #124=(section (:begin 18867 :end 19020 :contents-begin 18867 :contents-end 19020 :robust-begin 18867 :robust-end 19018 :post-blank 0 :post-affiliated 18867 :mode section :granularity element :cached t :parent #123# :org-element--cache-sync-key nil)) 0] [nil nil #39# 0] (src-block (:language "emacs-lisp" :switches nil :parameters nil :begin 18867 :end 19020 :number-lines nil :preserve-indent nil :retain-labels t :use-labels t :label-fmt nil :value "\12(provide 'init-base)\12;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;\12;;; init-base.el ends here\12" :post-blank 0 :post-affiliated 18867 :mode planning :granularity element :cached t :parent #124# :org-element--cache-sync-key nil)) 0] [[nil nil (property-drawer (:begin 19035 :end 19107 :contents-begin 19048 :contents-end 19100 :post-blank 1 :post-affiliated 19035 :mode planning :granularity element :cached t :parent #127=(section (:begin 19035 :end 19107 :contents-begin 19035 :contents-end 19106 :robust-begin 19035 :robust-end 19104 :post-blank 1 :post-affiliated 19035 :mode section :granularity element :cached t :parent #39# :org-element--cache-sync-key nil)) :org-element--cache-sync-key nil)) 0] [nil [nil nil (src-block (:language "emacs-lisp" :switches nil :parameters nil :begin 19131 :end 19257 :number-lines nil :preserve-indent nil :retain-labels t :use-labels t :label-fmt nil :value ";;; init-edit.el --- Editing settings -*- lexical-binding: t -*-\12;;; Commentary:\12\12;;; Code:\12\12" :post-blank 0 :post-affiliated 19131 :mode planning :granularity element :cached t :parent #126=(section (:begin 19131 :end 19257 :contents-begin 19131 :contents-end 19257 :robust-begin 19131 :robust-end 19255 :post-blank 0 :post-affiliated 19131 :mode section :granularity element :cached t :parent #125# :org-element--cache-sync-key nil)) :org-element--cache-sync-key nil)) 0] #126# 1] #125# 1] #127# 1] #123# 1] #119# 0] #106# 1] #96# 0] [[[[[nil [nil nil (src-block (:language "emacs-lisp" :switches nil :parameters nil :begin 19275 :end 19394 :number-lines nil :preserve-indent nil :retain-labels t :use-labels t :label-fmt nil :value ";; 不自动备份\12(setq make-backup-files nil)\12;; 不使用Emacs自带的自动保存\12(setq auto-save-default nil)\12" :post-blank 0 :post-affiliated 19275 :mode planning :granularity element :cached t :parent #129=(section (:begin 19275 :end 19394 :contents-begin 19275 :contents-end 19394 :robust-begin 19275 :robust-end 19392 :post-blank 0 :post-affiliated 19275 :mode section :granularity element :cached t :parent #128# :org-element--cache-sync-key nil)) :org-element--cache-sync-key nil)) 0] #129# 1] [nil nil #131=(section (:begin 19405 :end 19621 :contents-begin 19405 :contents-end 19621 :robust-begin 19405 :robust-end 19619 :post-blank 0 :post-affiliated 19405 :mode section :granularity element :cached t :parent #130# :org-element--cache-sync-key nil)) 0] #130# -1] [[[nil nil (src-block (:language "emacs-lisp" :switches nil :parameters nil :begin 19468 :end 19621 :number-lines nil :preserve-indent nil :retain-labels t :use-labels t :label-fmt nil :value ";; Directly modify when selecting text\12(use-package delsel\12  :ensure nil\12  :hook (after-init . delete-selection-mode))\12" :post-blank 0 :post-affiliated 19468 :mode nil :granularity element :cached t :parent #131# :org-element--cache-sync-key nil)) 0] [[nil nil #133=(section (:begin 19636 :end 20073 :contents-begin 19636 :contents-end 20072 :robust-begin 19636 :robust-end 20070 :post-blank 1 :post-affiliated 19636 :mode section :granularity element :cached t :parent #132# :org-element--cache-sync-key nil)) 0] [nil nil (src-block (:language "emacs-lisp" :switches nil :parameters nil :begin 19718 :end 20073 :number-lines nil :preserve-indent nil :retain-labels t :use-labels t :label-fmt nil :value "(use-package autorevert\12  :ensure nil\12  :hook (after-init . global-auto-revert-mode)\12  :bind (\"s-u\" . revert-buffer)\12  :custom\12  (auto-revert-interval 10)\12  (auto-revert-avoid-polling t)\12  (auto-revert-verbose nil)\12  (auto-revert-remote-files t)\12  (auto-revert-check-vc-info t)\12  (global-auto-revert-non-file-buffers t))\12" :post-blank 1 :post-affiliated 19718 :mode nil :granularity element :cached t :parent #133# :org-element--cache-sync-key nil)) 0] (paragraph (:begin 19636 :end 19718 :contents-begin 19636 :contents-end 19717 :post-blank 1 :post-affiliated 19636 :mode planning :granularity element :cached t :parent #133# :org-element--cache-sync-key nil)) 0] #132# 1] [[[nil nil #134# 0] [nil nil (src-block (:language "emacs-lisp" :switches nil :parameters nil :begin 20104 :end 20257 :number-lines nil :preserve-indent nil :retain-labels t :use-labels t :label-fmt nil :value "(provide 'init-edit)\12;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;\12;;; init-edit.el ends here\12" :post-blank 1 :post-affiliated 20104 :mode planning :granularity element :cached t :parent #135=(section (:begin 20104 :end 20257 :contents-begin 20104 :contents-end 20256 :robust-begin 20104 :robust-end 20254 :post-blank 1 :post-affiliated 20104 :mode section :granularity element :cached t :parent #134# :org-element--cache-sync-key nil)) :org-element--cache-sync-key nil)) 0] #135# 0] [nil nil #137=(section (:begin 20271 :end 20341 :contents-begin 20271 :contents-end 20341 :robust-begin 20271 :robust-end 20339 :post-blank 0 :post-affiliated 20271 :mode section :granularity element :cached t :parent #47# :org-element--cache-sync-key nil)) 0] #47# -1] #136# 0] (paragraph (:begin 19405 :end 19468 :contents-begin 19405 :contents-end 19467 :post-blank 1 :post-affiliated 19405 :mode planning :granularity element :cached t :parent #131# :org-element--cache-sync-key nil)) 1] [[[[nil nil (node-property (:key "HEADER-ARGS" :value ":tangle lisp/init-org.el :mkdirp yes" :begin 20284 :end 20335 :post-blank 0 :post-affiliated 20284 :mode node-property :granularity element :cached t :parent #154=(property-drawer (:begin 20271 :end 20341 :contents-begin 20284 :contents-end 20335 :post-blank 0 :post-affiliated 20271 :mode planning :granularity element :cached t :parent #137# :org-element--cache-sync-key nil)) :org-element--cache-sync-key nil)) 0] [nil [nil nil (src-block (:language "emacs-lisp" :switches nil :parameters nil :begin 20364 :end 20490 :number-lines nil :preserve-indent nil :retain-labels t :use-labels t :label-fmt nil :value ";;; init-org.el --- Org mode settings -*- lexical-binding: t -*-\12;;; Commentary:\12\12;;; Code:\12\12" :post-blank 0 :post-affiliated 20364 :mode planning :granularity element :cached t :parent #139=(section (:begin 20364 :end 20490 :contents-begin 20364 :contents-end 20490 :robust-begin 20364 :robust-end 20488 :post-blank 0 :post-affiliated 20364 :mode section :granularity element :cached t :parent #138# :org-element--cache-sync-key nil)) :org-element--cache-sync-key nil)) 0] #139# 1] #138# 1] [[nil [nil nil (src-block (:language "emacs-lisp" :switches nil :parameters nil :begin 20510 :end 29493 :number-lines nil :preserve-indent nil :retain-labels t :use-labels t :label-fmt nil :value "  (use-package org\12    :ensure nil\12    :mode (\"\\\\.org\\\\'\" . org-mode)\12    :hook ((org-mode . visual-line-mode))\12    :commands (org-find-exact-headline-in-buffer org-set-tags)\12    :custom-face\12    ;; 设置Org mode标题以及每级标题行的大小\12    (org-document-title ((t (:height 1.75 :weight bold))))\12    (org-level-1 ((t (:height 1.2 :weight bold))))\12    (org-level-2 ((t (:height 1.15 :weight bold))))\12    (org-level-3 ((t (:height 1.1 :weight bold))))\12    (org-level-4 ((t (:height 1.05 :weight bold))))\12    (org-level-5 ((t (:height 1.0 :weight bold))))\12    (org-level-6 ((t (:height 1.0 :weight bold))))\12    (org-level-7 ((t (:height 1.0 :weight bold))))\12    (org-level-8 ((t (:height 1.0 :weight bold))))\12    (org-level-9 ((t (:height 1.0 :weight bold))))\12    ;; 设置代码块用上下边线包裹\12    (org-block-begin-line ((t (:underline t :background unspecified))))\12    (org-block-end-line ((t (:overline t :underline nil :background unspecified))))\12    :config\12    ;; 提升latex预览的图片清晰度\12    (plist-put org-format-latex-options :scale 1.8)\12\12    ;; 设置标题行之间总是有空格；列表之间根据情况自动加空格\12    (setq org-blank-before-new-entry '((heading . t)\12                                       (plain-list-item . auto)\12                                       ))\12    ;; \12    (setq org-startup-indented t) \12\12    ;; ======================================\12    ;; 设置打开Org links的程序\12    ;; ======================================\12    (defun my-func/open-and-play-gif-image (file &optional link)\12      \"Open and play GIF image `FILE' in Emacs buffer.\12\12  Optional for Org-mode file: `LINK'.\"\12      (let ((gif-image (create-image file))\12            (tmp-buf (get-buffer-create \"*Org-mode GIF image animation*\")))\12        (switch-to-buffer tmp-buf)\12        (erase-buffer)\12        (insert-image gif-image)\12        (image-animate gif-image nil t)\12        (local-set-key (kbd \"q\") 'bury-buffer)\12        ))\12    (setq org-file-apps '((\"\\\\.png\\\\'\"     . default)\12                          (auto-mode       . emacs)\12                          (directory       . emacs)\12                          (\"\\\\.mm\\\\'\"      . default)\12                          (\"\\\\.x?html?\\\\'\" . default)\12                          (\"\\\\.pdf\\\\'\"     . emacs)\12                          (\"\\\\.md\\\\'\"      . emacs)\12                          (\"\\\\.gif\\\\'\"     . my-func/open-and-play-gif-image)\12                          (\"\\\\.xlsx\\\\'\"    . default)\12                          (\"\\\\.svg\\\\'\"     . default)\12                          (\"\\\\.pptx\\\\'\"    . default)\12                          (\"\\\\.docx\\\\'\"    . default)))\12\12    :custom\12    ;; 设置Org mode的目录\12    (org-directory \"~/org\")\12    ;; 设置笔记的默认存储位置\12    (org-default-notes-file (expand-file-name \"capture.org\" org-directory))\12    ;; 启用一些子模块\12    (org-modules '(ol-bibtex ol-gnus ol-info ol-eww org-habit org-protocol))\12    ;; 在按M-RET时，是否根据光标所在的位置分行，这里设置为是\12    ;; (org-M-RET-may-split-line '((default . nil)))\12    ;; 一些Org mode自带的美化设置\12    ;; 标题行美化\12    (org-fontify-whole-heading-line t)\12    ;; 设置标题行折叠符号\12    (org-ellipsis \" ▾\")\12    ;; 在活动区域内的所有标题栏执行某些命令\12    (org-loop-over-headlines-in-active-region t)\12    ;; TODO标签美化\12    (org-fontify-todo-headline t)\12    ;; DONE标签美化\12    (org-fontify-done-headline t)\12    ;; 引用块美化\12    (org-fontify-quote-and-verse-blocks t)\12    ;; 隐藏宏标记\12    (org-hide-macro-markers t)\12    ;; 隐藏强调标签\12    (org-hide-emphasis-markers t)\12    ;; 高亮latex语法\12    (org-highlight-latex-and-related '(native script entities))\12    ;; 以UTF-8显示\12    (org-pretty-entities t)\12    ;; 是否隐藏标题栏的前置星号，这里我们通过org-modern来隐藏\12    ;; (org-hide-leading-stars t)\12    ;; 当启用缩进模式时自动隐藏前置星号\12    (org-indent-mode-turns-on-hiding-stars t)\12    ;; 自动启用缩进\12    (org-startup-indented nil)\12    ;; 根据标题栏自动缩进文本\12    (org-adapt-indentation nil)\12    ;; 自动显示图片\12    (org-startup-with-inline-images t)\12    ;; 默认以Overview的模式展示标题行\12    (org-startup-folded 'overview)\12    ;; 允许字母列表\12    (org-list-allow-alphabetical t)\12    ;; 列表的下一级设置\12    (org-list-demote-modify-bullet '(\12                                     (\"-\"  . \"+\")\12                                     (\"+\"  . \"1.\")\12                                     (\"1.\" . \"a.\")\12                                     ))\12    ;; 编辑时检查是否在折叠的不可见区域\12    (org-fold-catch-invisible-edits 'smart)\12    ;; 在当前位置插入新标题行还是在当前标题行后插入，这里设置为当前位置\12    (org-insert-heading-respect-content nil)\12    ;; 设置图片的最大宽度，如果有imagemagick支持将会改变图片实际宽度\12    ;; 四种设置方法：(1080), 1080, t, nil\12    (org-image-actual-width nil)\12    ;; imenu的最大深度，默认为2\12    (org-imenu-depth 4)\12    ;; 回车要不要触发链接，这里设置不触发\12    (org-return-follows-link nil)\12    ;; 上标^下标_是否需要特殊字符包裹，这里设置需要用大括号包裹\12    (org-use-sub-superscripts '{})\12    ;; 复制粘贴标题行的时候删除id\12    (org-clone-delete-id t)\12    ;; 粘贴时调整标题行的级别\12    (org-yank-adjusted-subtrees t)\12\12    ;; TOOD的关键词设置，可以设置不同的组\12    (org-todo-keywords '((sequence \"TODO(t)\" \"HOLD(h!)\" \"WIP(i!)\" \"WAIT(w!)\" \"|\" \"DONE(d!)\" \"CANCELLED(c@/!)\")\12                         (sequence \"REPORT(r)\" \"BUG(b)\" \"KNOWNCAUSE(k)\" \"|\" \"FIXED(f!)\")))\12    ;; TODO关键词的样式设置\12    (org-todo-keyword-faces '((\"TODO\"       :foreground \"#7c7c75\" :weight bold)\12                              (\"HOLD\"       :foreground \"#feb24c\" :weight bold)\12                              (\"WIP\"        :foreground \"#0098dd\" :weight bold)\12                              (\"WAIT\"       :foreground \"#9f7efe\" :weight bold)\12                              (\"DONE\"       :foreground \"#50a14f\" :weight bold)\12                              (\"CANCELLED\"  :foreground \"#ff6480\" :weight bold)\12                              (\"REPORT\"     :foreground \"magenta\" :weight bold)\12                              (\"BUG\"        :foreground \"red\"     :weight bold)\12                              (\"KNOWNCAUSE\" :foreground \"yellow\"  :weight bold)\12                              (\"FIXED\"      :foreground \"green\"   :weight bold)))\12    ;; 当标题行状态变化时标签同步发生的变化\12    ;; Moving a task to CANCELLED adds a CANCELLED tag\12    ;; Moving a task to WAIT adds a WAIT tag\12    ;; Moving a task to HOLD adds WAIT and HOLD tags\12    ;; Moving a task to a done state removes WAIT and HOLD tags\12    ;; Moving a task to TODO removes WAIT, CANCELLED, and HOLD tags\12    ;; Moving a task to DONE removes WAIT, CANCELLED, and HOLD tags\12    (org-todo-state-tags-triggers\12     (quote ((\"CANCELLED\" (\"CANCELLED\" . t))\12             (\"WAIT\" (\"WAIT\" . t))\12             (\"HOLD\" (\"WAIT\") (\"HOLD\" . t))\12             (done (\"WAIT\") (\"HOLD\"))\12             (\"TODO\" (\"WAIT\") (\"CANCELLED\") (\"HOLD\"))\12             (\"DONE\" (\"WAIT\") (\"CANCELLED\") (\"HOLD\")))))\12    ;; 使用专家模式选择标题栏状态\12    (org-use-fast-todo-selection 'expert)\12    ;; 父子标题栏状态有依赖\12    (org-enforce-todo-dependencies t)\12    ;; 标题栏和任务复选框有依赖\12    (org-enforce-todo-checkbox-dependencies t)\12    ;; 优先级样式设置\12    (org-priority-faces '((?A :foreground \"red\")\12                          (?B :foreground \"orange\")\12                          (?C :foreground \"yellow\")))\12    ;; 标题行全局属性设置\12    (org-global-properties '((\"EFFORT_ALL\" . \"0:15 0:30 0:45 1:00 2:00 3:00 4:00 5:00 6:00 7:00 8:00\")\12                             (\"APPT_WARNTIME_ALL\" . \"0 5 10 15 20 25 30 45 60\")\12                             (\"RISK_ALL\" . \"Low Medium High\")\12                             (\"STYLE_ALL\" . \"habit\")))\12    ;; Org columns的默认格式\12    (org-columns-default-format \"%25ITEM %TODO %SCHEDULED %DEADLINE %3PRIORITY %TAGS %CLOCKSUM %EFFORT{:}\")\12    ;; 当状态从DONE改成其他状态时，移除 CLOSED: [timestamp]\12    (org-closed-keep-when-no-todo t)\12    ;; DONE时加上时间戳\12    (org-log-done 'time)\12    ;; 重复执行时加上时间戳\12    (org-log-repeat 'time)\12    ;; Deadline修改时加上一条记录\12    (org-log-redeadline 'note)\12    ;; Schedule修改时加上一条记录\12    (org-log-reschedule 'note)\12    ;; 以抽屉的方式记录\12    (org-log-into-drawer t)\12    ;; 紧接着标题行或者计划/截止时间戳后加上记录抽屉\12    (org-log-state-notes-insert-after-drawers nil)\12\12    ;; refile使用缓存\12    (org-refile-use-cache t)\12    ;; refile的目的地，这里设置的是agenda文件的所有标题\12    (org-refile-targets '((org-agenda-files . (:maxlevel . 9))))\12    ;; 将文件名加入到路径\12    (org-refile-use-outline-path 'file)\12    ;; 是否按步骤refile\12    (org-outline-path-complete-in-steps nil)\12    ;; 允许创建新的标题行，但需要确认\12    (org-refile-allow-creating-parent-nodes 'confirm)\12\12    ;; 设置标签的默认位置，默认是第77列右对齐\12    ;; (org-tags-column -77)\12    ;; 自动对齐标签\12    (org-auto-align-tags t)\12    ;; 标签不继承\12    (org-use-tag-inheritance nil)\12    ;; 在日程视图的标签不继承\12    (org-agenda-use-tag-inheritance nil)\12    ;; 标签快速选择\12    (org-use-fast-tag-selection t)\12    ;; 标签选择不需要回车确认\12    (org-fast-tag-selection-single-key t)\12    ;; 定义了有序属性的标题行也加上 OREDERD 标签\12    (org-track-ordered-property-with-tag t)\12    ;; 始终存在的的标签\12    (org-tag-persistent-alist '((\"read\"     . ?r)\12                                (\"mail\"     . ?m)\12                                (\"emacs\"    . ?e)\12                                (\"study\"    . ?s)\12                                (\"work\"     . ?w)))\12    ;; 预定义好的标签\12    (org-tag-alist '((:startgroup)\12                     (\"crypt\"    . ?c)\12                     (\"linux\"    . ?l)\12                     (\"apple\"    . ?a)\12                     (\"noexport\" . ?n)\12                     (\"ignore\"   . ?i)\12                     (\"TOC\"      . ?t)\12                     (:endgroup)))\12\12    ;; 归档设置\12    (org-archive-location \"%s_archive::datetree/\")\12    )\12" :post-blank 0 :post-affiliated 20510 :mode planning :granularity element :cached t :parent #141=(section (:begin 20510 :end 29493 :contents-begin 20510 :contents-end 29493 :robust-begin 20510 :robust-end 29491 :post-blank 0 :post-affiliated 20510 :mode section :granularity element :cached t :parent #140# :org-element--cache-sync-key nil)) :org-element--cache-sync-key nil)) 0] #141# 1] [nil nil #143=(section (:begin 29508 :end 30661 :contents-begin 29508 :contents-end 30661 :robust-begin 29508 :robust-end 30659 :post-blank 0 :post-affiliated 29508 :mode section :granularity element :cached t :parent #142# :org-element--cache-sync-key nil)) 0] #142# -1] #140# 0] [[[[nil nil (src-block (:language "emacs-lisp" :switches nil :parameters nil :begin 29561 :end 30661 :number-lines nil :preserve-indent nil :retain-labels t :use-labels t :label-fmt nil :value "(use-package org-modern\12  :ensure t\12  :hook (after-init . (lambda ()\12                        (setq org-modern-hide-stars 'leading)\12                        (global-org-modern-mode t)))\12  :config\12  ;; 标题行型号字符\12  (setq org-modern-star [\"◉\" \"○\" \"✸\" \"✳\" \"◈\" \"◇\" \"✿\" \"❀\" \"✜\"])\12  ;; 额外的行间距，0.1表示10%，1表示1px\12  (setq-default line-spacing 0.1)\12  ;; tag边框宽度，还可以设置为 `auto' 即自动计算\12  (setq org-modern-label-border 1)\12  ;; 设置表格竖线宽度，默认为3\12  (setq org-modern-table-vertical 2)\12  ;; 设置表格横线为0，默认为0.1\12  (setq org-modern-table-horizontal 0)\12  ;; 复选框美化\12  (setq org-modern-checkbox\12        '((?X . #(\"▢✓\" 0 2 (composition ((2)))))\12          (?- . #(\"▢–\" 0 2 (composition ((2)))))\12          (?\\s . #(\"▢\" 0 1 (composition ((1)))))))\12  ;; 列表符号美化\12  (setq org-modern-list\12        '((?- . \"•\")\12          (?+ . \"◦\")\12          (?* . \"▹\")))\12  ;; 代码块左边加上一条竖边线（需要Org mode顶头，如果启用了 `visual-fill-column-mode' 会很难看）\12  (setq org-modern-block-fringe t)\12  ;; 代码块类型美化，我们使用了 `prettify-symbols-mode'\12  (setq org-modern-block-name nil)\12  ;; #+关键字美化，我们使用了 `prettify-symbols-mode'\12  (setq org-modern-keyword nil)\12  )\12" :post-blank 0 :post-affiliated 29561 :mode nil :granularity element :cached t :parent #143# :org-element--cache-sync-key nil)) 0] [[nil nil #145=(section (:begin 30676 :end 31025 :contents-begin 30676 :contents-end 31024 :robust-begin 30676 :robust-end 31022 :post-blank 1 :post-affiliated 30676 :mode section :granularity element :cached t :parent #144# :org-element--cache-sync-key nil)) 0] [nil nil (src-block (:language "emacs-lisp" :switches nil :parameters nil :begin 30730 :end 31025 :number-lines nil :preserve-indent nil :retain-labels t :use-labels t :label-fmt nil :value "(use-package org-appear\12  :ensure t\12  :hook (org-mode . org-appear-mode)\12  :config\12  (setq org-appear-autolinks t)\12  (setq org-appear-autosubmarkers t)\12  (setq org-appear-autoentities t)\12  (setq org-appear-autokeywords t)\12  (setq org-appear-inside-latex t)\12  )\12" :post-blank 1 :post-affiliated 30730 :mode nil :granularity element :cached t :parent #145# :org-element--cache-sync-key nil)) 0] (paragraph (:begin 30676 :end 30730 :contents-begin 30676 :contents-end 30729 :post-blank 1 :post-affiliated 30676 :mode planning :granularity element :cached t :parent #145# :org-element--cache-sync-key nil)) 0] #144# 1] [[nil [nil nil (src-block (:language "emacs-lisp" :switches nil :parameters nil :begin 31041 :end 32660 :number-lines nil :preserve-indent nil :retain-labels t :use-labels t :label-fmt nil :value "(use-package org-capture\12  :ensure nil\12  :bind (\"\\e\\e c\" . (lambda () (interactive) (org-capture)))\12  :hook ((org-capture-mode . (lambda ()\12                               (setq-local org-complete-tags-always-offer-all-agenda-tags t)))\12         (org-capture-mode . delete-other-windows))\12  :custom\12  (org-capture-use-agenda-date nil)\12  ;; define common template\12  (org-capture-templates `((\"t\" \"Tasks\" entry (file+headline \"tasks.org\" \"Reminders\")\12                            \"* TODO %i%?\"\12                            :empty-lines-after 1\12                            :prepend t)\12                           (\"n\" \"Notes\" entry (file+headline \"capture.org\" \"Notes\")\12                            \"* %? %^g\\n%i\\n\"\12                            :empty-lines-after 1)\12                           ;; For EWW\12                           (\"b\" \"Bookmarks\" entry (file+headline \"capture.org\" \"Bookmarks\")\12                            \"* %:description\\n\\n%a%?\"\12                            :empty-lines 1\12                            :immediate-finish t)\12                           (\"d\" \"Diary\")\12                           (\"dt\" \"Today's TODO list\" entry (file+olp+datetree \"diary.org\")\12                            \"* Today's TODO list [/]\\n%T\\n\\n** TODO %?\"\12                            :empty-lines 1\12                            :jump-to-captured t)\12                           (\"do\" \"Other stuff\" entry (file+olp+datetree \"diary.org\")\12                            \"* %?\\n%T\\n\\n%i\"\12                            :empty-lines 1\12                            :jump-to-captured t)\12                           ))\12  )\12" :post-blank 1 :post-affiliated 31041 :mode planning :granularity element :cached t :parent #147=(section (:begin 31041 :end 32660 :contents-begin 31041 :contents-end 32659 :robust-begin 31041 :robust-end 32657 :post-blank 1 :post-affiliated 31041 :mode section :granularity element :cached t :parent #146# :org-element--cache-sync-key nil)) :org-element--cache-sync-key nil)) 0] #147# 1] [nil nil #149=(section (:begin 32671 :end 34465 :contents-begin 32671 :contents-end 34464 :robust-begin 32671 :robust-end 34462 :post-blank 1 :post-affiliated 32671 :mode section :granularity element :cached t :parent #148# :org-element--cache-sync-key nil)) 0] #148# -1] #146# 0] [[[[nil nil (src-block (:language "emacs-lisp" :switches nil :parameters nil :begin 32721 :end 34465 :number-lines nil :preserve-indent nil :retain-labels t :use-labels t :label-fmt nil :value "  (use-package denote\12    :ensure t\12    :hook (dired-mode . denote-dired-mode-in-directories)\12    :bind ((\"C-c d n\" . denote)\12           (\"C-c d d\" . denote-date)\12           (\"C-c d t\" . denote-type)\12           (\"C-c d s\" . denote-subdirectory)\12           (\"C-c d f\" . denote-open-or-create)\12           (\"C-c d r\" . denote-dired-rename-file))\12    :init\12    (with-eval-after-load 'org-capture\12      (setq denote-org-capture-specifiers \"%l\\n%i\\n%?\")\12      (add-to-list 'org-capture-templates\12                   '(\"N\" \"New note (with denote.el)\" plain\12                     (file denote-last-path)\12                     #'denote-org-capture\12                     :no-save t\12                     :immediate-finish nil\12                     :kill-buffer t\12                     :jump-to-captured t)))\12    :config\12    (setq denote-directory (expand-file-name \"~/org/\"))\12    (setq denote-known-keywords '(\"emacs\" \"cpp\" \"commom\" \"cheatsheet\"))\12    (setq denote-infer-keywords t)\12    (setq denote-sort-keywords t)\12    ;; org is default, set others such as text, markdown-yaml, markdown-toml\12    (setq denote-file-type nil)\12    (setq denote-prompts '(title keywords))\12\12    ;; We allow multi-word keywords by default.  The author's personal\12    ;; preference is for single-word keywords for a more rigid workflow.\12    (setq denote-allow-multi-word-keywords t)\12    (setq denote-date-format nil)\12\12    ;; If you use Markdown or plain text files (Org renders links as buttons\12    ;; right away)\12    (add-hook 'find-file-hook #'denote-link-buttonize-buffer)\12    (setq denote-dired-rename-expert nil)\12\12    ;; OR if only want it in `denote-dired-directories':\12    (add-hook 'dired-mode-hook #'denote-dired-mode-in-directories)\12    )\12" :post-blank 1 :post-affiliated 32721 :mode nil :granularity element :org-element--cache-sync-key nil :cached t :parent #149#)) 0] [nil nil #151=(section (:begin 34483 :end 36227 :contents-begin 34483 :contents-end 36226 :robust-begin 34483 :robust-end 36224 :post-blank 1 :post-affiliated 34483 :mode section :granularity element :org-element--cache-sync-key nil :cached t :parent #150#)) 0] #150# 0] [nil nil (src-block (:language "emacs-lisp" :switches nil :parameters nil :begin 34549 :end 36227 :number-lines nil :preserve-indent nil :retain-labels t :use-labels t :label-fmt nil :value "  (use-package consult-notes\12    :ensure t\12    :commands (consult-notes\12               consult-notes-search-in-all-notes)\12    :bind ((\"C-c n f\" . consult-notes)\12           (\"C-c n c\" . consult-notes-search-in-all-notes))\12    :config\12    (setq consult-notes-file-dir-sources\12          `((\"org\"     ?o ,(concat org-directory \"/\"))))\12\12    ;; embark support\12    (with-eval-after-load 'embark\12      (defun consult-notes-open-dired (cand)\12        \"Open notes directory dired with point on file CAND.\"\12        (interactive \"fNote: \")\12        ;; dired-jump is in dired-x.el but is moved to dired in Emacs 28\12        (dired-jump nil cand))\12\12      (defun consult-notes-marked (cand)\12        \"Open a notes file CAND in Marked 2.\12  Marked 2 is a mac app that renders markdown.\"\12        (interactive \"fNote: \")\12        (call-process-shell-command (format \"open -a \\\"Marked 2\\\" \\\"%s\\\"\" (expand-file-name cand))))\12\12      (defun consult-notes-grep (cand)\12        \"Run grep in directory of notes file CAND.\"\12        (interactive \"fNote: \")\12        (consult-grep (file-name-directory cand)))\12\12      (embark-define-keymap consult-notes-map\12                            \"Keymap for Embark notes actions.\"\12                            :parent embark-file-map\12                            (\"d\" consult-notes-dired)\12                            (\"g\" consult-notes-grep)\12                            (\"m\" consult-notes-marked))\12\12      (add-to-list 'embark-keymap-alist `(,consult-notes-category . consult-notes-map))\12\12      ;; make embark-export use dired for notes\12      (setf (alist-get consult-notes-category embark-exporters-alist) #'embark-export-dired)\12      )\12    )\12" :post-blank 1 :post-affiliated 34549 :mode nil :granularity element :org-element--cache-sync-key nil :cached t :parent #151#)) 0] (paragraph (:begin 34483 :end 34549 :contents-begin 34483 :contents-end 34548 :post-blank 1 :post-affiliated 34483 :mode planning :granularity element :org-element--cache-sync-key nil :cached t :parent #151#)) -1] [nil [nil nil (src-block (:language "emacs-lisp" :switches nil :parameters nil :begin 36253 :end 36406 :number-lines nil :preserve-indent nil :retain-labels t :use-labels t :label-fmt nil :value "\12(provide 'init-org)\12;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;\12;;; init-org.el ends here\12" :post-blank 1 :post-affiliated 36253 :mode planning :granularity element :cached t :parent #153=(section (:begin 36253 :end 36406 :contents-begin 36253 :contents-end 36404 :robust-begin 36253 :robust-end 36402 :post-blank 1 :post-affiliated 36253 :mode section :granularity element :cached t :parent #152# :org-element--cache-sync-key nil)) :org-element--cache-sync-key nil)) 0] #153# 1] #152# -1] (paragraph (:begin 32671 :end 32721 :contents-begin 32671 :contents-end 32720 :post-blank 1 :post-affiliated 32671 :mode planning :granularity element :cached t :parent #149# :org-element--cache-sync-key nil)) 0] (paragraph (:begin 29508 :end 29561 :contents-begin 29508 :contents-end 29560 :post-blank 1 :post-affiliated 29508 :mode planning :granularity element :cached t :parent #143# :org-element--cache-sync-key nil)) 1] #154# 1] [[[[[[nil nil #156=(section (:begin 36420 :end 36491 :contents-begin 36420 :contents-end 36490 :robust-begin 36420 :robust-end 36488 :post-blank 1 :post-affiliated 36420 :mode section :granularity element :cached t :parent #57# :org-element--cache-sync-key nil)) 0] [nil nil #155# 0] (property-drawer (:begin 36420 :end 36491 :contents-begin 36433 :contents-end 36484 :post-blank 1 :post-affiliated 36420 :mode planning :granularity element :cached t :parent #156# :org-element--cache-sync-key nil)) 0] [nil nil (src-block (:language "emacs-lisp" :switches nil :parameters nil :begin 36511 :end 36645 :number-lines nil :preserve-indent nil :retain-labels t :use-labels t :label-fmt nil :value "  ;;; init-dev.el --- Development settings -*- lexical-binding: t -*-\12  ;;; Commentary:\12\12  ;;; Code:\12" :post-blank 0 :post-affiliated 36511 :mode planning :granularity element :cached t :parent #157=(section (:begin 36511 :end 36645 :contents-begin 36511 :contents-end 36645 :robust-begin 36511 :robust-end 36643 :post-blank 0 :post-affiliated 36511 :mode section :granularity element :cached t :parent #155# :org-element--cache-sync-key nil)) :org-element--cache-sync-key nil)) 0] #157# -1] [[nil [nil nil (src-block (:language "emacs-lisp" :switches nil :parameters nil :begin 36655 :end 36975 :number-lines nil :preserve-indent nil :retain-labels t :use-labels t :label-fmt nil :value "  (use-package magit\12    :ensure t\12    :hook (git-commit-mode . flyspell-mode)\12    :bind ((\"C-x g\"   . magit-status)\12           (\"C-x M-g\" . magit-dispatch)\12           (\"C-c M-g\" . magit-file-dispatch))\12    :custom\12    (magit-diff-refine-hunk t)\12    (magit-ediff-dwim-show-on-hunks t))\12" :post-blank 1 :post-affiliated 36655 :mode planning :granularity element :cached t :parent #159=(section (:begin 36655 :end 36975 :contents-begin 36655 :contents-end 36974 :robust-begin 36655 :robust-end 36972 :post-blank 1 :post-affiliated 36655 :mode section :granularity element :cached t :parent #158# :org-element--cache-sync-key nil)) :org-element--cache-sync-key nil)) 0] #159# 1] [[nil nil #161=(section (:begin 36995 :end 37155 :contents-begin 36995 :contents-end 37154 :robust-begin 36995 :robust-end 37152 :post-blank 1 :post-affiliated 36995 :mode section :granularity element :cached t :parent #160# :org-element--cache-sync-key nil)) 0] nil (src-block (:language "emacs-lisp" :switches nil :parameters nil :begin 36995 :end 37155 :number-lines nil :preserve-indent nil :retain-labels t :use-labels t :label-fmt nil :value "  \12  (provide 'init-dev)\12  ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;\12  ;;; init-dev.el ends here\12" :post-blank 1 :post-affiliated 36995 :mode planning :granularity element :cached t :parent #161# :org-element--cache-sync-key nil)) -1] #160# 0] #158# 0] [[[[nil nil #162=(section (:begin 37176 :end 37254 :contents-begin 37176 :contents-end 37253 :robust-begin 37176 :robust-end 37251 :post-blank 1 :post-affiliated 37176 :mode section :granularity element :org-element--cache-sync-key nil :cached t :parent #62#)) 0] nil #165=(property-drawer (:begin 37176 :end 37254 :contents-begin 37189 :contents-end 37247 :post-blank 1 :post-affiliated 37176 :mode planning :granularity element :org-element--cache-sync-key nil :cached t :parent #162#)) -1] [[nil nil #163# 0] [nil nil (src-block (:language "emacs-lisp" :switches nil :parameters nil :begin 37284 :end 37420 :number-lines nil :preserve-indent nil :retain-labels t :use-labels t :label-fmt nil :value ";;; init-completion.el --- Completion settings -*- lexical-binding: t -*-\12;;; Commentary:\12\12;;; Code:\12" :post-blank 1 :post-affiliated 37284 :mode planning :granularity element :org-element--cache-sync-key nil :cached t :parent #164=(section (:begin 37284 :end 37420 :contents-begin 37284 :contents-end 37419 :robust-begin 37284 :robust-end 37417 :post-blank 1 :post-affiliated 37284 :mode section :granularity element :org-element--cache-sync-key nil :cached t :parent #163#)))) 0] #164# 0] (node-property (:key "HEADER-ARGS" :value ":tangle lisp/init-completion.el :mkdirp yes" :begin 37189 :end 37247 :post-blank 0 :post-affiliated 37189 :mode node-property :granularity element :org-element--cache-sync-key nil :cached t :parent #165#)) 0] [[nil nil #167=(section (:begin 37432 :end 38697 :contents-begin 37432 :contents-end 38696 :robust-begin 37432 :robust-end 38694 :post-blank 1 :post-affiliated 37432 :mode section :granularity element :org-element--cache-sync-key nil :cached t :parent #166#)) 0] [nil nil (src-block (:language "emacs-lisp" :switches nil :parameters nil :begin 37480 :end 38697 :number-lines nil :preserve-indent nil :retain-labels t :use-labels t :label-fmt nil :value "  (use-package vertico\12    :ensure t\12    :hook (after-init . vertico-mode)\12    :bind (:map minibuffer-local-map\12                (\"M-<DEL>\" . my/minibuffer-backward-kill)\12                :map vertico-map\12                (\"M-q\" . vertico-quick-insert)) ; use C-g to exit\12    :config\12    (defun my/minibuffer-backward-kill (arg)\12      \"When minibuffer is completing a file name delete up to parent\12  folder, otherwise delete a word\"\12      (interactive \"p\")\12      (if minibuffer-completing-file-name\12          ;; Borrowed from https://github.com/raxod502/selectrum/issues/498#issuecomment-803283608\12          (if (string-match-p \"/.\" (minibuffer-contents))\12              (zap-up-to-char (- arg) ?/)\12            (delete-minibuffer-contents))\12        (backward-kill-word arg)))\12\12    ;; Do not allow the cursor in the minibuffer prompt\12    (setq minibuffer-prompt-properties\12          '(read-only t cursor-intangible t face minibuffer-prompt))\12    (add-hook 'minibuffer-setup-hook #'cursor-intangible-mode)\12    \12    (setq vertico-cycle t)                ; cycle from last to first\12    :custom\12    (vertico-count 15)                    ; number of candidates to display, default is 10\12    )\12" :post-blank 1 :post-affiliated 37480 :mode nil :granularity element :org-element--cache-sync-key nil :cached t :parent #167#)) 0] (paragraph (:begin 37432 :end 37480 :contents-begin 37432 :contents-end 37479 :post-blank 1 :post-affiliated 37432 :mode planning :granularity element :org-element--cache-sync-key nil :cached t :parent #167#)) 0] #166# -1] #62# 0] [[[[nil nil #169=(section (:begin 38711 :end 39491 :contents-begin 38711 :contents-end 39490 :robust-begin 38711 :robust-end 39488 :post-blank 1 :post-affiliated 38711 :mode section :granularity element :org-element--cache-sync-key nil :cached t :parent #168#)) 0] [[nil nil (src-block (:language "emacs-lisp" :switches nil :parameters nil :begin 38764 :end 39491 :number-lines nil :preserve-indent nil :retain-labels t :use-labels t :label-fmt nil :value ";; support Pinyin first character match for orderless, avy etc.\12(use-package pinyinlib\12  :ensure t)\12\12;; orderless 是一种哲学思想\12(use-package orderless\12  :ensure t\12  :init\12  (setq completion-styles '(orderless partial-completion basic))\12  (setq orderless-component-separator \"[ &]\") ; & is for company because space will break completion\12  (setq completion-category-defaults nil)\12  (setq completion-category-overrides nil)\12  :config\12  ;; make completion support pinyin, refer to\12  ;; https://emacs-china.org/t/vertico/17913/2\12  (defun completion--regex-pinyin (str)\12    (orderless-regexp (pinyinlib-build-regexp-string str)))\12  (add-to-list 'orderless-matching-styles 'completion--regex-pinyin)\12  )\12" :post-blank 1 :post-affiliated 38764 :mode nil :granularity element :org-element--cache-sync-key nil :cached t :parent #169#)) 0] nil #170# -1] (paragraph (:begin 38711 :end 38764 :contents-begin 38711 :contents-end 38763 :post-blank 1 :post-affiliated 38711 :mode planning :granularity element :org-element--cache-sync-key nil :cached t :parent #169#)) 1] [[[nil nil (paragraph (:begin 39506 :end 39559 :contents-begin 39506 :contents-end 39558 :post-blank 1 :post-affiliated 39506 :mode planning :granularity element :org-element--cache-sync-key nil :cached t :parent #172=(section (:begin 39506 :end 39802 :contents-begin 39506 :contents-end 39801 :robust-begin 39506 :robust-end 39799 :post-blank 1 :post-affiliated 39506 :mode section :granularity element :org-element--cache-sync-key nil :cached t :parent #170#)))) 0] [nil nil #171# 0] (src-block (:language "emacs-lisp" :switches nil :parameters nil :begin 39559 :end 39802 :number-lines nil :preserve-indent nil :retain-labels t :use-labels t :label-fmt nil :value ";; minibuffer helpful annotations\12(use-package marginalia\12  :ensure t\12  :hook (after-init . marginalia-mode)\12  :custom\12  (marginalia-annotators '(marginalia-annotators-heavy marginalia-annotators-light nil)))\12" :post-blank 1 :post-affiliated 39559 :mode nil :granularity element :org-element--cache-sync-key nil :cached t :parent #172#)) 0] [nil [nil nil (src-block (:language "emacs-lisp" :switches nil :parameters nil :begin 39861 :end 43679 :number-lines nil :preserve-indent nil :retain-labels t :use-labels t :label-fmt nil :value "(use-package consult\12  :ensure t\12  :after org\12  :bind (([remap goto-line]                     . consult-goto-line)\12         ([remap isearch-forward]               . consult-line-symbol-at-point) ; my-consult-ripgrep-or-line\12;         ([remap switch-to-buffer]              . consult-buffer)\12         ([remap switch-to-buffer-other-window] . consult-buffer-other-window)\12         ([remap switch-to-buffer-other-frame]  . consult-buffer-other-frame)\12         ([remap yank-pop]                      . consult-yank-pop)\12         ([remap apropos]                       . consult-apropos)\12         ([remap bookmark-jump]                 . consult-bookmark)\12         ([remap goto-line]                     . consult-goto-line)\12         ([remap imenu]                         . consult-imenu)\12         ([remap multi-occur]                   . consult-multi-occur)\12         ([remap recentf-open-files]            . consult-recent-file)\12         (\"C-x j\"                               . consult-mark)\12         (\"C-c g\"                               . consult-ripgrep)\12         (\"C-c f\"                               . consult-find)\12         (\"\\e\\ef\"                               . consult-locate) ; need to enable locate first\12         (\"C-c n h\"                             . my/consult-find-org-headings)\12         :map org-mode-map\12         (\"C-c C-j\"                             . consult-org-heading)\12         :map minibuffer-local-map\12         (\"C-r\"                                 . consult-history)\12         :map isearch-mode-map\12         (\"C-;\"                                 . consult-line)\12         :map prog-mode-map\12         (\"C-c C-j\"                             . consult-outline)\12         )\12  :hook (completion-list-mode . consult-preview-at-point-mode)\12  :init\12  ;; Optionally configure the register formatting. This improves the register\12  ;; preview for `consult-register', `consult-register-load',\12  ;; `consult-register-store' and the Emacs built-ins.\12  (setq register-preview-delay 0\12        register-preview-function #'consult-register-format)\12\12  ;; Optionally tweak the register preview window.\12  ;; This adds thin lines, sorting and hides the mode line of the window.\12  (advice-add #'register-preview :override #'consult-register-window)\12\12  ;; Use Consult to select xref locations with preview\12  (setq xref-show-xrefs-function #'consult-xref\12        xref-show-definitions-function #'consult-xref)\12\12  ;; MacOS locate doesn't support `--ignore-case --existing' args.\12  (setq consult-locate-args (pcase system-type\12                              ('gnu/linux \"locate --ignore-case --existing --regex\")\12                              ('darwin \"mdfind -name\")))\12  :config\12  (consult-customize\12   consult-theme\12   :preview-key '(:debounce 0.2 any)\12   consult-ripgrep consult-git-grep consult-grep\12   consult-bookmark consult-recent-file consult-xref\12   consult--source-recent-file consult--source-project-recent-file consult--source-bookmark\12   :preview-key (kbd \"M-.\"))\12\12  ;; Optionally configure the narrowing key.\12  ;; Both < and C-+ work reasonably well.\12  (setq consult-narrow-key \"<\") ;; (kbd \"C-+\")\12\12  (autoload 'projectile-project-root \"projectile\")\12  (setq consult-project-root-function #'projectile-project-root)\12\12  ;; search all org file headings under a directory, see:\12  ;; https://emacs-china.org/t/org-files-heading-entry/20830/4\12  (defun my/consult-find-org-headings (&optional match)\12    \"find headngs in all org files.\"\12    (interactive)\12    (consult-org-heading match (directory-files org-directory t \"^[0-9]\\\\{8\\\\}.+\\\\.org$\")))\12\12  ;; Use `consult-ripgrep' instead of `consult-line' in large buffers\12  (defun consult-line-symbol-at-point ()\12    \"Consult line the synbol where the point is\"\12    (interactive)\12    (consult-line (thing-at-point 'symbol)))\12  )\12" :post-blank 1 :post-affiliated 39861 :mode nil :granularity element :org-element--cache-sync-key nil :cached t :parent #173=(section (:begin 39814 :end 43679 :contents-begin 39814 :contents-end 43678 :robust-begin 39814 :robust-end 43676 :post-blank 1 :post-affiliated 39814 :mode section :granularity element :org-element--cache-sync-key nil :cached t :parent #171#)))) 0] (paragraph (:begin 39814 :end 39861 :contents-begin 39814 :contents-end 39860 :post-blank 1 :post-affiliated 39814 :mode planning :granularity element :org-element--cache-sync-key nil :cached t :parent #173#)) 1] #173# 0] #172# 0] [[[nil nil #175=(section (:begin 43689 :end 45331 :contents-begin 43689 :contents-end 45330 :robust-begin 43689 :robust-end 45328 :post-blank 1 :post-affiliated 43689 :mode section :granularity element :org-element--cache-sync-key nil :cached t :parent #174#)) 0] [nil nil (src-block (:language "emacs-lisp" :switches nil :parameters nil :begin 43732 :end 45331 :number-lines nil :preserve-indent nil :retain-labels t :use-labels t :label-fmt nil :value "(use-package corfu\12  :ensure t\12  :hook (after-init . global-corfu-mode)\12  :bind\12  (:map corfu-map\12        (\"SPC\" . corfu-insert-separator)    ; configure space for separator insertion\12        (\"M-q\" . corfu-quick-complete)      ; use C-g to exit\12        (\"TAB\" . corfu-next)\12        ([tab] . corfu-next)\12        (\"S-TAB\" . corfu-previous)\12        ([backtab] . corfu-previous))\12  :config\12  ;; TAB cycle if there are only few candidates\12  (setq completion-cycle-threshold 0)\12  (setq tab-always-indent 'complete)\12\12  (defun corfu-enable-always-in-minibuffer ()\12    \"Enable Corfu in the minibuffer if Vertico/Mct are not active.\"\12    (unless (or (bound-and-true-p mct--active)\12                (bound-and-true-p vertico--input))\12      ;; (setq-local corfu-auto nil) Enable/disable auto completion\12      (corfu-mode 1)))\12  (add-hook 'minibuffer-setup-hook #'corfu-enable-always-in-minibuffer 1)\12\12  ;; enable corfu in eshell\12  (add-hook 'eshell-mode-hook\12            (lambda ()\12              (setq-local corfu-auto nil)\12              (corfu-mode)))\12\12  ;; For Eshell\12  ;; ===========\12  ;; avoid press RET twice in Eshell\12  (defun corfu-send-shell (&rest _)\12    \"Send completion candidate when inside comint/eshell.\"\12    (cond\12     ((and (derived-mode-p 'eshell-mode) (fboundp 'eshell-send-input))\12      (eshell-send-input))\12     ((and (derived-mode-p 'comint-mode)  (fboundp 'comint-send-input))\12      (comint-send-input))))\12\12  (advice-add #'corfu-insert :after #'corfu-send-shell)\12\12  :custom\12  (corfu-cycle t)                ;; Enable cycling for `corfu-next/previous'\12  )\12" :post-blank 1 :post-affiliated 43732 :mode nil :granularity element :org-element--cache-sync-key nil :cached t :parent #175#)) 0] (paragraph (:begin 43689 :end 43732 :contents-begin 43689 :contents-end 43731 :post-blank 1 :post-affiliated 43689 :mode planning :granularity element :org-element--cache-sync-key nil :cached t :parent #175#)) 0] [[[nil nil #177=(section (:begin 45345 :end 46213 :contents-begin 45345 :contents-end 46212 :robust-begin 45345 :robust-end 46210 :post-blank 1 :post-affiliated 45345 :mode section :granularity element :org-element--cache-sync-key nil :cached t :parent #176#)) 0] [nil nil (src-block (:language "emacs-lisp" :switches nil :parameters nil :begin 45402 :end 46213 :number-lines nil :preserve-indent nil :retain-labels t :use-labels t :label-fmt nil :value ";; yasnippet settings\12(use-package yasnippet\12  :ensure t\12  :diminish yas-minor-mode\12  :hook ((after-init . yas-reload-all)\12         ((prog-mode LaTeX-mode org-mode) . yas-minor-mode))\12  :config\12  ;; Suppress warning for yasnippet code.\12  (require 'warnings)\12  (add-to-list 'warning-suppress-types '(yasnippet backquote-change))\12\12  (setq yas-prompt-functions '(yas-x-prompt yas-dropdown-prompt))\12  (defun smarter-yas-expand-next-field ()\12    \"Try to `yas-expand' then `yas-next-field' at current cursor position.\"\12    (interactive)\12    (let ((old-point (point))\12          (old-tick (buffer-chars-modified-tick)))\12      (yas-expand)\12      (when (and (eq old-point (point))\12                 (eq old-tick (buffer-chars-modified-tick)))\12        (ignore-errors (yas-next-field))))))\12" :post-blank 1 :post-affiliated 45402 :mode nil :granularity element :org-element--cache-sync-key nil :cached t :parent #177#)) 0] (paragraph (:begin 45345 :end 45402 :contents-begin 45345 :contents-end 45401 :post-blank 1 :post-affiliated 45345 :mode planning :granularity element :org-element--cache-sync-key nil :cached t :parent #177#)) 0] [nil [nil nil (src-block (:language "emacs-lisp" :switches nil :parameters nil :begin 46242 :end 46409 :number-lines nil :preserve-indent nil :retain-labels t :use-labels t :label-fmt nil :value "\12(provide 'init-completion)\12;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;\12;;; init-completion.el ends here\12" :post-blank 2 :post-affiliated 46242 :mode planning :granularity element :cached t :parent #179=(section (:begin 46242 :end 46409 :contents-begin 46242 :contents-end 46407 :robust-begin 46242 :robust-end 46405 :post-blank 2 :post-affiliated 46242 :mode section :granularity element :cached t :parent #178# :org-element--cache-sync-key nil)) :org-element--cache-sync-key nil)) 0] #179# 1] #178# 0] #176# 1] #174# 0] #168# 0] #57# -1] #128# 0] nil nil 0] org-element--cache-compare)))