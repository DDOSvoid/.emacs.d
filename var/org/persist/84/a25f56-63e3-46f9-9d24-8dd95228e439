(((elisp org-element--headline-cache) . #s(avl-tree- [[[[[[[nil nil #84=(headline (:raw-value #1="early-init.el" :begin 110 :end 1090 :pre-blank 0 :contents-begin 126 :contents-end 1089 :robust-begin 180 :robust-end 1087 :level 1 :priority nil :tags nil :todo-keyword nil :todo-type nil :post-blank 1 :footnote-section-p nil :archivedp nil :commentedp nil :post-affiliated 110 :HEADER-ARGS ":tangle early-init.el" :title #1# :mode nil :granularity element :org-element--cache-sync-key nil :cached t :parent #3=(org-data (:begin 1 :contents-begin 1 :contents-end 59997 :end 59999 :robust-begin 3 :robust-end 59995 :post-blank 2 :post-affiliated 1 :path "/home/ddosvoid/.emacs.d/emacs-config.org" :mode org-data :CATEGORY "emacs-config" :cached t :org-element--cache-sync-key nil)))) 0] nil #5=(headline (:raw-value #2="init.el" :begin 1090 :end 3967 :pre-blank 0 :contents-begin 1100 :contents-end 3966 :robust-begin 1148 :robust-end 3964 :level 1 :priority nil :tags nil :todo-keyword nil :todo-type nil :post-blank 1 :footnote-section-p nil :archivedp nil :commentedp nil :post-affiliated 1090 :HEADER-ARGS ":tangle init.el" :title #2# :mode nil :granularity element :org-element--cache-sync-key nil :cached t :parent #3#)) -1] [nil nil #88=(headline (:raw-value #4="package" :begin 1304 :end 1648 :pre-blank 1 :contents-begin 1316 :contents-end 1647 :robust-begin 1318 :robust-end 1645 :level 2 :priority nil :tags nil :todo-keyword nil :todo-type nil :post-blank 1 :footnote-section-p nil :archivedp nil :commentedp nil :post-affiliated 1304 :title #4# :mode nil :granularity element :cached t :parent #5# :org-element--cache-sync-key nil)) 0] #86=(headline (:raw-value #6="init.el header" :begin 1150 :end 1304 :pre-blank 1 :contents-begin 1169 :contents-end 1303 :robust-begin 1171 :robust-end 1301 :level 2 :priority nil :tags nil :todo-keyword nil :todo-type nil :post-blank 1 :footnote-section-p nil :archivedp nil :commentedp nil :post-affiliated 1150 :title #6# :mode nil :granularity element :cached t :parent #5# :org-element--cache-sync-key nil)) -1] [[[nil nil #93=(headline (:raw-value #7="quelpa" :begin 2422 :end 2818 :pre-blank 1 :contents-begin 2433 :contents-end 2817 :robust-begin 2435 :robust-end 2815 :level 2 :priority nil :tags nil :todo-keyword nil :todo-type nil :post-blank 1 :footnote-section-p nil :archivedp nil :commentedp nil :post-affiliated 2422 :title #7# :mode nil :granularity element :cached t :parent #5# :org-element--cache-sync-key nil)) 0] [nil [nil nil #100=(headline (:raw-value #8="init.el footer" :begin 3803 :end 3967 :pre-blank 1 :contents-begin 3822 :contents-end 3966 :robust-begin 3824 :robust-end 3964 :level 2 :priority nil :tags nil :todo-keyword nil :todo-type nil :post-blank 1 :footnote-section-p nil :archivedp nil :commentedp nil :post-affiliated 3803 :title #8# :mode nil :granularity element :org-element--cache-sync-key nil :cached t :parent #5#)) 0] #97=(headline #9=(:raw-value "other config" :begin 3240 :end 3803 :pre-blank 1 :contents-begin 3257 :contents-end 3802 :robust-begin 3259 :robust-end 3800 :level 2 :priority nil :tags nil :todo-keyword nil :todo-type nil :post-blank 1 :footnote-section-p nil :archivedp nil :commentedp nil :post-affiliated 3240 :title (#("other config" 0 12 (:parent (headline #9#)))) :parent #5# :cached t :org-element--cache-sync-key nil)) 1] #95=(headline (:raw-value #10="loading config" :begin 2818 :end 3240 :pre-blank 1 :contents-begin 2837 :contents-end 3239 :robust-begin 2839 :robust-end 3237 :level 2 :priority nil :tags nil :todo-keyword nil :todo-type nil :post-blank 1 :footnote-section-p nil :archivedp nil :commentedp nil :post-affiliated 2818 :title #10# :mode nil :granularity element :org-element--cache-sync-key nil :cached t :parent #5#)) 1] [[nil nil #105=(headline (:raw-value #11="init-ui.el header" :begin 4050 :end 4192 :pre-blank 1 :contents-begin 4072 :contents-end 4191 :robust-begin 4074 :robust-end 4189 :level 2 :priority nil :tags nil :todo-keyword nil :todo-type nil :post-blank 1 :footnote-section-p nil :archivedp nil :commentedp nil :post-affiliated 4050 :title #11# :mode nil :granularity element :org-element--cache-sync-key nil :cached t :parent #14=(headline (:raw-value #12="init-ui.el" :begin 3967 :end 17490 :pre-blank 0 :contents-begin 3980 :contents-end 17489 :robust-begin 4048 :robust-end 17487 :level 1 :priority nil :tags nil :todo-keyword nil :todo-type nil :post-blank 1 :footnote-section-p nil :archivedp nil :commentedp nil :post-affiliated 3967 :HEADER-ARGS ":tangle lisp/init-ui.el :mkdirp yes" :title #12# :mode nil :granularity element :org-element--cache-sync-key nil :cached t :parent #3#)))) 0] [nil nil #108=(headline (:raw-value #13="doom-themes" :begin 5917 :end 6661 :pre-blank 1 :contents-begin 5933 :contents-end 6660 :robust-begin 5935 :robust-end 6658 :level 2 :priority nil :tags nil :todo-keyword nil :todo-type nil :post-blank 1 :footnote-section-p nil :archivedp nil :commentedp nil :post-affiliated 5917 :title #13# :mode nil :granularity element :cached t :parent #14# :org-element--cache-sync-key nil)) 0] #106=(headline (:raw-value #15="ef-themes" :begin 4192 :end 5917 :pre-blank 1 :contents-begin 4209 :contents-end 5916 :robust-begin 4211 :robust-end 5914 :level 2 :priority nil :tags nil :todo-keyword nil :todo-type nil :post-blank 1 :footnote-section-p nil :archivedp nil :commentedp nil :post-affiliated 4192 :title #15# :mode nil :granularity element :cached t :parent #14# :org-element--cache-sync-key nil)) 0] #14# -1] #90=(headline (:raw-value #16="use-package" :begin 1648 :end 2422 :pre-blank 0 :contents-begin 1663 :contents-end 2421 :robust-begin 1665 :robust-end 2419 :level 2 :priority nil :tags nil :todo-keyword nil :todo-type nil :post-blank 1 :footnote-section-p nil :archivedp nil :commentedp nil :post-affiliated 1648 :title #16# :mode nil :granularity element :cached t :parent #5# :org-element--cache-sync-key nil)) 1] [[[nil nil #112=(headline (:raw-value #17="all-the-icons" :begin 6909 :end 7160 :pre-blank 1 :contents-begin 6927 :contents-end 7159 :robust-begin 6929 :robust-end 7157 :level 2 :priority nil :tags nil :todo-keyword nil :todo-type nil :post-blank 1 :footnote-section-p nil :archivedp nil :commentedp nil :post-affiliated 6909 :title #17# :mode nil :granularity element :cached t :parent #14# :org-element--cache-sync-key nil)) 0] [nil [nil nil #119=(headline (:raw-value #18="other config" :begin 11433 :end 15737 :pre-blank 1 :contents-begin 11450 :contents-end 15736 :robust-begin 11452 :robust-end 15734 :level 2 :priority nil :tags nil :todo-keyword nil :todo-type nil :post-blank 1 :footnote-section-p nil :archivedp nil :commentedp nil :post-affiliated 11433 :title #18# :mode nil :granularity element :cached t :parent #14# :org-element--cache-sync-key nil)) 0] #117=(headline (:raw-value #19="fontaine" :begin 7603 :end 11433 :pre-blank 1 :contents-begin 7616 :contents-end 11432 :robust-begin 7618 :robust-end 11430 :level 2 :priority nil :tags nil :todo-keyword nil :todo-type nil :post-blank 1 :footnote-section-p nil :archivedp nil :commentedp nil :post-affiliated 7603 :title #19# :mode nil :granularity element :cached t :parent #14# :org-element--cache-sync-key nil)) 1] #115=(headline (:raw-value #20="nerd-icons" :begin 7160 :end 7603 :pre-blank 1 :contents-begin 7175 :contents-end 7602 :robust-begin 7177 :robust-end 7600 :level 2 :priority nil :tags nil :todo-keyword nil :todo-type nil :post-blank 1 :footnote-section-p nil :archivedp nil :commentedp nil :post-affiliated 7160 :title #20# :mode nil :granularity element :cached t :parent #14# :org-element--cache-sync-key nil)) 1] [[nil [nil nil #123=(headline (:raw-value #21="minions [deprecated]" :begin 15956 :end 16078 :pre-blank 1 :contents-begin 15982 :contents-end 16077 :robust-begin 15984 :robust-end 16075 :level 3 :priority nil :tags nil :todo-keyword nil :todo-type nil :post-blank 1 :footnote-section-p nil :archivedp nil :commentedp nil :post-affiliated 15956 :title #21# :mode nil :granularity element :cached t :parent #24=(headline (:raw-value #22="mode line config" :begin 15737 :end 17318 :pre-blank 0 :contents-begin 15757 :contents-end 17317 :robust-begin 15759 :robust-end 17315 :level 2 :priority nil :tags nil :todo-keyword nil :todo-type nil :post-blank 1 :footnote-section-p nil :archivedp nil :commentedp nil :post-affiliated 15737 :title #22# :mode nil :granularity element :org-element--cache-sync-key nil :cached t :parent #14#)) :org-element--cache-sync-key nil)) 0] #121=(headline (:raw-value #23="doom-modeline" :begin 15757 :end 15956 :pre-blank 1 :contents-begin 15776 :contents-end 15955 :robust-begin 15778 :robust-end 15953 :level 3 :priority nil :tags nil :todo-keyword nil :todo-type nil :post-blank 1 :footnote-section-p nil :archivedp nil :commentedp nil :post-affiliated 15757 :title #23# :mode section :granularity element :org-element--cache-sync-key nil :cached t :parent #24#)) 1] [[nil nil #127=(headline (:raw-value #25="init-ui.el footer" :begin 17318 :end 17490 :pre-blank 1 :contents-begin 17340 :contents-end 17489 :robust-begin 17342 :robust-end 17487 :level 2 :priority nil :tags nil :todo-keyword nil :todo-type nil :post-blank 1 :footnote-section-p nil :archivedp nil :commentedp nil :post-affiliated 17318 :title #25# :mode nil :granularity element :cached t :parent #14# :org-element--cache-sync-key nil)) 0] nil #30=(headline #26=(:raw-value "init-base.el" :begin 17490 :end 21702 :pre-blank 0 :contents-begin 17505 :contents-end 21701 :robust-begin 17575 :robust-end 21699 :level 1 :priority nil :tags nil :todo-keyword nil :todo-type nil :post-blank 1 :footnote-section-p nil :archivedp nil :commentedp nil :post-affiliated 17490 :HEADER-ARGS ":tangle lisp/init-base.el :mkdirp yes" :title (#("init-base.el" 0 12 (:parent (headline #26#)))) :parent #3# :cached t :org-element--cache-sync-key nil)) -1] #125=(headline #27=(:raw-value "keycast" :begin 16078 :end 17318 :pre-blank 1 :contents-begin 16091 :contents-end 17317 :robust-begin 16093 :robust-end 17315 :level 3 :priority nil :tags nil :todo-keyword nil :todo-type nil :post-blank 1 :footnote-section-p nil :archivedp nil :commentedp nil :post-affiliated 16078 :title (#("keycast" 0 7 (:parent (headline #27#)))) :parent #24# :cached t :org-element--cache-sync-key nil)) 0] #24# 0] #110=(headline (:raw-value #28="eshell-git-prompt" :begin 6661 :end 6909 :pre-blank 1 :contents-begin 6683 :contents-end 6908 :robust-begin 6685 :robust-end 6906 :level 2 :priority nil :tags nil :todo-keyword nil :todo-type nil :post-blank 1 :footnote-section-p nil :archivedp nil :commentedp nil :post-affiliated 6661 :title #28# :mode nil :granularity element :cached t :parent #14# :org-element--cache-sync-key nil)) -1] [[[[[nil nil #133=(headline (:raw-value #29="no-littering" :begin 17725 :end 17882 :pre-blank 1 :contents-begin 17742 :contents-end 17881 :robust-begin 17744 :robust-end 17879 :level 2 :priority nil :tags nil :todo-keyword nil :todo-type nil :post-blank 1 :footnote-section-p nil :archivedp nil :commentedp nil :post-affiliated 17725 :title #29# :mode nil :granularity element :cached t :parent #30# :org-element--cache-sync-key nil)) 0] [[nil nil #136=(headline (:raw-value #31="saveplace" :begin 18508 :end 18633 :pre-blank 1 :contents-begin 18522 :contents-end 18632 :robust-begin 18524 :robust-end 18630 :level 2 :priority nil :tags nil :todo-keyword nil :todo-type nil :post-blank 1 :footnote-section-p nil :archivedp nil :commentedp nil :post-affiliated 18508 :title #31# :mode nil :granularity element :cached t :parent #30# :org-element--cache-sync-key nil)) 0] nil #139=(headline (:raw-value #32="recentf" :begin 18633 :end 20071 :pre-blank 1 :contents-begin 18645 :contents-end 20070 :robust-begin 18647 :robust-end 20068 :level 2 :priority nil :tags nil :todo-keyword nil :todo-type nil :post-blank 1 :footnote-section-p nil :archivedp nil :commentedp nil :post-affiliated 18633 :title #32# :mode nil :granularity element :cached t :parent #30# :org-element--cache-sync-key nil)) -1] #135=(headline (:raw-value #33="savehist" :begin 17882 :end 18508 :pre-blank 1 :contents-begin 17895 :contents-end 18507 :robust-begin 17897 :robust-end 18505 :level 2 :priority nil :tags nil :todo-keyword nil :todo-type nil :post-blank 1 :footnote-section-p nil :archivedp nil :commentedp nil :post-affiliated 17882 :title #33# :mode nil :granularity element :cached t :parent #30# :org-element--cache-sync-key nil)) 1] [[nil nil #143=(headline (:raw-value #34="crux" :begin 20387 :end 20883 :pre-blank 1 :contents-begin 20396 :contents-end 20882 :robust-begin 20398 :robust-end 20880 :level 2 :priority nil :tags nil :todo-keyword nil :todo-type nil :post-blank 1 :footnote-section-p nil :archivedp nil :commentedp nil :post-affiliated 20387 :title #34# :mode nil :granularity element :org-element--cache-sync-key nil :cached t :parent #30#)) 0] [[nil nil #151=(headline (:raw-value #35="init-base footer" :begin 21527 :end 21702 :pre-blank 1 :contents-begin 21548 :contents-end 21701 :robust-begin 21550 :robust-end 21699 :level 2 :priority nil :tags nil :todo-keyword nil :todo-type nil :post-blank 1 :footnote-section-p nil :archivedp nil :commentedp nil :post-affiliated 21527 :title #35# :mode nil :granularity element :org-element--cache-sync-key nil :cached t :parent #30#)) 0] nil #40=(headline #36=(:raw-value "init-edit.el" :begin 21702 :end 23055 :pre-blank 0 :contents-begin 21717 :contents-end 23054 :robust-begin 21787 :robust-end 23052 :level 1 :priority nil :tags nil :todo-keyword nil :todo-type nil :post-blank 1 :footnote-section-p nil :archivedp nil :commentedp nil :post-affiliated 21702 :HEADER-ARGS ":tangle lisp/init-edit.el :mkdirp yes" :title (#("init-edit.el" 0 12 (:parent (headline #36#)))) :parent #3# :cached t :org-element--cache-sync-key nil)) -1] #144=(headline #37=(:raw-value "rime" :begin 20883 :end 21527 :pre-blank 0 :contents-begin 20891 :contents-end 21526 :robust-begin 20893 :robust-end 21524 :level 2 :priority nil :tags nil :todo-keyword nil :todo-type nil :post-blank 1 :footnote-section-p nil :archivedp nil :commentedp nil :post-affiliated 20883 :title (#("rime" 0 4 (:parent (headline #37#)))) :parent #30# :cached t :org-element--cache-sync-key nil)) 1] #141=(headline (:raw-value #38="undo-tree [deprecated]" :begin 20071 :end 20387 :pre-blank 1 :contents-begin 20098 :contents-end 20386 :robust-begin 20100 :robust-end 20384 :level 2 :priority nil :tags nil :todo-keyword nil :todo-type nil :post-blank 1 :footnote-section-p nil :archivedp nil :commentedp nil :post-affiliated 20071 :title #38# :mode nil :granularity element :cached t :parent #30# :org-element--cache-sync-key nil)) 0] [[[[nil nil #156=(headline (:raw-value #39="backup config" :begin 21940 :end 22078 :pre-blank 1 :contents-begin 21958 :contents-end 22077 :robust-begin 21960 :robust-end 22075 :level 2 :priority nil :tags nil :todo-keyword nil :todo-type nil :post-blank 1 :footnote-section-p nil :archivedp nil :commentedp nil :post-affiliated 21940 :title #39# :mode nil :granularity element :org-element--cache-sync-key nil :cached t :parent #40#)) 0] [nil nil #160=(headline (:raw-value #41="delsel" :begin 22178 :end 22406 :pre-blank 1 :contents-begin 22189 :contents-end 22405 :robust-begin 22191 :robust-end 22403 :level 2 :priority nil :tags nil :todo-keyword nil :todo-type nil :post-blank 1 :footnote-section-p nil :archivedp nil :commentedp nil :post-affiliated 22178 :title #41# :mode nil :granularity element :org-element--cache-sync-key nil :cached t :parent #40#)) 0] #159=(headline (:raw-value #42="pixel-scroll-precision-mode" :begin 22078 :end 22178 :pre-blank 1 :contents-begin 22110 :contents-end 22177 :robust-begin 22112 :robust-end 22175 :level 2 :priority nil :tags nil :todo-keyword nil :todo-type nil :post-blank 1 :footnote-section-p nil :archivedp nil :commentedp nil :post-affiliated 22078 :title #42# :mode nil :granularity element :cached t :parent #40# :org-element--cache-sync-key nil)) 0] [nil [nil nil #165=(headline (:raw-value #43="init-edit.el footer" :begin 22878 :end 23055 :pre-blank 1 :contents-begin 22902 :contents-end 23054 :robust-begin 22904 :robust-end 23052 :level 2 :priority nil :tags nil :todo-keyword nil :todo-type nil :post-blank 1 :footnote-section-p nil :archivedp nil :commentedp nil :post-affiliated 22878 :title #43# :mode nil :granularity element :org-element--cache-sync-key nil :cached t :parent #40#)) 0] #167=(headline (:raw-value #44="avy [deprecated]" :begin 22858 :end 22878 :pre-blank 0 :contents-begin nil :contents-end nil :robust-begin nil :robust-end nil :level 2 :priority nil :tags nil :todo-keyword nil :todo-type nil :post-blank 0 :footnote-section-p nil :archivedp nil :commentedp nil :post-affiliated 22858 :title #44# :mode nil :granularity element :org-element--cache-sync-key nil :cached t :parent #40#)) 1] #163=(headline (:raw-value #45="autorevert" :begin 22406 :end 22858 :pre-blank 1 :contents-begin 22421 :contents-end 22857 :robust-begin 22423 :robust-end 22855 :level 2 :priority nil :tags nil :todo-keyword nil :todo-type nil :post-blank 1 :footnote-section-p nil :archivedp nil :commentedp nil :post-affiliated 22406 :title #45# :mode nil :granularity element :org-element--cache-sync-key nil :cached t :parent #40#)) 0] [nil [nil nil #170=(headline (:raw-value #46="org-mode config" :begin 23289 :end 32299 :pre-blank 1 :contents-begin 23309 :contents-end 32298 :robust-begin 23311 :robust-end 32296 :level 2 :priority nil :tags nil :todo-keyword nil :todo-type nil :post-blank 1 :footnote-section-p nil :archivedp nil :commentedp nil :post-affiliated 23289 :title #46# :mode nil :granularity element :cached t :parent #49=(headline #47=(:raw-value "init-org.el" :begin 23055 :end 38568 :pre-blank 0 :contents-begin 23069 :contents-end 38566 :robust-begin 23138 :robust-end 38564 :level 1 :priority nil :tags nil :todo-keyword nil :todo-type nil :post-blank 1 :footnote-section-p nil :archivedp nil :commentedp nil :post-affiliated 23055 :HEADER-ARGS ":tangle lisp/init-org.el :mkdirp yes" :title (#("init-org.el" 0 11 (:parent (headline #47#)))) :parent #3# :cached t :org-element--cache-sync-key nil)) :org-element--cache-sync-key nil)) 0] #168=(headline (:raw-value #48="init-org.el header" :begin 23139 :end 23289 :pre-blank 1 :contents-begin 23162 :contents-end 23288 :robust-begin 23164 :robust-end 23286 :level 2 :priority nil :tags nil :todo-keyword nil :todo-type nil :post-blank 1 :footnote-section-p nil :archivedp nil :commentedp nil :post-affiliated 23139 :title #48# :mode nil :granularity element :org-element--cache-sync-key nil :cached t :parent #49#)) 1] #49# -1] #155=(headline #50=(:raw-value "init-edit.el header" :begin 21789 :end 21940 :pre-blank 1 :contents-begin 21813 :contents-end 21939 :robust-begin 21815 :robust-end 21937 :level 2 :priority nil :tags nil :todo-keyword nil :todo-type nil :post-blank 1 :footnote-section-p nil :archivedp nil :commentedp nil :post-affiliated 21789 :title (#("init-edit.el header" 0 19 (:parent (headline #50#)))) :parent #40# :cached t :org-element--cache-sync-key nil)) 0] [[[[[nil nil #175=(headline (:raw-value #51="org-appear" :begin 33468 :end 33832 :pre-blank 1 :contents-begin 33483 :contents-end 33831 :robust-begin 33485 :robust-end 33829 :level 2 :priority nil :tags nil :todo-keyword nil :todo-type nil :post-blank 1 :footnote-section-p nil :archivedp nil :commentedp nil :post-affiliated 33468 :title #51# :mode nil :granularity element :org-element--cache-sync-key nil :cached t :parent #49#)) 0] nil #176=(headline #52=(:raw-value "org-capture" :begin 33832 :end 34629 :pre-blank 1 :contents-begin 33848 :contents-end 34628 :robust-begin 33850 :robust-end 34626 :level 2 :priority nil :tags nil :todo-keyword nil :todo-type nil :post-blank 1 :footnote-section-p nil :archivedp nil :commentedp nil :post-affiliated 33832 :title (#("org-capture" 0 11 (:parent (headline #52#)))) :parent #49# :cached t :org-element--cache-sync-key nil)) -1] [[[nil nil #181=(headline (:raw-value #53="consult-notes" :begin 36442 :end 38204 :pre-blank 1 :contents-begin 36460 :contents-end 38203 :robust-begin 36462 :robust-end 38201 :level 2 :priority nil :tags nil :todo-keyword nil :todo-type nil :post-blank 1 :footnote-section-p nil :archivedp nil :commentedp nil :post-affiliated 36442 :title #53# :mode nil :granularity element :org-element--cache-sync-key nil :cached t :parent #49#)) 0] [nil nil #185=(headline (:raw-value #54="init-org.el footer" :begin 38389 :end 38568 :pre-blank 1 :contents-begin 38415 :contents-end 38566 :robust-begin 38417 :robust-end 38564 :level 2 :priority nil :tags nil :todo-keyword nil :todo-type nil :post-blank 1 :footnote-section-p nil :archivedp nil :commentedp nil :post-affiliated 38389 :title #54# :mode nil :granularity element :org-element--cache-sync-key nil :cached t :parent #49#)) 0] #183=(headline (:raw-value #55="auctex [deprecated]" :begin 38204 :end 38389 :pre-blank 1 :contents-begin 38228 :contents-end 38388 :robust-begin 38230 :robust-end 38386 :level 2 :priority nil :tags nil :todo-keyword nil :todo-type nil :post-blank 1 :footnote-section-p nil :archivedp nil :commentedp nil :post-affiliated 38204 :title #55# :mode nil :granularity element :org-element--cache-sync-key nil :cached t :parent #49#)) 0] [nil nil #189=(headline (:raw-value #56="init-dev header" :begin 38653 :end 38807 :pre-blank 1 :contents-begin 38673 :contents-end 38807 :robust-begin 38675 :robust-end 38805 :level 2 :priority nil :tags nil :todo-keyword nil :todo-type nil :post-blank 0 :footnote-section-p nil :archivedp nil :commentedp nil :post-affiliated 38653 :title #56# :mode nil :granularity element :cached t :parent #58=(headline (:raw-value #57="init-dev.el" :begin 38568 :end 50606 :pre-blank 0 :contents-begin 38582 :contents-end 50605 :robust-begin 38651 :robust-end 50603 :level 1 :priority nil :tags nil :todo-keyword nil :todo-type nil :post-blank 1 :footnote-section-p nil :archivedp nil :commentedp nil :post-affiliated 38568 :HEADER-ARGS ":tangle lisp/init-dev.el :mkdirp yes" :title #57# :mode nil :granularity element :cached t :parent #3# :org-element--cache-sync-key nil)) :org-element--cache-sync-key nil)) 0] #58# -1] #178=(headline (:raw-value #59="denote" :begin 34629 :end 36442 :pre-blank 1 :contents-begin 34640 :contents-end 36441 :robust-begin 34642 :robust-end 36439 :level 2 :priority nil :tags nil :todo-keyword nil :todo-type nil :post-blank 1 :footnote-section-p nil :archivedp nil :commentedp nil :post-affiliated 34629 :title #59# :mode nil :granularity element :org-element--cache-sync-key nil :cached t :parent #49#)) 1] [[[nil nil #193=(headline (:raw-value #60="projectile" :begin 39137 :end 39488 :pre-blank 0 :contents-begin 39151 :contents-end 39487 :robust-begin 39153 :robust-end 39485 :level 2 :priority nil :tags nil :todo-keyword nil :todo-type nil :post-blank 1 :footnote-section-p nil :archivedp nil :commentedp nil :post-affiliated 39137 :title #60# :mode nil :granularity element :cached t :parent #58# :org-element--cache-sync-key nil)) 0] [nil nil #197=(headline (:raw-value #61="eglot" :begin 39824 :end 39993 :pre-blank 1 :contents-begin 39834 :contents-end 39992 :robust-begin 39836 :robust-end 39990 :level 2 :priority nil :tags nil :todo-keyword nil :todo-type nil :post-blank 1 :footnote-section-p nil :archivedp nil :commentedp nil :post-affiliated 39824 :title #61# :mode nil :granularity element :cached t :parent #58# :org-element--cache-sync-key nil)) 0] #195=(headline (:raw-value #62="lsp-mode [deprecated]" :begin 39488 :end 39824 :pre-blank 1 :contents-begin 39514 :contents-end 39823 :robust-begin 39516 :robust-end 39821 :level 2 :priority nil :tags nil :todo-keyword nil :todo-type nil :post-blank 1 :footnote-section-p nil :archivedp nil :commentedp nil :post-affiliated 39488 :title #62# :mode nil :granularity element :cached t :parent #58# :org-element--cache-sync-key nil)) 0] [[nil nil #200=(headline (:raw-value #63="racket-mode" :begin 40338 :end 40430 :pre-blank 1 :contents-begin 40354 :contents-end 40429 :robust-begin 40356 :robust-end 40427 :level 2 :priority nil :tags nil :todo-keyword nil :todo-type nil :post-blank 1 :footnote-section-p nil :archivedp nil :commentedp nil :post-affiliated 40338 :title #63# :mode nil :granularity element :cached t :parent #58# :org-element--cache-sync-key nil)) 0] [nil nil #203=(headline (:raw-value #64="json-mode" :begin 50009 :end 50153 :pre-blank 1 :contents-begin 50023 :contents-end 50152 :robust-begin 50025 :robust-end 50150 :level 2 :priority nil :tags nil :todo-keyword nil :todo-type nil :post-blank 1 :footnote-section-p nil :archivedp nil :commentedp nil :post-affiliated 50009 :title #64# :mode nil :granularity element :cached t :parent #58# :org-element--cache-sync-key nil)) 0] #202=(headline (:raw-value #65="cc-mode" :begin 40430 :end 50009 :pre-blank 1 :contents-begin 40442 :contents-end 50008 :robust-begin 40444 :robust-end 50006 :level 2 :priority nil :tags nil :todo-keyword nil :todo-type nil :post-blank 1 :footnote-section-p nil :archivedp nil :commentedp nil :post-affiliated 40430 :title #65# :mode nil :granularity element :cached t :parent #58# :org-element--cache-sync-key nil)) 0] #199=(headline (:raw-value #66="company-mode" :begin 39993 :end 40338 :pre-blank 1 :contents-begin 40010 :contents-end 40338 :robust-begin 40012 :robust-end 40336 :level 2 :priority nil :tags nil :todo-keyword nil :todo-type nil :post-blank 0 :footnote-section-p nil :archivedp nil :commentedp nil :post-affiliated 39993 :title #66# :mode nil :granularity element :cached t :parent #58# :org-element--cache-sync-key nil)) 0] #190=(headline (:raw-value #67="magit" :begin 38807 :end 39137 :pre-blank 1 :contents-begin 38817 :contents-end 39136 :robust-begin 38819 :robust-end 39134 :level 2 :priority nil :tags nil :todo-keyword nil :todo-type nil :post-blank 1 :footnote-section-p nil :archivedp nil :commentedp nil :post-affiliated 38807 :title #67# :mode nil :granularity element :cached t :parent #58# :org-element--cache-sync-key nil)) -1] [[[nil nil #209=(headline (:raw-value #68="other config" :begin 50319 :end 50426 :pre-blank 1 :contents-begin 50336 :contents-end 50425 :robust-begin 50338 :robust-end 50423 :level 2 :priority nil :tags nil :todo-keyword nil :todo-type nil :post-blank 1 :footnote-section-p nil :archivedp nil :commentedp nil :post-affiliated 50319 :title #68# :mode nil :granularity element :cached t :parent #58# :org-element--cache-sync-key nil)) 0] [nil nil #72=(headline (:raw-value #69="init-completion.el" :begin 50606 :end 59999 :pre-blank 0 :contents-begin 50627 :contents-end 59997 :robust-begin 50703 :robust-end 59995 :level 1 :priority nil :tags nil :todo-keyword nil :todo-type nil :post-blank 2 :footnote-section-p nil :archivedp nil :commentedp nil :post-affiliated 50606 :HEADER-ARGS ":tangle lisp/init-completion.el :mkdirp yes" :title #69# :mode nil :granularity element :cached t :parent #3# :org-element--cache-sync-key nil)) 0] #211=(headline (:raw-value #70="init-dev footer" :begin 50426 :end 50606 :pre-blank 1 :contents-begin 50446 :contents-end 50605 :robust-begin 50448 :robust-end 50603 :level 2 :priority nil :tags nil :todo-keyword nil :todo-type nil :post-blank 1 :footnote-section-p nil :archivedp nil :commentedp nil :post-affiliated 50426 :title #70# :mode nil :granularity element :cached t :parent #58# :org-element--cache-sync-key nil)) 0] [[[nil nil #216=(headline (:raw-value #71="vertico" :begin 50871 :end 52148 :pre-blank 1 :contents-begin 50883 :contents-end 52147 :robust-begin 50885 :robust-end 52145 :level 2 :priority nil :tags nil :todo-keyword nil :todo-type nil :post-blank 1 :footnote-section-p nil :archivedp nil :commentedp nil :post-affiliated 50871 :title #71# :mode nil :granularity element :cached t :parent #72# :org-element--cache-sync-key nil)) 0] [nil nil #220=(headline (:raw-value #73="marginalia" :begin 52942 :end 53253 :pre-blank 1 :contents-begin 52957 :contents-end 53252 :robust-begin 52959 :robust-end 53250 :level 2 :priority nil :tags nil :todo-keyword nil :todo-type nil :post-blank 1 :footnote-section-p nil :archivedp nil :commentedp nil :post-affiliated 52942 :title #73# :mode nil :granularity element :cached t :parent #72# :org-element--cache-sync-key nil)) 0] #218=(headline (:raw-value #74="orderless" :begin 52148 :end 52942 :pre-blank 1 :contents-begin 52162 :contents-end 52941 :robust-begin 52164 :robust-end 52939 :level 2 :priority nil :tags nil :todo-keyword nil :todo-type nil :post-blank 1 :footnote-section-p nil :archivedp nil :commentedp nil :post-affiliated 52148 :title #74# :mode nil :granularity element :cached t :parent #72# :org-element--cache-sync-key nil)) 0] [[nil nil #224=(headline (:raw-value #75="corfu [deprecated]" :begin 57221 :end 58897 :pre-blank 1 :contents-begin 57244 :contents-end 58896 :robust-begin 57246 :robust-end 58894 :level 2 :priority nil :tags nil :todo-keyword nil :todo-type nil :post-blank 1 :footnote-section-p nil :archivedp nil :commentedp nil :post-affiliated 57221 :title #75# :mode nil :granularity element :cached t :parent #72# :org-element--cache-sync-key nil)) 0] [nil nil #228=(headline (:raw-value #76="init-completion.el footer" :begin 59803 :end 59999 :pre-blank 0 :contents-begin 59832 :contents-end 59997 :robust-begin 59834 :robust-end 59995 :level 2 :priority nil :tags nil :todo-keyword nil :todo-type nil :post-blank 2 :footnote-section-p nil :archivedp nil :commentedp nil :post-affiliated 59803 :title #76# :mode nil :granularity element :cached t :parent #72# :org-element--cache-sync-key nil)) 0] #226=(headline (:raw-value #77="yasnippet [deprecated]" :begin 58897 :end 59803 :pre-blank 1 :contents-begin 58924 :contents-end 59802 :robust-begin 58926 :robust-end 59800 :level 2 :priority nil :tags nil :todo-keyword nil :todo-type nil :post-blank 1 :footnote-section-p nil :archivedp nil :commentedp nil :post-affiliated 58897 :title #77# :mode nil :granularity element :cached t :parent #72# :org-element--cache-sync-key nil)) 0] #222=(headline (:raw-value #78="consult" :begin 53253 :end 57221 :pre-blank 1 :contents-begin 53265 :contents-end 57220 :robust-begin 53267 :robust-end 57218 :level 2 :priority nil :tags nil :todo-keyword nil :todo-type nil :post-blank 1 :footnote-section-p nil :archivedp nil :commentedp nil :post-affiliated 53253 :title #78# :mode nil :granularity element :cached t :parent #72# :org-element--cache-sync-key nil)) 0] #213=(headline (:raw-value #79="init-completion.el header" :begin 50705 :end 50871 :pre-blank 1 :contents-begin 50735 :contents-end 50870 :robust-begin 50737 :robust-end 50868 :level 2 :priority nil :tags nil :todo-keyword nil :todo-type nil :post-blank 1 :footnote-section-p nil :archivedp nil :commentedp nil :post-affiliated 50705 :title #79# :mode nil :granularity element :cached t :parent #72# :org-element--cache-sync-key nil)) 1] #207=(headline (:raw-value #80="json-navigator" :begin 50153 :end 50319 :pre-blank 1 :contents-begin 50172 :contents-end 50318 :robust-begin 50174 :robust-end 50316 :level 2 :priority nil :tags nil :todo-keyword nil :todo-type nil :post-blank 1 :footnote-section-p nil :archivedp nil :commentedp nil :post-affiliated 50153 :title #80# :mode nil :granularity element :cached t :parent #58# :org-element--cache-sync-key nil)) -1] #172=(headline (:raw-value #81="org-modern" :begin 32299 :end 33468 :pre-blank 1 :contents-begin 32314 :contents-end 33467 :robust-begin 32316 :robust-end 33465 :level 2 :priority nil :tags nil :todo-keyword nil :todo-type nil :post-blank 1 :footnote-section-p nil :archivedp nil :commentedp nil :post-affiliated 32299 :title #81# :mode nil :granularity element :cached t :parent #49# :org-element--cache-sync-key nil)) 1] #131=(headline (:raw-value #82="init-base header" :begin 17577 :end 17725 :pre-blank 1 :contents-begin 17598 :contents-end 17724 :robust-begin 17600 :robust-end 17722 :level 2 :priority nil :tags nil :todo-keyword nil :todo-type nil :post-blank 1 :footnote-section-p nil :archivedp nil :commentedp nil :post-affiliated 17577 :title #82# :mode nil :granularity element :org-element--cache-sync-key nil :cached t :parent #30#)) 1] nil nil 0] org-element--cache-compare)) ((elisp org-element--cache) . #s(avl-tree- [[[[[[[[[[nil nil #3# 0] [nil nil (keyword (:key "TITLE" :value "Emacs config file" :begin 1 :end 33 :post-blank 0 :post-affiliated 1 :mode top-comment :granularity element :cached t :parent #83=(section (:begin 1 :end 110 :contents-begin 1 :contents-end 109 :robust-begin 1 :robust-end 107 :post-blank 1 :post-affiliated 1 :mode first-section :granularity element :cached t :parent #3# :org-element--cache-sync-key nil)) :org-element--cache-sync-key nil)) 0] #83# 0] [nil nil (keyword (:key "DATE" :value "2023-11-01 18:10:23" :begin 55 :end 89 :post-blank 1 :post-affiliated 55 :mode nil :granularity element :cached t :parent #83# :org-element--cache-sync-key nil)) 0] (keyword (:key "AUTHOR" :value "DDOSvoid" :begin 33 :end 55 :post-blank 0 :post-affiliated 33 :mode nil :granularity element :cached t :parent #83# :org-element--cache-sync-key nil)) -1] [[nil nil #84# 0] [[nil nil (property-drawer (:begin 126 :end 182 :contents-begin 139 :contents-end 175 :post-blank 1 :post-affiliated 126 :mode planning :granularity element :cached t :parent #85=(section (:begin 126 :end 1090 :contents-begin 126 :contents-end 1089 :robust-begin 126 :robust-end 1087 :post-blank 1 :post-affiliated 126 :mode section :granularity element :cached t :parent #84# :org-element--cache-sync-key nil)) :org-element--cache-sync-key nil)) 0] [nil nil (src-block (:language "emacs-lisp" :switches nil :parameters nil :begin 211 :end 1090 :number-lines nil :preserve-indent nil :retain-labels t :use-labels t :label-fmt nil :value ";;; early-init.el --- Emacs pre-initialization config -*- lexical-binding: t -*-\12;;; Commentary:\12\12;;; Code:\12\12;; 设置垃圾回收参数\12(setq gc-cons-threshold (* 16 1024 1024))\12(setq gc-cons-percentage 0.6)\12\12;; 启动早期不加载`package.el'包管理器\12(setq package-enable-at-startup nil)\12;; 不从包缓存中加载\12(setq package-quickstart nil)\12\12;; 禁止展示菜单栏、工具栏和纵向滚动条\12(push '(menu-bar-lines . 0) default-frame-alist)\12(push '(tool-bar-lines . 0) default-frame-alist)\12(push '(vertical-scroll-bars) default-frame-alist)\12\12;; 禁止自动缩放窗口先\12(setq frame-inhibit-implied-resize t)\12\12;; 禁止菜单栏、工具栏、滚动条模式，禁止启动屏幕和文件对话框\12(menu-bar-mode -1)\12(tool-bar-mode -1)\12(scroll-bar-mode -1)\12(setq inhibit-splash-screen t)\12(setq use-file-dialog nil)\12\12;; 在这个阶段不编译\12(setq comp-deferred-compilation nil)\12\12(provide 'early-init)\12;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;\12;;; early-init.el ends here\12" :post-blank 1 :post-affiliated 211 :mode nil :granularity element :cached t :parent #85# :org-element--cache-sync-key nil)) 0] (paragraph (:begin 182 :end 211 :contents-begin 182 :contents-end 210 :post-blank 1 :post-affiliated 182 :mode nil :granularity element :cached t :parent #85# :org-element--cache-sync-key nil)) 0] #85# 1] (keyword (:key "STARTUP" :value "overview" :begin 89 :end 110 :post-blank 1 :post-affiliated 89 :mode nil :granularity element :cached t :parent #83# :org-element--cache-sync-key nil)) 0] [[[[nil nil #87=(section (:begin 1100 :end 1150 :contents-begin 1100 :contents-end 1149 :robust-begin 1100 :robust-end 1147 :post-blank 1 :post-affiliated 1100 :mode section :granularity element :cached t :parent #5# :org-element--cache-sync-key nil)) 0] [nil nil #86# 0] (property-drawer (:begin 1100 :end 1150 :contents-begin 1113 :contents-end 1143 :post-blank 1 :post-affiliated 1100 :mode planning :granularity element :cached t :parent #87# :org-element--cache-sync-key nil)) 0] [[nil nil (src-block (:language "emacs-lisp" :switches nil :parameters nil :begin 1169 :end 1304 :number-lines nil :preserve-indent nil :retain-labels t :use-labels t :label-fmt nil :value ";;; init.el --- The main init entry for Emacs -*- lexical-binding: t -*-\12;;; Commentary:\12\12;;; Code:\12\12" :post-blank 1 :post-affiliated 1169 :mode planning :granularity element :cached t :parent #89=(section (:begin 1169 :end 1304 :contents-begin 1169 :contents-end 1303 :robust-begin 1169 :robust-end 1301 :post-blank 1 :post-affiliated 1169 :mode section :granularity element :cached t :parent #86# :org-element--cache-sync-key nil)) :org-element--cache-sync-key nil)) 0] nil #88# -1] #89# 0] [[[nil nil (src-block (:language "emacs-lisp" :switches nil :parameters nil :begin 1316 :end 1648 :number-lines nil :preserve-indent nil :retain-labels t :use-labels t :label-fmt nil :value "  (require 'package)\12  (setq package-archives\12        '((\"melpa\" . \"http://mirrors.tuna.tsinghua.edu.cn/elpa/melpa/\")\12          (\"melpa-stable\" . \"http://mirrors.tuna.tsinghua.edu.cn/elpa/stable-melpa/\")\12          (\"gnu\" . \"http://mirrors.tuna.tsinghua.edu.cn/elpa/gnu/\")))\12  (package-initialize)\12" :post-blank 1 :post-affiliated 1316 :mode planning :granularity element :cached t :parent #92=(section (:begin 1316 :end 1648 :contents-begin 1316 :contents-end 1647 :robust-begin 1316 :robust-end 1645 :post-blank 1 :post-affiliated 1316 :mode section :granularity element :cached t :parent #88# :org-element--cache-sync-key nil)) :org-element--cache-sync-key nil)) 0] nil #90# -1] [[nil nil (paragraph (:begin 1663 :end 1721 :contents-begin 1663 :contents-end 1720 :post-blank 1 :post-affiliated 1663 :mode planning :granularity element :cached t :parent #91=(section (:begin 1663 :end 2422 :contents-begin 1663 :contents-end 2421 :robust-begin 1663 :robust-end 2419 :post-blank 1 :post-affiliated 1663 :mode section :granularity element :cached t :parent #90# :org-element--cache-sync-key nil)) :org-element--cache-sync-key nil)) 0] nil (src-block (:language "emacs-lisp" :switches nil :parameters nil :begin 1721 :end 2422 :number-lines nil :preserve-indent nil :retain-labels t :use-labels t :label-fmt nil :value "  ;; 安装 `use-package'\12  ;; become built-in in Emacs 29.1\12  (unless (package-installed-p 'use-package)\12    (package-refresh-contents)\12    (package-install 'use-package))\12\12  ;; 配置 `use-package'\12  (eval-and-compile\12    (setq use-package-always-ensure nil)\12    (setq use-package-always-defer nil)\12    (setq use-package-expand-minimally nil)\12    (setq use-package-enable-imenu-support t)\12    (if (daemonp)\12        (setq use-package-always-demand t)))\12\12  (eval-when-compile\12    (require 'use-package))\12\12  ;; 安装 `use-package' 的集成模块\12  (use-package use-package-ensure-system-package\12    :ensure t)\12  (use-package diminish\12    :ensure t)\12  (use-package bind-key\12    :ensure t)\12" :post-blank 1 :post-affiliated 1721 :mode nil :granularity element :cached t :parent #91# :org-element--cache-sync-key nil)) -1] #91# 0] #92# 0] #5# 0] [[[[[nil nil #94=(section (:begin 2433 :end 2818 :contents-begin 2433 :contents-end 2817 :robust-begin 2433 :robust-end 2815 :post-blank 1 :post-affiliated 2433 :mode section :granularity element :cached t :parent #93# :org-element--cache-sync-key nil)) 0] nil (paragraph (:begin 2433 :end 2479 :contents-begin 2433 :contents-end 2478 :post-blank 1 :post-affiliated 2433 :mode planning :granularity element :cached t :parent #94# :org-element--cache-sync-key nil)) -1] [[nil nil #95# 0] [nil nil (src-block (:language "emacs-lisp" :switches nil :parameters nil :begin 2837 :end 3240 :number-lines nil :preserve-indent nil :retain-labels t :use-labels t :label-fmt nil :value "  ;; 将lisp目录放到加载路径的前面以加快启动速度\12  (let ((dir (locate-user-emacs-file \"lisp\")))\12    (add-to-list 'load-path (file-name-as-directory dir)))\12\12  ;; 加载各模块化配置\12  ;; 不要在`*message*'缓冲区显示加载模块化配置的信息\12  (with-temp-message \"\"\12    (require 'init-ui) \12    (require 'init-base)\12    (require 'init-edit) \12    (require 'init-org)\12    (require 'init-completion)\12    (require 'init-dev)\12    )\12" :post-blank 1 :post-affiliated 2837 :mode planning :granularity element :cached t :parent #96=(section (:begin 2837 :end 3240 :contents-begin 2837 :contents-end 3239 :robust-begin 2837 :robust-end 3237 :post-blank 1 :post-affiliated 2837 :mode section :granularity element :cached t :parent #95# :org-element--cache-sync-key nil)) :org-element--cache-sync-key nil)) 0] #96# 0] (src-block (:language "emacs-lisp" :switches nil :parameters nil :begin 2479 :end 2818 :number-lines nil :preserve-indent nil :retain-labels t :use-labels t :label-fmt nil :value "(use-package quelpa\12  :ensure t\12  :commands quelpa\12  :config\12  :custom\12  (quelpa-git-clone-depth 1)\12  (quelpa-update-melpa-p nil)\12  (quelpa-self-upgrade-p nil)\12  (quelpa-checkout-melpa-p nil))\12\12;; `quelpa' 与 `use-package' 集成\12(use-package quelpa-use-package\12  :ensure t)\12(use-package quelpa\12  :ensure t)\12\12" :post-blank 1 :post-affiliated 2479 :mode nil :granularity element :cached t :parent #94# :org-element--cache-sync-key nil)) 0] [[nil nil #98=(section (:begin 3257 :end 3803 :contents-begin 3257 :contents-end 3802 :robust-begin 3257 :robust-end 3800 :post-blank 1 :post-affiliated 3257 :mode section :granularity element :org-element--cache-sync-key nil :cached t :parent #97#)) 0] nil (paragraph (:begin 3257 :end 3268 :contents-begin 3257 :contents-end 3268 :post-blank 0 :post-affiliated 3257 :mode planning :granularity element :org-element--cache-sync-key nil :cached t :parent #98#)) -1] #97# -1] [[[nil nil #101=(item (:bullet "+ " :begin 3268 :end 3361 :contents-begin 3270 :contents-end 3361 :checkbox nil :counter nil :structure #99=((3268 0 "+ " nil nil nil 3361)) :pre-blank 0 :post-blank 0 :post-affiliated 3268 :tag nil :mode item :granularity element :org-element--cache-sync-key nil :cached t :parent #104=(plain-list (:type unordered :begin 3268 :end 3362 :contents-begin 3268 :contents-end 3361 :structure #99# :post-blank 1 :post-affiliated 3268 :mode nil :granularity element :org-element--cache-sync-key nil :cached t :parent #98#)))) 0] [[nil nil (src-block (:language "emacs-lisp" :switches nil :parameters nil :begin 3362 :end 3803 :number-lines nil :preserve-indent nil :retain-labels t :use-labels t :label-fmt nil :value "  ;; F2 to open init file\12  (defun open-init-file()\12    (interactive)\12    (find-file \"~/.emacs.d/emacs-config.org\"))\12  (global-set-key (kbd \"<f2>\") 'open-init-file)\12\12  ;; sudo find-file\12  (defun sudo-edit-current-file ()\12    (interactive)\12    (when (buffer-file-name)\12      (let ((old-point (point)))\12        (find-file (concat \"/sudo:root@localhost:\" (buffer-file-name)))\12        (goto-char old-point))))\12\12" :post-blank 1 :post-affiliated 3362 :mode nil :granularity element :cached t :parent #98# :org-element--cache-sync-key nil)) 0] nil #100# -1] (paragraph (:begin 3270 :end 3361 :contents-begin 3270 :contents-end 3361 :post-blank 0 :post-affiliated 3270 :mode nil :granularity element :org-element--cache-sync-key nil :cached t :parent #101#)) 1] [[nil nil (src-block (:language "emacs-lisp" :switches nil :parameters nil :begin 3822 :end 3967 :number-lines nil :preserve-indent nil :retain-labels t :use-labels t :label-fmt nil :value "\12(provide 'init)\12;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;\12;;; init.el ends here\12" :post-blank 1 :post-affiliated 3822 :mode planning :granularity element :org-element--cache-sync-key nil :cached t :parent #103=(section (:begin 3822 :end 3967 :contents-begin 3822 :contents-end 3966 :robust-begin 3822 :robust-end 3964 :post-blank 1 :post-affiliated 3822 :mode section :granularity element :org-element--cache-sync-key nil :cached t :parent #100#)))) 0] [nil [nil nil (property-drawer (:begin 3980 :end 4050 :contents-begin 3993 :contents-end 4043 :post-blank 1 :post-affiliated 3980 :mode planning :granularity element :cached t :parent #102=(section (:begin 3980 :end 4050 :contents-begin 3980 :contents-end 4049 :robust-begin 3980 :robust-end 4047 :post-blank 1 :post-affiliated 3980 :mode section :granularity element :org-element--cache-sync-key nil :cached t :parent #14#)) :org-element--cache-sync-key nil)) 0] #102# 1] #14# 1] #103# 0] #104# 0] #93# 0] [[[[[nil nil #107=(section (:begin 4072 :end 4192 :contents-begin 4072 :contents-end 4191 :robust-begin 4072 :robust-end 4189 :post-blank 1 :post-affiliated 4072 :mode section :granularity element :cached t :parent #105# :org-element--cache-sync-key nil)) 0] [nil nil #106# 0] (src-block (:language "emacs-lisp" :switches nil :parameters nil :begin 4072 :end 4192 :number-lines nil :preserve-indent nil :retain-labels t :use-labels t :label-fmt nil :value ";;; init-ui.el --- UI settings -*- lexical-binding: t -*-\12;;; Commentary:\12\12;;; Code:\12\12" :post-blank 1 :post-affiliated 4072 :mode planning :granularity element :cached t :parent #107# :org-element--cache-sync-key nil)) 0] [[nil nil (paragraph (:begin 4209 :end 4265 :contents-begin 4209 :contents-end 4264 :post-blank 1 :post-affiliated 4209 :mode planning :granularity element :cached t :parent #109=(section (:begin 4209 :end 5917 :contents-begin 4209 :contents-end 5916 :robust-begin 4209 :robust-end 5914 :post-blank 1 :post-affiliated 4209 :mode section :granularity element :cached t :parent #106# :org-element--cache-sync-key nil)) :org-element--cache-sync-key nil)) 0] [nil nil #108# 0] (src-block (:language "emacs-lisp" :switches nil :parameters nil :begin 4265 :end 5917 :number-lines nil :preserve-indent nil :retain-labels t :use-labels t :label-fmt nil :value "  (use-package ef-themes\12    :ensure t\12    :bind (\"C-c t\" . ef-themes-toggle)\12    :init\12    ;; set two specific themes and switch between them\12    (setq ef-themes-to-toggle '(ef-cyprus ef-night))\12\12    ;; set org headings and function syntax\12    ;; (setq ef-themes-headings\12    ;;       '((0 . (bold 1))\12    ;;         (1 . (bold 1))\12    ;;         (2 . (rainbow bold 1))\12    ;;         (3 . (rainbow bold 1))\12    ;;         (4 . (rainbow bold 1))\12    ;;         (t . (rainbow bold 1))))\12    ;; (setq ef-themes-region '(intense no-extend neutral))\12\12    ;; Disable all other themes to avoid awkward blending:\12    (mapc #'disable-theme custom-enabled-themes)\12\12    ;; Load the theme of choice:\12    ;; The themes we provide are recorded in the `ef-themes-dark-themes',\12    ;; `ef-themes-light-themes'.\12\12    ;; 如果你不喜欢随机主题，也可以直接固定选择一个主题，如下：\12    (ef-themes-select 'ef-cyprus)\12\12    ;; 随机挑选一款主题，如果是命令行打开Emacs，则随机挑选一款黑色主题\12    ;;(if (display-graphic-p)\12    ;;    (ef-themes-load-random)\12    ;;  (ef-themes-load-random 'dark))\12\12    :config\12    ;; auto change theme, aligning with system themes.\12    (defun my/apply-theme (appearance)\12      \"Load theme, taking current system APPEARANCE into consideration.\"\12      (mapc #'disable-theme custom-enabled-themes)\12      (pcase appearance\12        ('light (if (display-graphic-p) (ef-themes-load-random 'light) (ef-themes-load-random 'dark)))\12        ('dark (ef-themes-load-random 'dark))))\12\12    ;;(if (eq system-type 'darwin)\12        ;; only for emacs-plus\12    ;;    (add-hook 'ns-system-appearance-change-functions #'my/apply-theme)\12    ;;  (ef-themes-select 'ef-summer)\12    ;;  )\12    )\12" :post-blank 1 :post-affiliated 4265 :mode nil :granularity element :cached t :parent #109# :org-element--cache-sync-key nil)) 0] #109# 0] [[nil nil (paragraph (:begin 5933 :end 5987 :contents-begin 5933 :contents-end 5986 :post-blank 1 :post-affiliated 5933 :mode planning :granularity element :cached t :parent #111=(section (:begin 5933 :end 6661 :contents-begin 5933 :contents-end 6660 :robust-begin 5933 :robust-end 6658 :post-blank 1 :post-affiliated 5933 :mode section :granularity element :cached t :parent #108# :org-element--cache-sync-key nil)) :org-element--cache-sync-key nil)) 0] [nil nil #110# 0] (src-block (:language "emacs-lisp" :switches nil :parameters ":tangle no" :begin 5987 :end 6661 :number-lines nil :preserve-indent nil :retain-labels t :use-labels t :label-fmt nil :value "  (use-package doom-themes\12    :ensure t\12    :config\12    ;; Global settings (defaults)\12    (setq doom-themes-enable-bold t    ; if nil, bold is universally disabled\12          doom-themes-enable-italic t) ; if nil, italics is universally disabled\12\12    ;; Load theme\12    (load-theme 'doom-1337 t)          ; doom-city-lights, doom-gruvbox and doom-1337\12\12    ;; Enable flashing mode-line on errors\12    (doom-themes-visual-bell-config)\12    ;; Enable custom neotree theme (all-the-icons must be installed!)\12    (doom-themes-neotree-config)\12    ;; Corrects (and improves) org-mode's native fontification.\12    (doom-themes-org-config))\12" :post-blank 1 :post-affiliated 5987 :mode nil :granularity element :cached t :parent #111# :org-element--cache-sync-key nil)) 0] #111# -1] [[[[nil nil (paragraph (:begin 6683 :end 6767 :contents-begin 6683 :contents-end 6766 :post-blank 1 :post-affiliated 6683 :mode planning :granularity element :cached t :parent #113=(section (:begin 6683 :end 6909 :contents-begin 6683 :contents-end 6908 :robust-begin 6683 :robust-end 6906 :post-blank 1 :post-affiliated 6683 :mode section :granularity element :cached t :parent #110# :org-element--cache-sync-key nil)) :org-element--cache-sync-key nil)) 0] [nil nil #112# 0] (src-block (:language "emacs-lisp" :switches nil :parameters nil :begin 6767 :end 6909 :number-lines nil :preserve-indent nil :retain-labels t :use-labels t :label-fmt nil :value "  (use-package eshell-git-prompt\12    :ensure t\12    :config\12    (eshell-git-prompt-use-theme 'robbyrussell))\12" :post-blank 1 :post-affiliated 6767 :mode nil :granularity element :cached t :parent #113# :org-element--cache-sync-key nil)) 0] [[nil nil (paragraph (:begin 6927 :end 6992 :contents-begin 6927 :contents-end 6991 :post-blank 1 :post-affiliated 6927 :mode planning :granularity element :cached t :parent #114=(section (:begin 6927 :end 7160 :contents-begin 6927 :contents-end 7159 :robust-begin 6927 :robust-end 7157 :post-blank 1 :post-affiliated 6927 :mode section :granularity element :cached t :parent #112# :org-element--cache-sync-key nil)) :org-element--cache-sync-key nil)) 0] [nil nil (src-block (:language "emacs-lisp" :switches nil :parameters nil :begin 7060 :end 7160 :number-lines nil :preserve-indent nil :retain-labels t :use-labels t :label-fmt nil :value "(use-package all-the-icons\12  :ensure t\12  :if (display-graphic-p))\12" :post-blank 1 :post-affiliated 7060 :mode nil :granularity element :cached t :parent #114# :org-element--cache-sync-key nil)) 0] (paragraph (:begin 6992 :end 7060 :contents-begin 6992 :contents-end 7059 :post-blank 1 :post-affiliated 6992 :mode nil :granularity element :cached t :parent #114# :org-element--cache-sync-key nil)) 0] #114# 0] [[[[nil nil #116=(section (:begin 7175 :end 7603 :contents-begin 7175 :contents-end 7602 :robust-begin 7175 :robust-end 7600 :post-blank 1 :post-affiliated 7175 :mode section :granularity element :cached t :parent #115# :org-element--cache-sync-key nil)) 0] [nil nil (paragraph (:begin 7244 :end 7314 :contents-begin 7244 :contents-end 7313 :post-blank 1 :post-affiliated 7244 :mode nil :granularity element :cached t :parent #116# :org-element--cache-sync-key nil)) 0] (paragraph (:begin 7175 :end 7244 :contents-begin 7175 :contents-end 7243 :post-blank 1 :post-affiliated 7175 :mode planning :granularity element :cached t :parent #116# :org-element--cache-sync-key nil)) 0] [[nil nil #117# 0] [nil nil (paragraph (:begin 7616 :end 7670 :contents-begin 7616 :contents-end 7669 :post-blank 1 :post-affiliated 7616 :mode planning :granularity element :cached t :parent #118=(section (:begin 7616 :end 11433 :contents-begin 7616 :contents-end 11432 :robust-begin 7616 :robust-end 11430 :post-blank 1 :post-affiliated 7616 :mode section :granularity element :cached t :parent #117# :org-element--cache-sync-key nil)) :org-element--cache-sync-key nil)) 0] #118# 0] (src-block (:language "emacs-lisp" :switches nil :parameters nil :begin 7314 :end 7603 :number-lines nil :preserve-indent nil :retain-labels t :use-labels t :label-fmt nil :value "(use-package nerd-icons\12  ;; :custom\12  ;; The Nerd Font you want to use in GUI\12  ;; \"Symbols Nerd Font Mono\" is the default and is recommended\12  ;; but you can use any other Nerd Font if you want\12  ;; (nerd-icons-font-family \"Symbols Nerd Font Mono\")\12  )\12" :post-blank 1 :post-affiliated 7314 :mode nil :granularity element :cached t :parent #116# :org-element--cache-sync-key nil)) 0] [[nil nil (src-block (:language "emacs-lisp" :switches nil :parameters nil :begin 7849 :end 11433 :number-lines nil :preserve-indent nil :retain-labels t :use-labels t :label-fmt nil :value "(use-package fontaine\12  :ensure t\12  :when (display-graphic-p)\12  ;; :hook (kill-emacs . fontaine-store-latest-preset)\12  :config\12  (setq fontaine-latest-state-file\12        (locate-user-emacs-file \"etc/fontaine-latest-state.eld\"))\12  (setq fontaine-presets\12        '((regular\12           :default-height 140\12           :default-weight regular\12           :fixed-pitch-height 1.0\12           :variable-pitch-height 1.0\12           )\12          (large\12           :default-height 180\12           :default-weight normal\12           :fixed-pitch-height 1.0\12           :variable-pitch-height 1.05\12           )\12          (t\12           :default-family \"Source Code Pro\"\12           :fixed-pitch-family \"Source Code Pro\"\12           :variable-pitch-family \"Source Code Pro\"\12           :italic-family \"Source Code Pro\"\12           :variable-pitch-weight normal\12           :bold-weight normal\12           :italic-slant italic\12           :line-spacing 0.1)\12          ))\12  ;; (fontaine-set-preset (or (fontaine-restore-latest-preset) 'regular))\12  (fontaine-set-preset 'regular)\12\12  ;; set emoji font\12  (set-fontset-font\12   t\12   (if (version< emacs-version \"28.1\")\12       '(#x1f300 . #x1fad0)\12     'emoji)\12   (cond\12    ((member \"Noto Emoji\" (font-family-list)) \"Noto Emoji\")\12    ((member \"Symbola\" (font-family-list)) \"Symbola\")\12    ((member \"Apple Color Emoji\" (font-family-list)) \"Apple Color Emoji\")\12    ((member \"Noto Color Emoji\" (font-family-list)) \"Noto Color Emoji\")\12    ((member \"Segoe UI Emoji\" (font-family-list)) \"Segoe UI Emoji\")\12    ))\12\12  ;; set Chinese font\12  (dolist (charset '(kana han symbol cjk-misc bopomofo))\12    (set-fontset-font\12     (frame-parameter nil 'font)\12     charset\12     (font-spec :family\12                (cond\12                 ((eq system-type 'darwin)\12                  (cond\12                   ((member \"Sarasa Mono SC Nerd\" (font-family-list)) \"Sarasa Mono SC Nerd\")\12                   ((member \"PingFang SC\" (font-family-list)) \"PingFang SC\")\12                   ((member \"WenQuanYi Zen Hei\" (font-family-list)) \"WenQuanYi Zen Hei\")\12                   ((member \"Microsoft YaHei\" (font-family-list)) \"Microsoft YaHei\")\12                   ))\12                 ((eq system-type 'gnu/linux)\12                  (cond\12                   ((member \"Sarasa Mono SC Nerd\" (font-family-list)) \"Sarasa Mono SC Nerd\")\12                   ((member \"WenQuanYi Micro Hei\" (font-family-list)) \"WenQuanYi Micro Hei\")\12                   ((member \"WenQuanYi Zen Hei\" (font-family-list)) \"WenQuanYi Zen Hei\")\12                   ((member \"Microsoft YaHei\" (font-family-list)) \"Microsoft YaHei\")\12                   ))\12                 (t\12                  (cond\12                   ((member \"Sarasa Mono SC Nerd\" (font-family-list)) \"Sarasa Mono SC Nerd\")\12                   ((member \"Microsoft YaHei\" (font-family-list)) \"Microsoft YaHei\")\12                   )))\12                )))\12\12  ;; set Chinese font scale\12  (setq face-font-rescale-alist `(\12                                  (\"Symbola\"             . 1.3)\12                                  (\"Microsoft YaHei\"     . 1.2)\12                                  (\"WenQuanYi Zen Hei\"   . 1.2)\12                                  (\"Sarasa Mono SC Nerd\" . 1.2)\12                                  (\"PingFang SC\"         . 1.16)\12                                  (\"Lantinghei SC\"       . 1.16)\12                                  (\"Kaiti SC\"            . 1.16)\12                                  (\"Yuanti SC\"           . 1.16)\12                                  (\"Apple Color Emoji\"   . 0.91)\12                                  ))\12  )\12" :post-blank 1 :post-affiliated 7849 :mode nil :granularity element :cached t :parent #118# :org-element--cache-sync-key nil)) 0] [nil [nil nil (src-block (:language "emacs-lisp" :switches nil :parameters nil :begin 11450 :end 15737 :number-lines nil :preserve-indent nil :retain-labels t :use-labels t :label-fmt nil :value "  ;; 禁用一些GUI特性\12  (setq use-dialog-box nil)               ; 鼠标操作不使用对话框\12  (setq inhibit-default-init t)           ; 不加载 `default' 库\12  (setq inhibit-startup-screen t)         ; 不加载启动画面\12  (setq inhibit-startup-message t)        ; 不加载启动消息\12  (setq inhibit-startup-buffer-menu t)    ; 不显示缓冲区列表\12\12  ;; 全屏启动\12  (add-to-list 'default-frame-alist '(fullscreen . maximized))\12\12  ;; 草稿缓冲区默认文字设置\12  (setq initial-scratch-message (concat \";; Happy coding, DDOSvoid - Emacs ♥ you!\\n\\n\"))\12\12  ;; 设置缓冲区的文字方向为从左到右\12  (setq bidi-paragraph-direction 'left-to-right)\12  ;; 禁止使用双向括号算法\12  ;; (setq bidi-inhibit-bpa t)\12\12  ;; 设置自动折行宽度为80个字符，默认值为70\12  (setq-default fill-column 80)\12\12  ;; 设置大文件阈值为100MB，默认10MB\12  (setq large-file-warning-threshold 100000000)\12\12  ;; 以16进制显示字节数\12  (setq display-raw-bytes-as-hex t)\12  ;; 有输入时禁止 `fontification' 相关的函数钩子，能让滚动更顺滑\12  (setq redisplay-skip-fontification-on-input t)\12\12  ;; 禁止响铃\12  (setq ring-bell-function 'ignore)\12\12  ;; 禁止闪烁光标\12  (blink-cursor-mode -1)\12\12  ;; 在光标处而非鼠标所在位置粘贴\12  (setq mouse-yank-at-point t)\12\12  ;; 拷贝粘贴设置\12  (setq select-enable-primary nil)        ; 选择文字时不拷贝\12  (setq select-enable-clipboard t)        ; 拷贝时使用剪贴板\12\12  ;; 鼠标滚动设置\12\12  ;; (setq scroll-step 2)\12  ;; (setq scroll-margin 2)\12  ;; (setq hscroll-step 2)\12  ;; (setq hscroll-margin 2)\12  ;; (setq scroll-conservatively 101)\12  ;; (setq scroll-up-aggressively 0.01)\12  ;; (setq scroll-down-aggressively 0.01)\12  ;; (setq scroll-preserve-screen-position 'always)\12\12  ;; 对于高的行禁止自动垂直滚动\12  (setq auto-window-vscroll nil)\12\12  ;; 设置新分屏打开的位置的阈值\12  (setq split-width-threshold (assoc-default 'width default-frame-alist))\12  (setq split-height-threshold nil)\12\12  ;; TAB键设置，在Emacs里不使用TAB键，所有的TAB默认为4个空格\12  (setq-default indent-tabs-mode nil)\12  (setq-default tab-width 4)\12\12  ;; yes或no提示设置，通过下面这个函数设置当缓冲区名字匹配到预设的字符串时自动回答yes\12  (setq original-y-or-n-p 'y-or-n-p)\12  (defalias 'original-y-or-n-p (symbol-function 'y-or-n-p))\12  (defun default-yes-sometimes (prompt)\12    \"automatically say y when buffer name match following string\"\12    (if (or\12         (string-match \"has a running process\" prompt)\12         (string-match \"does not exist; create\" prompt)\12         (string-match \"modified; kill anyway\" prompt)\12         (string-match \"Delete buffer using\" prompt)\12         (string-match \"Kill buffer of\" prompt)\12         (string-match \"still connected.  Kill it?\" prompt)\12         (string-match \"Shutdown the client's kernel\" prompt)\12         (string-match \"kill them and exit anyway\" prompt)\12         (string-match \"Revert buffer from file\" prompt)\12         (string-match \"Kill Dired buffer of\" prompt)\12         (string-match \"delete buffer using\" prompt)\12         (string-match \"Kill all pass entry\" prompt)\12         (string-match \"for all cursors\" prompt)\12         (string-match \"Do you want edit the entry\" prompt))\12        t\12      (original-y-or-n-p prompt)))\12  (defalias 'yes-or-no-p 'default-yes-sometimes)\12  (defalias 'y-or-n-p 'default-yes-sometimes)\12\12  ;; 设置剪贴板历史长度300，默认为60\12  (setq kill-ring-max 200)\12\12  ;; 在剪贴板里不存储重复内容\12  (setq kill-do-not-save-duplicates t)\12\12  ;; 设置位置记录长度为6，默认为16\12  ;; 可以使用 `counsel-mark-ring' or `consult-mark' (C-x j) 来访问光标位置记录\12  ;; 使用 C-x C-SPC 执行 `pop-global-mark' 直接跳转到上一个全局位置处\12  ;; 使用 C-u C-SPC 跳转到本地位置处\12  (setq mark-ring-max 6)\12  (setq global-mark-ring-max 6)\12\12  ;; 设置 emacs-lisp 的限制\12  (setq max-lisp-eval-depth 10000)        ; 默认值为 800\12  (setq max-specpdl-size 10000)           ; 默认值为 1600\12\12  ;; 启用 `list-timers', `list-threads' 这两个命令\12  (put 'list-timers 'disabled nil)\12  (put 'list-threads 'disabled nil)\12\12  ;; 在命令行里支持鼠标\12  (xterm-mouse-mode 1)\12\12  ;; 退出Emacs时进行确认\12  (setq confirm-kill-emacs 'y-or-n-p)\12\12  ;; 在模式栏上显示当前光标的列号\12  (column-number-mode t)\12\12  ;; 配置所有的编码为UTF-8，参考：\12  ;; https://thraxys.wordpress.com/2016/01/13/utf-8-in-emacs-everywhere-forever/\12  (setq locale-coding-system 'utf-8)\12  (set-terminal-coding-system 'utf-8)\12  (set-keyboard-coding-system 'utf-8)\12  (set-selection-coding-system 'utf-8)\12  (set-default-coding-systems 'utf-8)\12  (set-language-environment 'utf-8)\12  (set-clipboard-coding-system 'utf-8)\12  (set-file-name-coding-system 'utf-8)\12  (set-buffer-file-coding-system 'utf-8)\12  (prefer-coding-system 'utf-8)\12  (modify-coding-system-alist 'process \"*\" 'utf-8)\12  (when (display-graphic-p)\12    (setq x-select-request-type '(UTF8_STRING COMPOUND_TEXT TEXT STRING)))\12" :post-blank 1 :post-affiliated 11450 :mode planning :granularity element :cached t :parent #120=(section (:begin 11450 :end 15737 :contents-begin 11450 :contents-end 15736 :robust-begin 11450 :robust-end 15734 :post-blank 1 :post-affiliated 11450 :mode section :granularity element :cached t :parent #119# :org-element--cache-sync-key nil)) :org-element--cache-sync-key nil)) 0] #120# 1] #119# 1] (paragraph (:begin 7670 :end 7849 :contents-begin 7670 :contents-end 7848 :post-blank 1 :post-affiliated 7670 :mode nil :granularity element :cached t :parent #118# :org-element--cache-sync-key nil)) 0] #115# 1] #113# 1] #105# 0] [[[[nil [nil nil #122=(section (:begin 15776 :end 15956 :contents-begin 15776 :contents-end 15955 :robust-begin 15776 :robust-end 15953 :post-blank 1 :post-affiliated 15776 :mode section :granularity element :cached t :parent #121# :org-element--cache-sync-key nil)) 0] #121# 1] [[nil nil (src-block (:language "emacs-lisp" :switches nil :parameters nil :begin 15840 :end 15956 :number-lines nil :preserve-indent nil :retain-labels t :use-labels t :label-fmt nil :value "(use-package doom-modeline\12  :ensure t\12  :hook (after-init . doom-modeline-mode))\12" :post-blank 1 :post-affiliated 15840 :mode nil :granularity element :cached t :parent #122# :org-element--cache-sync-key nil)) 0] [[nil nil #124=(section (:begin 15982 :end 16078 :contents-begin 15982 :contents-end 16077 :robust-begin 15982 :robust-end 16075 :post-blank 1 :post-affiliated 15982 :mode section :granularity element :cached t :parent #123# :org-element--cache-sync-key nil)) 0] [nil nil (src-block (:language "emacs-lisp" :switches nil :parameters ":tangle no" :begin 16031 :end 16078 :number-lines nil :preserve-indent nil :retain-labels t :use-labels t :label-fmt nil :value "\12" :post-blank 1 :post-affiliated 16031 :mode nil :granularity element :cached t :parent #124# :org-element--cache-sync-key nil)) 0] (paragraph (:begin 15982 :end 16031 :contents-begin 15982 :contents-end 16030 :post-blank 1 :post-affiliated 15982 :mode planning :granularity element :cached t :parent #124# :org-element--cache-sync-key nil)) 0] #123# 1] (paragraph (:begin 15776 :end 15840 :contents-begin 15776 :contents-end 15839 :post-blank 1 :post-affiliated 15776 :mode planning :granularity element :cached t :parent #122# :org-element--cache-sync-key nil)) 1] [[[nil nil #126=(section (:begin 16091 :end 17318 :contents-begin 16091 :contents-end 17317 :robust-begin 16091 :robust-end 17315 :post-blank 1 :post-affiliated 16091 :mode section :granularity element :org-element--cache-sync-key nil :cached t :parent #125#)) 0] [nil nil #130=(section (:begin 16140 :end 17318 :contents-begin 16140 :contents-end 17317 :robust-begin 16140 :robust-end 17315 :post-blank 1 :post-affiliated 16140 :mode section :granularity element :cached t :parent #126# :org-element--cache-sync-key nil)) 0] (paragraph (:begin 16091 :end 16140 :contents-begin 16091 :contents-end 16139 :post-blank 1 :post-affiliated 16091 :mode planning :granularity element :org-element--cache-sync-key nil :cached t :parent #126#)) 0] [[[nil nil #127# 0] [nil nil (src-block (:language "emacs-lisp" :switches nil :parameters nil :begin 17340 :end 17490 :number-lines nil :preserve-indent nil :retain-labels t :use-labels t :label-fmt nil :value "\12(provide 'init-ui)\12;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;\12;;; init-ui.el ends here\12" :post-blank 1 :post-affiliated 17340 :mode planning :granularity element :cached t :parent #128=(section (:begin 17340 :end 17490 :contents-begin 17340 :contents-end 17489 :robust-begin 17340 :robust-end 17487 :post-blank 1 :post-affiliated 17340 :mode section :granularity element :cached t :parent #127# :org-element--cache-sync-key nil)) :org-element--cache-sync-key nil)) 0] #128# 0] [nil [nil nil (property-drawer (:begin 17505 :end 17577 :contents-begin 17518 :contents-end 17570 :post-blank 1 :post-affiliated 17505 :mode planning :granularity element :cached t :parent #129=(section (:begin 17505 :end 17577 :contents-begin 17505 :contents-end 17576 :robust-begin 17505 :robust-end 17574 :post-blank 1 :post-affiliated 17505 :mode section :granularity element :org-element--cache-sync-key nil :cached t :parent #30#)) :org-element--cache-sync-key nil)) 0] #129# 1] #30# 0] (src-block (:language "emacs-lisp" :switches nil :parameters nil :begin 16140 :end 17318 :number-lines nil :preserve-indent nil :retain-labels t :use-labels t :label-fmt nil :value "(use-package keycast\12  :ensure t\12  :hook (after-init . keycast-mode)\12  :config\12  ;; set for doom-modeline support\12  ;; With the latest change 72d9add, mode-line-keycast needs to be modified to keycast-mode-line.\12  (define-minor-mode keycast-mode\12    \"Show current command and its key binding in the mode line (fix for use with doom-mode-line).\"\12    :global t\12    (if keycast-mode\12        (progn\12          (add-hook 'pre-command-hook 'keycast--update t)\12          (add-to-list 'global-mode-string '(\"\" keycast-mode-line \"  \")))\12      (remove-hook 'pre-command-hook 'keycast--update)\12      (setq global-mode-string (delete '(\"\" keycast-mode-line \"  \") global-mode-string))\12      ))\12\12  (dolist (input '(self-insert-command\12                   org-self-insert-command))\12    (add-to-list 'keycast-substitute-alist `(,input \".\" \"Typing...\")))\12\12  (dolist (event '(mouse-event-p\12                   mouse-movement-p\12                   mwheel-scroll))\12    (add-to-list 'keycast-substitute-alist `(,event nil)))\12\12  (setq keycast-log-format \"%-20K%C\\n\")\12  (setq keycast-log-frame-alist\12        '((minibuffer . nil)))\12  (setq keycast-log-newest-first t)\12  )\12" :post-blank 1 :post-affiliated 16140 :mode planning :granularity element :cached t :parent #130# :org-element--cache-sync-key nil)) 1] #125# 0] [[[[[nil [nil nil (src-block (:language "emacs-lisp" :switches nil :parameters nil :begin 17598 :end 17725 :number-lines nil :preserve-indent nil :retain-labels t :use-labels t :label-fmt nil :value ";;; init-base.el --- Basical settings -*- lexical-binding: t -*-\12;;; Commentary:\12\12;;; Code:\12\12" :post-blank 1 :post-affiliated 17598 :mode planning :granularity element :cached t :parent #132=(section (:begin 17598 :end 17725 :contents-begin 17598 :contents-end 17724 :robust-begin 17598 :robust-end 17722 :post-blank 1 :post-affiliated 17598 :mode section :granularity element :cached t :parent #131# :org-element--cache-sync-key nil)) :org-element--cache-sync-key nil)) 0] #132# 1] [[nil nil #134=(section (:begin 17742 :end 17882 :contents-begin 17742 :contents-end 17881 :robust-begin 17742 :robust-end 17879 :post-blank 1 :post-affiliated 17742 :mode section :granularity element :cached t :parent #133# :org-element--cache-sync-key nil)) 0] [nil nil (src-block (:language "emacs-lisp" :switches nil :parameters nil :begin 17809 :end 17882 :number-lines nil :preserve-indent nil :retain-labels t :use-labels t :label-fmt nil :value "(use-package no-littering\12  :ensure t)\12" :post-blank 1 :post-affiliated 17809 :mode nil :granularity element :org-element--cache-sync-key nil :cached t :parent #134#)) 0] (paragraph (:begin 17742 :end 17809 :contents-begin 17742 :contents-end 17808 :post-blank 1 :post-affiliated 17742 :mode planning :granularity element :org-element--cache-sync-key nil :cached t :parent #134#)) 0] #133# 0] [[nil nil #138=(section (:begin 17895 :end 18508 :contents-begin 17895 :contents-end 18507 :robust-begin 17895 :robust-end 18505 :post-blank 1 :post-affiliated 17895 :mode section :granularity element :cached t :parent #135# :org-element--cache-sync-key nil)) 0] [[nil nil #136# 0] [nil nil (src-block (:language "emacs-lisp" :switches nil :parameters nil :begin 18522 :end 18633 :number-lines nil :preserve-indent nil :retain-labels t :use-labels t :label-fmt nil :value "(use-package saveplace\12  :ensure nil\12  :hook (after-init . save-place-mode))\12" :post-blank 1 :post-affiliated 18522 :mode planning :granularity element :cached t :parent #137=(section (:begin 18522 :end 18633 :contents-begin 18522 :contents-end 18632 :robust-begin 18522 :robust-end 18630 :post-blank 1 :post-affiliated 18522 :mode section :granularity element :cached t :parent #136# :org-element--cache-sync-key nil)) :org-element--cache-sync-key nil)) 0] #137# 0] (src-block (:language "emacs-lisp" :switches nil :parameters nil :begin 17895 :end 18508 :number-lines nil :preserve-indent nil :retain-labels t :use-labels t :label-fmt nil :value "(use-package savehist\12  :ensure nil\12  :hook (after-init . savehist-mode)\12  :config\12  ;; Allow commands in minibuffers, will affect `dired-do-dired-do-find-regexp-and-replace' command:\12  (setq enable-recursive-minibuffers t)\12  (setq history-length 1000)\12  (setq savehist-additional-variables '(mark-ring\12                                        global-mark-ring\12                                        search-ring\12                                        regexp-search-ring\12                                        extended-command-history))\12  (setq savehist-autosave-interval 300))\12" :post-blank 1 :post-affiliated 17895 :mode planning :granularity element :cached t :parent #138# :org-element--cache-sync-key nil)) 1] #135# 0] [[[nil nil #140=(section (:begin 18645 :end 20071 :contents-begin 18645 :contents-end 20070 :robust-begin 18645 :robust-end 20068 :post-blank 1 :post-affiliated 18645 :mode section :granularity element :cached t :parent #139# :org-element--cache-sync-key nil)) 0] nil (src-block (:language "emacs-lisp" :switches nil :parameters nil :begin 18645 :end 20071 :number-lines nil :preserve-indent nil :retain-labels t :use-labels t :label-fmt nil :value "(use-package recentf\12  :ensure nil\12  :defines no-littering-etc-directory no-littering-var-directory\12  :hook (after-init . recentf-mode)\12  :custom\12  (recentf-max-saved-items 300)\12  (recentf-auto-cleanup 'never)\12  ;; `recentf-add-file' will apply handlers first, then call `string-prefix-p'\12  ;; to check if it can be pushed to recentf list.\12  (recentf-filename-handlers '(abbreviate-file-name))\12  (recentf-exclude `(,@(cl-loop for f in `(,package-user-dir\12                                           ,no-littering-var-directory\12                                           ,no-littering-etc-directory)\12                                collect (abbreviate-file-name f))\12                     ;; Folders on MacOS start\12                     \"^/private/tmp/\"\12                     \"^/var/folders/\"\12                     ;; Folders on MacOS end\12                     \".cache\"\12                     \".cask\"\12                     \".elfeed\"\12                     \"elfeed\"\12                     \"bookmarks\"\12                     \"cache\"\12                     \"ido.*\"\12                     \"persp-confs\"\12                     \"recentf\"\12                     \"undo-tree-hist\"\12                     \"url\"\12                     \"^/tmp/\"\12                     \"/ssh\\\\(x\\\\)?:\"\12                     \"/su\\\\(do\\\\)?:\"\12                     \"^/usr/include/\"\12                     \"/TAGS\\\\'\"\12                     \"COMMIT_EDITMSG\\\\'\")))\12" :post-blank 1 :post-affiliated 18645 :mode planning :granularity element :cached t :parent #140# :org-element--cache-sync-key nil)) -1] [[nil nil #142=(section (:begin 20098 :end 20387 :contents-begin 20098 :contents-end 20386 :robust-begin 20098 :robust-end 20384 :post-blank 1 :post-affiliated 20098 :mode section :granularity element :cached t :parent #141# :org-element--cache-sync-key nil)) 0] nil (paragraph (:begin 20098 :end 20154 :contents-begin 20098 :contents-end 20153 :post-blank 1 :post-affiliated 20098 :mode planning :granularity element :cached t :parent #142# :org-element--cache-sync-key nil)) -1] #141# 0] #139# -1] [[[[nil nil #143# 0] [[nil nil (paragraph (:begin 20396 :end 20439 :contents-begin 20396 :contents-end 20438 :post-blank 1 :post-affiliated 20396 :mode planning :granularity element :cached t :parent #145=(section (:begin 20396 :end 20883 :contents-begin 20396 :contents-end 20882 :robust-begin 20396 :robust-end 20880 :post-blank 1 :post-affiliated 20396 :mode section :granularity element :cached t :parent #143# :org-element--cache-sync-key nil)) :org-element--cache-sync-key nil)) 0] [nil nil #144# 0] (src-block (:language "emacs-lisp" :switches nil :parameters nil :begin 20439 :end 20883 :number-lines nil :preserve-indent nil :retain-labels t :use-labels t :label-fmt nil :value "  (use-package crux\12    :ensure t\12    :bind ((\"C-a\" . crux-move-beginning-of-line)\12           (\"C-k\" . crux-smart-kill-line)\12           (\"C-c r\" . crux-rename-file-and-buffer)\12           (\"C-x DEL\" . crux-kill-line-backwards))\12    :config\12    (crux-with-region-or-buffer indent-region)\12    (crux-with-region-or-point-to-eol kill-ring-save)\12    (defalias 'rename-file-and-buffer #'crux-rename-file-and-buffer))\12" :post-blank 1 :post-affiliated 20439 :mode nil :granularity element :cached t :parent #145# :org-element--cache-sync-key nil)) 0] #145# 1] [[nil nil (paragraph (:begin 20891 :end 20905 :contents-begin 20891 :contents-end 20905 :post-blank 0 :post-affiliated 20891 :mode planning :granularity element :org-element--cache-sync-key nil :cached t :parent #146=(section (:begin 20891 :end 21527 :contents-begin 20891 :contents-end 21526 :robust-begin 20891 :robust-end 21524 :post-blank 1 :post-affiliated 20891 :mode section :granularity element :org-element--cache-sync-key nil :cached t :parent #144#)))) 0] nil (plain-list (:type unordered :begin 20905 :end 21086 :contents-begin 20905 :contents-end 21083 :structure ((20905 0 "+ " nil nil nil 20935) (20935 0 "+ " nil nil nil 20979) (20979 0 "+ " nil nil nil 21024) (21024 0 "+ " nil nil nil 21083)) :post-blank 1 :post-affiliated 20905 :mode nil :granularity element :org-element--cache-sync-key nil :cached t :parent #146#)) -1] #146# -1] [[[[nil nil #148=(plain-list (:type unordered :begin 21097 :end 21376 :contents-begin 21097 :contents-end 21375 :structure #147=((21097 0 "+ " nil nil nil 21188) (21188 0 "+ " nil nil nil 21298) (21298 0 "+ " nil nil nil 21375)) :post-blank 1 :post-affiliated 21097 :mode nil :granularity element :org-element--cache-sync-key nil :cached t :parent #146#)) 0] nil #150=(item (:bullet "+ " :begin 21097 :end 21188 :contents-begin 21099 :contents-end 21188 :checkbox nil :counter nil :structure #147# :pre-blank 0 :post-blank 0 :post-affiliated 21097 :tag nil :mode item :granularity element :org-element--cache-sync-key nil :cached t :parent #148#)) -1] [[nil nil #149=(item (:bullet "+ " :begin 21188 :end 21298 :contents-begin 21190 :contents-end 21298 :checkbox nil :counter nil :structure #147# :pre-blank 0 :post-blank 0 :post-affiliated 21188 :tag nil :mode item :granularity element :org-element--cache-sync-key nil :cached t :parent #148#)) 0] nil (paragraph (:begin 21190 :end 21298 :contents-begin 21190 :contents-end 21298 :post-blank 0 :post-affiliated 21190 :mode nil :granularity element :org-element--cache-sync-key nil :cached t :parent #149#)) -1] (paragraph (:begin 21099 :end 21188 :contents-begin 21099 :contents-end 21188 :post-blank 0 :post-affiliated 21099 :mode nil :granularity element :org-element--cache-sync-key nil :cached t :parent #150#)) 0] [[[nil nil (paragraph (:begin 21300 :end 21375 :contents-begin 21300 :contents-end 21375 :post-blank 0 :post-affiliated 21300 :mode nil :granularity element :org-element--cache-sync-key nil :cached t :parent #153=(item (:bullet "+ " :begin 21298 :end 21375 :contents-begin 21300 :contents-end 21375 :checkbox nil :counter nil :structure #147# :pre-blank 0 :post-blank 0 :post-affiliated 21298 :tag nil :mode item :granularity element :org-element--cache-sync-key nil :cached t :parent #148#)))) 0] [nil nil #151# 0] (src-block (:language "emacs-lisp" :switches nil :parameters nil :begin 21376 :end 21527 :number-lines nil :preserve-indent nil :retain-labels t :use-labels t :label-fmt nil :value "  (use-package rime\12    :ensure t\12    :custom\12    (default-input-method \"rime\")\12    (rime-show-candidate 'posframe))\12" :post-blank 1 :post-affiliated 21376 :mode nil :granularity element :org-element--cache-sync-key nil :cached t :parent #146#)) 0] [nil nil (src-block (:language "emacs-lisp" :switches nil :parameters nil :begin 21548 :end 21702 :number-lines nil :preserve-indent nil :retain-labels t :use-labels t :label-fmt nil :value "\12(provide 'init-base)\12;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;\12;;; init-base.el ends here\12" :post-blank 1 :post-affiliated 21548 :mode planning :granularity element :org-element--cache-sync-key nil :cached t :parent #152=(section (:begin 21548 :end 21702 :contents-begin 21548 :contents-end 21701 :robust-begin 21548 :robust-end 21699 :post-blank 1 :post-affiliated 21548 :mode section :granularity element :org-element--cache-sync-key nil :cached t :parent #151#)))) 0] #152# -1] #153# 0] (paragraph (:begin 21086 :end 21097 :contents-begin 21086 :contents-end 21097 :post-blank 0 :post-affiliated 21086 :mode nil :granularity element :org-element--cache-sync-key nil :cached t :parent #146#)) 0] (src-block (:language "emacs-lisp" :switches nil :parameters ":tangle no" :begin 20154 :end 20387 :number-lines nil :preserve-indent nil :retain-labels t :use-labels t :label-fmt nil :value "  (use-package undo-tree\12    :ensure t\12    :hook (after-init . global-undo-tree-mode)\12    :config\12    ;; don't save undo history to local files\12    (setq undo-tree-auto-save-history nil))\12" :post-blank 1 :post-affiliated 20154 :mode nil :granularity element :cached t :parent #142# :org-element--cache-sync-key nil)) 0] #131# 1] #24# 0] [[[[[[[nil [nil nil (property-drawer (:begin 21717 :end 21789 :contents-begin 21730 :contents-end 21782 :post-blank 1 :post-affiliated 21717 :mode planning :granularity element :cached t :parent #154=(section (:begin 21717 :end 21789 :contents-begin 21717 :contents-end 21788 :robust-begin 21717 :robust-end 21786 :post-blank 1 :post-affiliated 21717 :mode section :granularity element :cached t :parent #40# :org-element--cache-sync-key nil)) :org-element--cache-sync-key nil)) 0] #154# 1] [nil nil #158=(section (:begin 21813 :end 21940 :contents-begin 21813 :contents-end 21939 :robust-begin 21813 :robust-end 21937 :post-blank 1 :post-affiliated 21813 :mode section :granularity element :cached t :parent #155# :org-element--cache-sync-key nil)) 0] #155# -1] [[nil nil #156# 0] [nil nil (src-block (:language "emacs-lisp" :switches nil :parameters nil :begin 21958 :end 22078 :number-lines nil :preserve-indent nil :retain-labels t :use-labels t :label-fmt nil :value ";; 不自动备份\12(setq make-backup-files nil)\12;; 不使用Emacs自带的自动保存\12(setq auto-save-default nil)\12" :post-blank 1 :post-affiliated 21958 :mode planning :granularity element :cached t :parent #157=(section (:begin 21958 :end 22078 :contents-begin 21958 :contents-end 22077 :robust-begin 21958 :robust-end 22075 :post-blank 1 :post-affiliated 21958 :mode section :granularity element :cached t :parent #156# :org-element--cache-sync-key nil)) :org-element--cache-sync-key nil)) 0] #157# 0] (src-block (:language "emacs-lisp" :switches nil :parameters nil :begin 21813 :end 21940 :number-lines nil :preserve-indent nil :retain-labels t :use-labels t :label-fmt nil :value ";;; init-edit.el --- Editing settings -*- lexical-binding: t -*-\12;;; Commentary:\12\12;;; Code:\12\12" :post-blank 1 :post-affiliated 21813 :mode planning :granularity element :cached t :parent #158# :org-element--cache-sync-key nil)) -1] [[[[nil nil #161=(section (:begin 22110 :end 22178 :contents-begin 22110 :contents-end 22177 :robust-begin 22110 :robust-end 22175 :post-blank 1 :post-affiliated 22110 :mode section :granularity element :cached t :parent #159# :org-element--cache-sync-key nil)) 0] [nil nil #160# 0] (src-block (:language "emacs-lisp" :switches nil :parameters nil :begin 22110 :end 22178 :number-lines nil :preserve-indent nil :retain-labels t :use-labels t :label-fmt nil :value "  (pixel-scroll-precision-mode t)\12" :post-blank 1 :post-affiliated 22110 :mode planning :granularity element :cached t :parent #161# :org-element--cache-sync-key nil)) 0] [nil [nil nil (src-block (:language "emacs-lisp" :switches nil :parameters nil :begin 22252 :end 22406 :number-lines nil :preserve-indent nil :retain-labels t :use-labels t :label-fmt nil :value ";; Directly modify when selecting text\12(use-package delsel\12  :ensure nil\12  :hook (after-init . delete-selection-mode))\12" :post-blank 1 :post-affiliated 22252 :mode nil :granularity element :cached t :parent #162=(section (:begin 22189 :end 22406 :contents-begin 22189 :contents-end 22405 :robust-begin 22189 :robust-end 22403 :post-blank 1 :post-affiliated 22189 :mode section :granularity element :cached t :parent #160# :org-element--cache-sync-key nil)) :org-element--cache-sync-key nil)) 0] (paragraph (:begin 22189 :end 22252 :contents-begin 22189 :contents-end 22251 :post-blank 1 :post-affiliated 22189 :mode planning :granularity element :cached t :parent #162# :org-element--cache-sync-key nil)) 1] #162# 0] [[[nil nil #164=(section (:begin 22421 :end 22858 :contents-begin 22421 :contents-end 22857 :robust-begin 22421 :robust-end 22855 :post-blank 1 :post-affiliated 22421 :mode section :granularity element :cached t :parent #163# :org-element--cache-sync-key nil)) 0] [nil nil (src-block (:language "emacs-lisp" :switches nil :parameters nil :begin 22503 :end 22858 :number-lines nil :preserve-indent nil :retain-labels t :use-labels t :label-fmt nil :value "(use-package autorevert\12  :ensure nil\12  :hook (after-init . global-auto-revert-mode)\12  :bind (\"s-u\" . revert-buffer)\12  :custom\12  (auto-revert-interval 10)\12  (auto-revert-avoid-polling t)\12  (auto-revert-verbose nil)\12  (auto-revert-remote-files t)\12  (auto-revert-check-vc-info t)\12  (global-auto-revert-non-file-buffers t))\12" :post-blank 1 :post-affiliated 22503 :mode nil :granularity element :cached t :parent #164# :org-element--cache-sync-key nil)) 0] (paragraph (:begin 22421 :end 22503 :contents-begin 22421 :contents-end 22502 :post-blank 1 :post-affiliated 22421 :mode planning :granularity element :cached t :parent #164# :org-element--cache-sync-key nil)) 0] [[nil nil #165# 0] [nil nil (src-block (:language "emacs-lisp" :switches nil :parameters nil :begin 22902 :end 23055 :number-lines nil :preserve-indent nil :retain-labels t :use-labels t :label-fmt nil :value "(provide 'init-edit)\12;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;\12;;; init-edit.el ends here\12" :post-blank 1 :post-affiliated 22902 :mode planning :granularity element :org-element--cache-sync-key nil :cached t :parent #166=(section (:begin 22902 :end 23055 :contents-begin 22902 :contents-end 23054 :robust-begin 22902 :robust-end 23052 :post-blank 1 :post-affiliated 22902 :mode section :granularity element :org-element--cache-sync-key nil :cached t :parent #165#)))) 0] #166# 0] #167# 0] #163# 0] #159# 0] [[[[nil nil #169=(section (:begin 23069 :end 23139 :contents-begin 23069 :contents-end 23139 :robust-begin 23069 :robust-end 23137 :post-blank 0 :post-affiliated 23069 :mode section :granularity element :org-element--cache-sync-key nil :cached t :parent #49#)) 0] [nil nil #168# 0] (property-drawer (:begin 23069 :end 23139 :contents-begin 23082 :contents-end 23133 :post-blank 0 :post-affiliated 23069 :mode planning :granularity element :org-element--cache-sync-key nil :cached t :parent #169#)) 0] [nil [nil nil #170# 0] (src-block (:language "emacs-lisp" :switches nil :parameters nil :begin 23162 :end 23289 :number-lines nil :preserve-indent nil :retain-labels t :use-labels t :label-fmt nil :value ";;; init-org.el --- Org mode settings -*- lexical-binding: t -*-\12;;; Commentary:\12\12;;; Code:\12\12" :post-blank 1 :post-affiliated 23162 :mode planning :granularity element :cached t :parent #171=(section (:begin 23162 :end 23289 :contents-begin 23162 :contents-end 23288 :robust-begin 23162 :robust-end 23286 :post-blank 1 :post-affiliated 23162 :mode section :granularity element :cached t :parent #168# :org-element--cache-sync-key nil)) :org-element--cache-sync-key nil)) 1] #171# 0] [[nil nil (src-block (:language "emacs-lisp" :switches nil :parameters nil :begin 23309 :end 32299 :number-lines nil :preserve-indent nil :retain-labels t :use-labels t :label-fmt nil :value "  (use-package org\12    :ensure nil\12    :mode (\"\\\\.org\\\\'\" . org-mode)\12    :hook ((org-mode . visual-line-mode))\12    :commands (org-find-exact-headline-in-buffer org-set-tags)\12    :custom-face\12    ;; 设置Org mode标题以及每级标题行的大小\12    (org-document-title ((t (:height 1.75 :weight bold))))\12    (org-level-1 ((t (:height 1.2 :weight bold))))\12    (org-level-2 ((t (:height 1.15 :weight bold))))\12    (org-level-3 ((t (:height 1.1 :weight bold))))\12    (org-level-4 ((t (:height 1.05 :weight bold))))\12    (org-level-5 ((t (:height 1.0 :weight bold))))\12    (org-level-6 ((t (:height 1.0 :weight bold))))\12    (org-level-7 ((t (:height 1.0 :weight bold))))\12    (org-level-8 ((t (:height 1.0 :weight bold))))\12    (org-level-9 ((t (:height 1.0 :weight bold))))\12    ;; 设置代码块用上下边线包裹\12    ;; (org-block-begin-line ((t (:underline t :background unspecified))))\12    ;; (org-block-end-line ((t (:overline t :underline nil :background unspecified))))\12    :config\12    ;; 提升latex预览的图片清晰度\12    (plist-put org-format-latex-options :scale 1.8)\12\12    ;; 设置标题行之间总是有空格；列表之间根据情况自动加空格\12    (setq org-blank-before-new-entry '((heading . t)\12                                       (plain-list-item . auto)\12                                       ))\12    ;; \12    (setq org-startup-indented t) \12\12    ;; ======================================\12    ;; 设置打开Org links的程序\12    ;; ======================================\12    (defun my-func/open-and-play-gif-image (file &optional link)\12      \"Open and play GIF image `FILE' in Emacs buffer.\12\12  Optional for Org-mode file: `LINK'.\"\12      (let ((gif-image (create-image file))\12            (tmp-buf (get-buffer-create \"*Org-mode GIF image animation*\")))\12        (switch-to-buffer tmp-buf)\12        (erase-buffer)\12        (insert-image gif-image)\12        (image-animate gif-image nil t)\12        (local-set-key (kbd \"q\") 'bury-buffer)\12        ))\12    (setq org-file-apps '((\"\\\\.png\\\\'\"     . default)\12                          (auto-mode       . emacs)\12                          (directory       . emacs)\12                          (\"\\\\.mm\\\\'\"      . default)\12                          (\"\\\\.x?html?\\\\'\" . default)\12                          (\"\\\\.pdf\\\\'\"     . emacs)\12                          (\"\\\\.md\\\\'\"      . emacs)\12                          (\"\\\\.gif\\\\'\"     . my-func/open-and-play-gif-image)\12                          (\"\\\\.xlsx\\\\'\"    . default)\12                          (\"\\\\.svg\\\\'\"     . default)\12                          (\"\\\\.pptx\\\\'\"    . default)\12                          (\"\\\\.docx\\\\'\"    . default)))\12\12    :custom\12    ;; 设置Org mode的目录\12    (org-directory \"~/org\")\12    ;; 设置笔记的默认存储位置\12    (org-default-notes-file (expand-file-name \"capture.org\" org-directory))\12    ;; 启用一些子模块\12    (org-modules '(ol-bibtex ol-gnus ol-info ol-eww org-habit org-protocol))\12    ;; 在按M-RET时，是否根据光标所在的位置分行，这里设置为是\12    ;; (org-M-RET-may-split-line '((default . nil)))\12    ;; 一些Org mode自带的美化设置\12    ;; 标题行美化\12    (org-fontify-whole-heading-line t)\12    ;; 设置标题行折叠符号\12    (org-ellipsis \" ▾\")\12    ;; 在活动区域内的所有标题栏执行某些命令\12    (org-loop-over-headlines-in-active-region t)\12    ;; TODO标签美化\12    (org-fontify-todo-headline t)\12    ;; DONE标签美化\12    (org-fontify-done-headline t)\12    ;; 引用块美化\12    (org-fontify-quote-and-verse-blocks t)\12    ;; 隐藏宏标记\12    (org-hide-macro-markers t)\12    ;; 隐藏强调标签\12    (org-hide-emphasis-markers t)\12    ;; 高亮latex语法\12    (org-highlight-latex-and-related '(native script entities))\12    ;; 以UTF-8显示\12    (org-pretty-entities t)\12    ;; 是否隐藏标题栏的前置星号，这里我们通过org-modern来隐藏\12    ;; (org-hide-leading-stars t)\12    ;; 当启用缩进模式时自动隐藏前置星号\12    (org-indent-mode-turns-on-hiding-stars t)\12    ;; 自动启用缩进\12    (org-startup-indented nil)\12    ;; 根据标题栏自动缩进文本\12    (org-adapt-indentation nil)\12    ;; 自动显示图片\12    (org-startup-with-inline-images t)\12    ;; 默认以Overview的模式展示标题行\12    (org-startup-folded 'overview)\12    ;; 允许字母列表\12    (org-list-allow-alphabetical t)\12    ;; 列表的下一级设置\12    (org-list-demote-modify-bullet '(\12                                     (\"-\"  . \"+\")\12                                     (\"+\"  . \"1.\")\12                                     (\"1.\" . \"a.\")\12                                     ))\12    ;; 编辑时检查是否在折叠的不可见区域\12    (org-fold-catch-invisible-edits 'smart)\12    ;; 在当前位置插入新标题行还是在当前标题行后插入，这里设置为当前位置\12    (org-insert-heading-respect-content nil)\12    ;; 设置图片的最大宽度，如果有imagemagick支持将会改变图片实际宽度\12    ;; 四种设置方法：(1080), 1080, t, nil\12    (org-image-actual-width nil)\12    ;; imenu的最大深度，默认为2\12    (org-imenu-depth 4)\12    ;; 回车要不要触发链接，这里设置不触发\12    (org-return-follows-link nil)\12    ;; 上标^下标_是否需要特殊字符包裹，这里设置需要用大括号包裹\12    (org-use-sub-superscripts '{})\12    ;; 复制粘贴标题行的时候删除id\12    (org-clone-delete-id t)\12    ;; 粘贴时调整标题行的级别\12    (org-yank-adjusted-subtrees t)\12\12    ;; TOOD的关键词设置，可以设置不同的组\12    (org-todo-keywords '((sequence \"TODO(t)\" \"HOLD(h!)\" \"WIP(i!)\" \"WAIT(w!)\" \"|\" \"DONE(d!)\" \"CANCELLED(c@/!)\")\12                         (sequence \"REPORT(r)\" \"BUG(b)\" \"KNOWNCAUSE(k)\" \"|\" \"FIXED(f!)\")))\12    ;; TODO关键词的样式设置\12    (org-todo-keyword-faces '((\"TODO\"       :foreground \"#7c7c75\" :weight bold)\12                              (\"HOLD\"       :foreground \"#feb24c\" :weight bold)\12                              (\"WIP\"        :foreground \"#0098dd\" :weight bold)\12                              (\"WAIT\"       :foreground \"#9f7efe\" :weight bold)\12                              (\"DONE\"       :foreground \"#50a14f\" :weight bold)\12                              (\"CANCELLED\"  :foreground \"#ff6480\" :weight bold)\12                              (\"REPORT\"     :foreground \"magenta\" :weight bold)\12                              (\"BUG\"        :foreground \"red\"     :weight bold)\12                              (\"KNOWNCAUSE\" :foreground \"yellow\"  :weight bold)\12                              (\"FIXED\"      :foreground \"green\"   :weight bold)))\12    ;; 当标题行状态变化时标签同步发生的变化\12    ;; Moving a task to CANCELLED adds a CANCELLED tag\12    ;; Moving a task to WAIT adds a WAIT tag\12    ;; Moving a task to HOLD adds WAIT and HOLD tags\12    ;; Moving a task to a done state removes WAIT and HOLD tags\12    ;; Moving a task to TODO removes WAIT, CANCELLED, and HOLD tags\12    ;; Moving a task to DONE removes WAIT, CANCELLED, and HOLD tags\12    (org-todo-state-tags-triggers\12     (quote ((\"CANCELLED\" (\"CANCELLED\" . t))\12             (\"WAIT\" (\"WAIT\" . t))\12             (\"HOLD\" (\"WAIT\") (\"HOLD\" . t))\12             (done (\"WAIT\") (\"HOLD\"))\12             (\"TODO\" (\"WAIT\") (\"CANCELLED\") (\"HOLD\"))\12             (\"DONE\" (\"WAIT\") (\"CANCELLED\") (\"HOLD\")))))\12    ;; 使用专家模式选择标题栏状态\12    (org-use-fast-todo-selection 'expert)\12    ;; 父子标题栏状态有依赖\12    (org-enforce-todo-dependencies t)\12    ;; 标题栏和任务复选框有依赖\12    (org-enforce-todo-checkbox-dependencies t)\12    ;; 优先级样式设置\12    (org-priority-faces '((?A :foreground \"red\")\12                          (?B :foreground \"orange\")\12                          (?C :foreground \"yellow\")))\12    ;; 标题行全局属性设置\12    (org-global-properties '((\"EFFORT_ALL\" . \"0:15 0:30 0:45 1:00 2:00 3:00 4:00 5:00 6:00 7:00 8:00\")\12                             (\"APPT_WARNTIME_ALL\" . \"0 5 10 15 20 25 30 45 60\")\12                             (\"RISK_ALL\" . \"Low Medium High\")\12                             (\"STYLE_ALL\" . \"habit\")))\12    ;; Org columns的默认格式\12    (org-columns-default-format \"%25ITEM %TODO %SCHEDULED %DEADLINE %3PRIORITY %TAGS %CLOCKSUM %EFFORT{:}\")\12    ;; 当状态从DONE改成其他状态时，移除 CLOSED: [timestamp]\12    (org-closed-keep-when-no-todo t)\12    ;; DONE时加上时间戳\12    (org-log-done 'time)\12    ;; 重复执行时加上时间戳\12    (org-log-repeat 'time)\12    ;; Deadline修改时加上一条记录\12    (org-log-redeadline 'note)\12    ;; Schedule修改时加上一条记录\12    (org-log-reschedule 'note)\12    ;; 以抽屉的方式记录\12    (org-log-into-drawer t)\12    ;; 紧接着标题行或者计划/截止时间戳后加上记录抽屉\12    (org-log-state-notes-insert-after-drawers nil)\12\12    ;; refile使用缓存\12    (org-refile-use-cache t)\12    ;; refile的目的地，这里设置的是agenda文件的所有标题\12    (org-refile-targets '((org-agenda-files . (:maxlevel . 9))))\12    ;; 将文件名加入到路径\12    (org-refile-use-outline-path 'file)\12    ;; 是否按步骤refile\12    (org-outline-path-complete-in-steps nil)\12    ;; 允许创建新的标题行，但需要确认\12    (org-refile-allow-creating-parent-nodes 'confirm)\12\12    ;; 设置标签的默认位置，默认是第77列右对齐\12    ;; (org-tags-column -77)\12    ;; 自动对齐标签\12    (org-auto-align-tags t)\12    ;; 标签不继承\12    (org-use-tag-inheritance nil)\12    ;; 在日程视图的标签不继承\12    (org-agenda-use-tag-inheritance nil)\12    ;; 标签快速选择\12    (org-use-fast-tag-selection t)\12    ;; 标签选择不需要回车确认\12    (org-fast-tag-selection-single-key t)\12    ;; 定义了有序属性的标题行也加上 OREDERD 标签\12    (org-track-ordered-property-with-tag t)\12    ;; 始终存在的的标签\12    (org-tag-persistent-alist '((\"read\"     . ?r)\12                                (\"mail\"     . ?m)\12                                (\"emacs\"    . ?e)\12                                (\"study\"    . ?s)\12                                (\"work\"     . ?w)))\12    ;; 预定义好的标签\12    (org-tag-alist '((:startgroup)\12                     (\"crypt\"    . ?c)\12                     (\"linux\"    . ?l)\12                     (\"apple\"    . ?a)\12                     (\"noexport\" . ?n)\12                     (\"ignore\"   . ?i)\12                     (\"TOC\"      . ?t)\12                     (:endgroup)))\12\12    ;; 归档设置\12    (org-archive-location \"%s_archive::datetree/\")\12    )\12" :post-blank 1 :post-affiliated 23309 :mode planning :granularity element :cached t :parent #174=(section (:begin 23309 :end 32299 :contents-begin 23309 :contents-end 32298 :robust-begin 23309 :robust-end 32296 :post-blank 1 :post-affiliated 23309 :mode section :granularity element :cached t :parent #170# :org-element--cache-sync-key nil)) :org-element--cache-sync-key nil)) 0] [[nil nil #173=(section (:begin 32314 :end 33468 :contents-begin 32314 :contents-end 33467 :robust-begin 32314 :robust-end 33465 :post-blank 1 :post-affiliated 32314 :mode section :granularity element :cached t :parent #172# :org-element--cache-sync-key nil)) 0] nil (paragraph (:begin 32314 :end 32367 :contents-begin 32314 :contents-end 32366 :post-blank 1 :post-affiliated 32314 :mode planning :granularity element :cached t :parent #173# :org-element--cache-sync-key nil)) -1] #172# 1] #174# 0] #49# -1] [[[[[nil nil #175# 0] [[nil nil (paragraph (:begin 33483 :end 33537 :contents-begin 33483 :contents-end 33536 :post-blank 1 :post-affiliated 33483 :mode planning :granularity element :cached t :parent #177=(section (:begin 33483 :end 33832 :contents-begin 33483 :contents-end 33831 :robust-begin 33483 :robust-end 33829 :post-blank 1 :post-affiliated 33483 :mode section :granularity element :cached t :parent #175# :org-element--cache-sync-key nil)) :org-element--cache-sync-key nil)) 0] [nil nil #176# 0] (src-block (:language "emacs-lisp" :switches nil :parameters nil :begin 33537 :end 33832 :number-lines nil :preserve-indent nil :retain-labels t :use-labels t :label-fmt nil :value "(use-package org-appear\12  :ensure t\12  :hook (org-mode . org-appear-mode)\12  :config\12  (setq org-appear-autolinks t)\12  (setq org-appear-autosubmarkers t)\12  (setq org-appear-autoentities t)\12  (setq org-appear-autokeywords t)\12  (setq org-appear-inside-latex t)\12  )\12" :post-blank 1 :post-affiliated 33537 :mode nil :granularity element :cached t :parent #177# :org-element--cache-sync-key nil)) 0] #177# 1] [[nil nil (paragraph (:begin 33848 :end 34011 :contents-begin 33848 :contents-end 34010 :post-blank 1 :post-affiliated 33848 :mode planning :granularity element :org-element--cache-sync-key nil :cached t :parent #179=(section (:begin 33848 :end 34629 :contents-begin 33848 :contents-end 34628 :robust-begin 33848 :robust-end 34626 :post-blank 1 :post-affiliated 33848 :mode section :granularity element :org-element--cache-sync-key nil :cached t :parent #176#)))) 0] [[nil nil #178# 0] nil #180=(section (:begin 34640 :end 36442 :contents-begin 34640 :contents-end 36441 :robust-begin 34640 :robust-end 36439 :post-blank 1 :post-affiliated 34640 :mode section :granularity element :org-element--cache-sync-key nil :cached t :parent #178#)) -1] (src-block (:language "emacs-lisp" :switches nil :parameters nil :begin 34011 :end 34629 :number-lines nil :preserve-indent nil :retain-labels t :use-labels t :label-fmt nil :value "(use-package org-capture\12  :ensure nil\12  :bind (\"\\e\\e c\" . (lambda () (interactive) (org-capture)))\12  :hook ((org-capture-mode . (lambda ()\12                               (setq-local org-complete-tags-always-offer-all-agenda-tags t)))\12         (org-capture-mode . delete-other-windows))\12  :custom\12  (org-capture-use-agenda-date nil)\12  ;; define common template\12  (org-capture-templates `((\"t\" \"Tasks\" entry (file+headline \"tasks.org\" \"Reminders\")\12                            \"* TODO %i%?\"\12                            :empty-lines-after 1\12                            :prepend t)))\12  )\12" :post-blank 1 :post-affiliated 34011 :mode nil :granularity element :cached t :parent #179# :org-element--cache-sync-key nil)) 1] #179# 0] [[[nil nil (src-block (:language "emacs-lisp" :switches nil :parameters nil :begin 34690 :end 36442 :number-lines nil :preserve-indent nil :retain-labels t :use-labels t :label-fmt nil :value "  (use-package denote\12    :ensure t\12    :hook (dired-mode . denote-dired-mode-in-directories)\12    :bind ((\"C-c d n\" . denote)\12           (\"C-c d d\" . denote-date)\12           (\"C-c d t\" . denote-type)\12           (\"C-c d s\" . denote-subdirectory)\12           (\"C-c d f\" . denote-open-or-create)\12           (\"C-c d r\" . denote-dired-rename-file))\12    :init\12    (with-eval-after-load 'org-capture\12      (setq denote-org-capture-specifiers \"%l\\n%i\\n%?\")\12      (add-to-list 'org-capture-templates\12                   '(\"N\" \"New note (with denote.el)\" plain\12                     (file denote-last-path)\12                     #'denote-org-capture\12                     :no-save t\12                     :immediate-finish nil\12                     :kill-buffer t\12                     :jump-to-captured t)))\12    :config\12    (setq denote-directory (expand-file-name \"~/org/\"))\12    (setq denote-known-keywords '(\"emacs\" \"cpp\" \"linux\" \"commom\" \"cheatsheet\"))\12    (setq denote-infer-keywords t)\12    (setq denote-sort-keywords t)\12    ;; org is default, set others such as text, markdown-yaml, markdown-toml\12    (setq denote-file-type nil)\12    (setq denote-prompts '(title keywords))\12\12    ;; We allow multi-word keywords by default.  The author's personal\12    ;; preference is for single-word keywords for a more rigid workflow.\12    (setq denote-allow-multi-word-keywords t)\12    (setq denote-date-format nil)\12\12    ;; If you use Markdown or plain text files (Org renders links as buttons\12    ;; right away)\12    (add-hook 'find-file-hook #'denote-link-buttonize-buffer)\12    (setq denote-dired-rename-expert nil)\12\12    ;; OR if only want it in `denote-dired-directories':\12    (add-hook 'dired-mode-hook #'denote-dired-mode-in-directories)\12    )\12" :post-blank 1 :post-affiliated 34690 :mode nil :granularity element :org-element--cache-sync-key nil :cached t :parent #180#)) 0] [[nil nil #182=(section (:begin 36460 :end 38204 :contents-begin 36460 :contents-end 38203 :robust-begin 36460 :robust-end 38201 :post-blank 1 :post-affiliated 36460 :mode section :granularity element :cached t :parent #181# :org-element--cache-sync-key nil)) 0] [nil nil (src-block (:language "emacs-lisp" :switches nil :parameters nil :begin 36526 :end 38204 :number-lines nil :preserve-indent nil :retain-labels t :use-labels t :label-fmt nil :value "  (use-package consult-notes\12    :ensure t\12    :commands (consult-notes\12               consult-notes-search-in-all-notes)\12    :bind ((\"C-c n f\" . consult-notes)\12           (\"C-c n c\" . consult-notes-search-in-all-notes))\12    :config\12    (setq consult-notes-file-dir-sources\12          `((\"org\"     ?o ,(concat org-directory \"/\"))))\12\12    ;; embark support\12    (with-eval-after-load 'embark\12      (defun consult-notes-open-dired (cand)\12        \"Open notes directory dired with point on file CAND.\"\12        (interactive \"fNote: \")\12        ;; dired-jump is in dired-x.el but is moved to dired in Emacs 28\12        (dired-jump nil cand))\12\12      (defun consult-notes-marked (cand)\12        \"Open a notes file CAND in Marked 2.\12  Marked 2 is a mac app that renders markdown.\"\12        (interactive \"fNote: \")\12        (call-process-shell-command (format \"open -a \\\"Marked 2\\\" \\\"%s\\\"\" (expand-file-name cand))))\12\12      (defun consult-notes-grep (cand)\12        \"Run grep in directory of notes file CAND.\"\12        (interactive \"fNote: \")\12        (consult-grep (file-name-directory cand)))\12\12      (embark-define-keymap consult-notes-map\12                            \"Keymap for Embark notes actions.\"\12                            :parent embark-file-map\12                            (\"d\" consult-notes-dired)\12                            (\"g\" consult-notes-grep)\12                            (\"m\" consult-notes-marked))\12\12      (add-to-list 'embark-keymap-alist `(,consult-notes-category . consult-notes-map))\12\12      ;; make embark-export use dired for notes\12      (setf (alist-get consult-notes-category embark-exporters-alist) #'embark-export-dired)\12      )\12    )\12" :post-blank 1 :post-affiliated 36526 :mode nil :granularity element :cached t :parent #182# :org-element--cache-sync-key nil)) 0] (paragraph (:begin 36460 :end 36526 :contents-begin 36460 :contents-end 36525 :post-blank 1 :post-affiliated 36460 :mode planning :granularity element :cached t :parent #182# :org-element--cache-sync-key nil)) 0] #181# 1] [[[nil nil #184=(section (:begin 38228 :end 38389 :contents-begin 38228 :contents-end 38388 :robust-begin 38228 :robust-end 38386 :post-blank 1 :post-affiliated 38228 :mode section :granularity element :org-element--cache-sync-key nil :cached t :parent #183#)) 0] nil (paragraph (:begin 38228 :end 38312 :contents-begin 38228 :contents-end 38311 :post-blank 1 :post-affiliated 38228 :mode planning :granularity element :org-element--cache-sync-key nil :cached t :parent #184#)) -1] [[nil nil #185# 0] [nil nil (src-block (:language "emacs-lisp" :switches nil :parameters nil :begin 38415 :end 38568 :number-lines nil :preserve-indent nil :retain-labels t :use-labels t :label-fmt nil :value "\12(provide 'init-org)\12;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;\12;;; init-org.el ends here\12" :post-blank 1 :post-affiliated 38415 :mode planning :granularity element :cached t :parent #186=(section (:begin 38415 :end 38568 :contents-begin 38415 :contents-end 38566 :robust-begin 38415 :robust-end 38564 :post-blank 1 :post-affiliated 38415 :mode section :granularity element :cached t :parent #185# :org-element--cache-sync-key nil)) :org-element--cache-sync-key nil)) 0] #186# 0] (src-block (:language "elisp" :switches nil :parameters ":tangle no" :begin 38312 :end 38389 :number-lines nil :preserve-indent nil :retain-labels t :use-labels t :label-fmt nil :value "  (use-package auctex\12    :ensure t)\12" :post-blank 1 :post-affiliated 38312 :mode nil :granularity element :org-element--cache-sync-key nil :cached t :parent #184#)) 0] #183# 0] (paragraph (:begin 34640 :end 34690 :contents-begin 34640 :contents-end 34689 :post-blank 1 :post-affiliated 34640 :mode planning :granularity element :org-element--cache-sync-key nil :cached t :parent #180#)) 0] [[[[[nil nil #187=(section (:begin 38582 :end 38653 :contents-begin 38582 :contents-end 38652 :robust-begin 38582 :robust-end 38650 :post-blank 1 :post-affiliated 38582 :mode section :granularity element :cached t :parent #58# :org-element--cache-sync-key nil)) 0] [nil nil (node-property (:key "HEADER-ARGS" :value ":tangle lisp/init-dev.el :mkdirp yes" :begin 38595 :end 38646 :post-blank 0 :post-affiliated 38595 :mode node-property :granularity element :org-element--cache-sync-key nil :cached t :parent #188=(property-drawer (:begin 38582 :end 38653 :contents-begin 38595 :contents-end 38646 :post-blank 1 :post-affiliated 38582 :mode planning :granularity element :cached t :parent #187# :org-element--cache-sync-key nil)))) 0] #188# 0] [nil nil #192=(section (:begin 38673 :end 38807 :contents-begin 38673 :contents-end 38807 :robust-begin 38673 :robust-end 38805 :post-blank 0 :post-affiliated 38673 :mode section :granularity element :cached t :parent #189# :org-element--cache-sync-key nil)) 0] #189# -1] [[nil nil #190# 0] [nil nil (src-block (:language "emacs-lisp" :switches nil :parameters nil :begin 38817 :end 39137 :number-lines nil :preserve-indent nil :retain-labels t :use-labels t :label-fmt nil :value "  (use-package magit\12    :ensure t\12    :hook (git-commit-mode . flyspell-mode)\12    :bind ((\"C-x g\"   . magit-status)\12           (\"C-x M-g\" . magit-dispatch)\12           (\"C-c M-g\" . magit-file-dispatch))\12    :custom\12    (magit-diff-refine-hunk t)\12    (magit-ediff-dwim-show-on-hunks t))\12" :post-blank 1 :post-affiliated 38817 :mode planning :granularity element :cached t :parent #191=(section (:begin 38817 :end 39137 :contents-begin 38817 :contents-end 39136 :robust-begin 38817 :robust-end 39134 :post-blank 1 :post-affiliated 38817 :mode section :granularity element :cached t :parent #190# :org-element--cache-sync-key nil)) :org-element--cache-sync-key nil)) 0] #191# 0] (src-block (:language "emacs-lisp" :switches nil :parameters nil :begin 38673 :end 38807 :number-lines nil :preserve-indent nil :retain-labels t :use-labels t :label-fmt nil :value "  ;;; init-dev.el --- Development settings -*- lexical-binding: t -*-\12  ;;; Commentary:\12\12  ;;; Code:\12" :post-blank 0 :post-affiliated 38673 :mode planning :granularity element :cached t :parent #192# :org-element--cache-sync-key nil)) -1] [[[nil nil #194=(section (:begin 39151 :end 39488 :contents-begin 39151 :contents-end 39487 :robust-begin 39151 :robust-end 39485 :post-blank 1 :post-affiliated 39151 :mode section :granularity element :cached t :parent #193# :org-element--cache-sync-key nil)) 0] [nil nil (src-block (:language "emacs-lisp" :switches nil :parameters nil :begin 39217 :end 39488 :number-lines nil :preserve-indent nil :retain-labels t :use-labels t :label-fmt nil :value "  (use-package projectile\12    :ensure t\12    :init\12    (projectile-mode +1)\12    :bind (:map projectile-mode-map\12                (\"C-c p\" . projectile-command-map))\12    :config\12    (setq projectile-track-known-projects-automatically nil))\12" :post-blank 1 :post-affiliated 39217 :mode nil :granularity element :cached t :parent #194# :org-element--cache-sync-key nil)) 0] (paragraph (:begin 39151 :end 39217 :contents-begin 39151 :contents-end 39216 :post-blank 1 :post-affiliated 39151 :mode planning :granularity element :cached t :parent #194# :org-element--cache-sync-key nil)) 0] [[nil nil #196=(section (:begin 39514 :end 39824 :contents-begin 39514 :contents-end 39823 :robust-begin 39514 :robust-end 39821 :post-blank 1 :post-affiliated 39514 :mode section :granularity element :cached t :parent #195# :org-element--cache-sync-key nil)) 0] [nil nil (src-block (:language "emacs-lisp" :switches nil :parameters ":tangle no" :begin 39567 :end 39824 :number-lines nil :preserve-indent nil :retain-labels t :use-labels t :label-fmt nil :value "  (use-package lsp-mode\12    :ensure t\12    :init\12    ;; set prefix for lsp-command-keymap (few alternatives - \"C-l\", \"C-c l\")\12    (setq lsp-keymap-prefix \"C-c l\")\12    :hook ((c++-mode . lsp))\12    :commands lsp)\12\12\12" :post-blank 1 :post-affiliated 39567 :mode nil :granularity element :cached t :parent #196# :org-element--cache-sync-key nil)) 0] (paragraph (:begin 39514 :end 39567 :contents-begin 39514 :contents-end 39566 :post-blank 1 :post-affiliated 39514 :mode planning :granularity element :cached t :parent #196# :org-element--cache-sync-key nil)) 0] #195# 0] #193# -1] #58# 0] (src-block (:language "emacs-lisp" :switches nil :parameters nil :begin 32367 :end 33468 :number-lines nil :preserve-indent nil :retain-labels t :use-labels t :label-fmt nil :value "(use-package org-modern\12  :ensure t\12  :hook (after-init . (lambda ()\12                        (setq org-modern-hide-stars 'leading)\12                        (global-org-modern-mode t)))\12  :config\12  ;; 标题行型号字符\12  (setq org-modern-star [\"◉\" \"○\" \"✸\" \"✳\" \"◈\" \"◇\" \"✿\" \"❀\" \"✜\"])\12  ;; 额外的行间距，0.1表示10%，1表示1px\12  (setq-default line-spacing 0.1)\12  ;; tag边框宽度，还可以设置为 `auto' 即自动计算\12  (setq org-modern-label-border 1)\12  ;; 设置表格竖线宽度，默认为3\12  (setq org-modern-table-vertical 2)\12  ;; 设置表格横线为0，默认为0.1\12  (setq org-modern-table-horizontal 0)\12  ;; 复选框美化\12  (setq org-modern-checkbox\12        '((?X . #(\"▢✓\" 0 2 (composition ((2)))))\12          (?- . #(\"▢–\" 0 2 (composition ((2)))))\12          (?\\s . #(\"▢\" 0 1 (composition ((1)))))))\12  ;; 列表符号美化\12  (setq org-modern-list\12        '((?- . \"•\")\12          (?+ . \"◦\")\12          (?* . \"▹\")))\12  ;; 代码块左边加上一条竖边线（需要Org mode顶头，如果启用了 `visual-fill-column-mode' 会很难看）\12  (setq org-modern-block-fringe t)\12  ;; 代码块类型美化，我们使用了 `prettify-symbols-mode'\12  (setq org-modern-block-name nil)\12  ;; #+关键字美化，我们使用了 `prettify-symbols-mode'\12  (setq org-modern-keyword nil)\12  )\12" :post-blank 1 :post-affiliated 32367 :mode nil :granularity element :cached t :parent #173# :org-element--cache-sync-key nil)) 0] [[[[[[nil nil #198=(section (:begin 39834 :end 39993 :contents-begin 39834 :contents-end 39992 :robust-begin 39834 :robust-end 39990 :post-blank 1 :post-affiliated 39834 :mode section :granularity element :cached t :parent #197# :org-element--cache-sync-key nil)) 0] [nil nil (src-block (:language "emacs-lisp" :switches nil :parameters nil :begin 39882 :end 39993 :number-lines nil :preserve-indent nil :retain-labels t :use-labels t :label-fmt nil :value "  (use-package eglot\12    :ensure nil\12    :hook (c++-mode . eglot-ensure))\12  \12" :post-blank 1 :post-affiliated 39882 :mode nil :granularity element :cached t :parent #198# :org-element--cache-sync-key nil)) 0] (paragraph (:begin 39834 :end 39882 :contents-begin 39834 :contents-end 39881 :post-blank 1 :post-affiliated 39834 :mode planning :granularity element :cached t :parent #198# :org-element--cache-sync-key nil)) 0] [[nil nil #201=(section (:begin 40010 :end 40338 :contents-begin 40010 :contents-end 40338 :robust-begin 40010 :robust-end 40336 :post-blank 0 :post-affiliated 40010 :mode section :granularity element :cached t :parent #199# :org-element--cache-sync-key nil)) 0] [nil nil #200# 0] (src-block (:language "emacs-lisp" :switches nil :parameters nil :begin 40010 :end 40338 :number-lines nil :preserve-indent nil :retain-labels t :use-labels t :label-fmt nil :value "  (use-package company\12    :ensure t\12    :hook (c++-mode . company-mode)\12    :init\12    (setq company-tooltip-align-annotations t)\12    (setq company-idle-delay 0.0)\12    (setq company-show-numbers t) ; 给选项编号 (按快捷键 M-1、M-2 等等来进行选择).\12    (setq company-minimum-prefix-length 1)) ; 只需敲 1 个字母就开始进行自动补全\12" :post-blank 0 :post-affiliated 40010 :mode planning :granularity element :cached t :parent #201# :org-element--cache-sync-key nil)) 0] #199# 0] [[[nil nil (src-block (:language "emacs-lisp" :switches nil :parameters nil :begin 40354 :end 40430 :number-lines nil :preserve-indent nil :retain-labels t :use-labels t :label-fmt nil :value "  (use-package racket-mode\12    :ensure t)\12" :post-blank 1 :post-affiliated 40354 :mode planning :granularity element :cached t :parent #206=(section (:begin 40354 :end 40430 :contents-begin 40354 :contents-end 40429 :robust-begin 40354 :robust-end 40427 :post-blank 1 :post-affiliated 40354 :mode section :granularity element :cached t :parent #200# :org-element--cache-sync-key nil)) :org-element--cache-sync-key nil)) 0] [nil nil #205=(section (:begin 40442 :end 50009 :contents-begin 40442 :contents-end 50008 :robust-begin 40442 :robust-end 50006 :post-blank 1 :post-affiliated 40442 :mode section :granularity element :cached t :parent #202# :org-element--cache-sync-key nil)) 0] #202# 0] [[nil nil #203# 0] [nil nil (paragraph (:begin 50023 :end 50079 :contents-begin 50023 :contents-end 50078 :post-blank 1 :post-affiliated 50023 :mode planning :granularity element :cached t :parent #204=(section (:begin 50023 :end 50153 :contents-begin 50023 :contents-end 50152 :robust-begin 50023 :robust-end 50150 :post-blank 1 :post-affiliated 50023 :mode section :granularity element :cached t :parent #203# :org-element--cache-sync-key nil)) :org-element--cache-sync-key nil)) 0] #204# 0] (src-block (:language "emacs-lisp" :switches nil :parameters nil :begin 40442 :end 50009 :number-lines nil :preserve-indent nil :retain-labels t :use-labels t :label-fmt nil :value "  (use-package cc-mode\12    :ensure nil\12    :mode ((\"\\\\.cpp\\\\'\" . c++-mode)\12           (\"\\\\.h\\\\'\" . c++-mode))\12    :custom\12    (c-basic-offset 2)\12    (c-offsets-alist '(;; a multi-line C style block comment\12                       ;;\12                       ;; /**\12                       ;;  * text\12                       ;;  */\12                       ;; int foo();\12                       (c                     . c-lineup-C-comments)\12                       ;; a multi-line string\12                       ;;\12                       ;; const char* s = \"hello,\\\12                       ;; world\";\12                       (string                . c-lineup-dont-change)\12                       ;; brace of function\12                       ;;\12                       ;; int add1(int x) {\12                       ;;   return ++x;\12                       ;; }\12                       (defun-open            . 0)\12                       (defun-close           . 0)\12                       (defun-block-intro     . +)\12                       ;; brace of class\12                       ;;\12                       ;; class Foo {\12                       ;;  public:                                 // <- access-label\12                       ;; };\12                       (class-open            . 0)\12                       (class-close           . 0)\12                       (access-label          . /)\12                       ;; brace of class method\12                       ;;\12                       ;; class Foo {\12                       ;;   friend class Bar;                   // <- friend\12                       ;;   int getVar() {                      // <- inclass\12                       ;;       return 42;\12                       ;;   }\12                       ;; };\12                       (inline-open           . 0)\12                       (inline-close          . 0)\12                       (inclass               . +)\12                       (friend                . 0)\12                       ;; `noexcept' specifier indentation\12                       (func-decl-cont        . +)\12                       ;; brace of list\12                       ;;\12                       ;; int nums[] =\12                       ;; {\12                       ;;   0,\12                       ;;   1,\12                       ;;   {2},\12                       ;; };\12                       (brace-list-open       . 0)\12                       (brace-list-close      . 0)\12                       (brace-list-intro      . +)\12                       (brace-list-entry      . 0)\12                       (brace-entry-open      . 0)\12                       ;; brace of namespace\12                       ;;\12                       ;; namespace ns {\12                       ;; const int var = 42;\12                       ;; }\12                       (namespace-open        . 0)\12                       (namespace-close       . 0)\12                       (innamespace           . 0)\12                       ;; brace of statement block\12                       ;;\12                       ;; int send_mail() {\12                       ;;   std::mutex io_mtx;\12                       ;;   {\12                       ;;       std::lock_guard<std::mutex> lk(io_mtx);\12                       ;;       // ...\12                       ;;   }\12                       ;; }\12                       (block-open            . 0)\12                       (block-close           . 0)\12                       ;; topmost definition\12                       ;;\12                       ;; struct\12                       ;; foo {};\12                       (topmost-intro         . 0)\12                       (topmost-intro-cont    . c-lineup-topmost-intro-cont)\12                       ;; class member initialization list\12                       ;;\12                       ;; struct foo {\12                       ;;   foo(int a, int b) :\12                       ;;       a_(a),\12                       ;;       b_(b) {}\12                       ;; };\12                       (member-init-intro     . +)\12                       (member-init-cont      . c-lineup-multi-inher)\12                       ;; class inheritance\12                       ;;\12                       ;; struct Derived : public Base1,\12                       ;;                  public Base2 {\12                       ;; };\12                       (inher-intro           . +)\12                       (inher-cont            . c-lineup-multi-inher)\12                       ;; A C statement\12                       ;;\12                       ;; int main(int argc, char* argv[]) {\12                       ;;   const int var1 = 42;\12                       ;;   const int var2 = (argc > 1) ? 314   // <- a new statement starts\12                       ;;                               : 512;  // <- statement-cont\12                       ;;   {\12                       ;;       const int var3 = 42;            // <- statement-block-intro\12                       ;;   }\12                       ;;\12                       ;;   switch (argc) {\12                       ;;     case 0:                           // <- case-label\12                       ;;       break;                          // <- statement-case-intro\12                       ;;\12                       ;;     case 1:\12                       ;;       {                               // <- statement-case-open\12                       ;;           const int tmp = 101;\12                       ;;       }\12                       ;;       break;\12                       ;;   }\12                       ;;\12                       ;;   if (argc == 1)\12                       ;;       assert(argc == 1);              // <- substatement\12                       ;;\12                       ;;   if (argc == 1)\12                       ;;   {                                   // <- substatement-open\12                       ;;       assert(argc == 1);\12                       ;;   }\12                       ;;\12                       ;;   // comments                         // <- comment-intro\12                       ;;   if (argc == 1)\12                       ;;   glabel:                             // <- substatement-label\12                       ;;       assert(argc == 1);\12                       ;;\12                       ;; error:                                  // <- label, with zero `c-label-minimum-indentation'\12                       ;;   return -1;\12                       ;; }\12                       (statement             . 0)\12                       (statement-cont        . (c-lineup-ternary-bodies +))\12                       (statement-block-intro . +)\12                       (statement-case-intro  . +)\12                       (statement-case-open   . +)\12                       (substatement          . +)\12                       (substatement-open     . 0)\12                       (substatement-label    . 0)\12                       (case-label            . +)\12                       (label                 . 0)\12                       (do-while-closure      . 0)\12                       (else-clause           . 0)\12                       (catch-clause          . 0)\12                       (comment-intro         . c-lineup-comment)\12                       ;; funcall with arglist\12                       ;;\12                       ;; sum(\12                       ;;   1, 2, 3\12                       ;; );\12                       (arglist-intro         . +)\12                       (arglist-cont          . 0)\12                       (arglist-cont-nonempty . c-lineup-arglist)\12                       (arglist-close         . c-lineup-close-paren)\12                       ;; operator>> and operator<< for cin/cout\12                       ;;\12                       ;; std::cin >> a\12                       ;;          >> b;\12                       ;; std::cout << a\12                       ;;           << b;\12                       (stream-op             . c-lineup-streamop)\12                       ;; macros\12                       ;;\12                       ;; #define ALIST(G)                                \\\12                       ;;   G(1)                                        \\\12                       ;;   G(2)\12                       (cpp-macro             . -1000)\12                       (cpp-macro-cont        . +)\12                       ;; extern\12                       ;;\12                       ;; extern \"C\" {\12                       ;; void test();\12                       ;; }\12                       (extern-lang-open      . 0)\12                       (extern-lang-close     . 0)\12                       (inextern-lang         . 0)\12                       ;; lambda\12                       ;;\12                       ;; auto f = [](int a, int b) {\12                       ;;   return a + b;\12                       ;; };\12                       (inlambda              . 0)\12                       (lambda-intro-cont     . +)\12                       ;; GNU extension, a compound statement as expression\12                       ;;\12                       ;; int x = 1, y = 2;\12                       ;; int z = ({\12                       ;;   int ret;\12                       ;;   if (y > 0)\12                       ;;       ret = y;\12                       ;;   else\12                       ;;       ret = x - y;\12                       ;;   ret;\12                       ;; });\12                       (inexpr-statement      . 0)\12                       ;; c++ template args\12                       ;;\12                       ;; dummy<int,\12                       ;;       char,\12                       ;;       double>(0, 0, 0);\12                       (template-args-cont    . (c-lineup-template-args +)))))\12" :post-blank 1 :post-affiliated 40442 :mode planning :granularity element :cached t :parent #205# :org-element--cache-sync-key nil)) 0] #206# 0] [[[[nil nil #207# 0] [nil nil (paragraph (:begin 50172 :end 50240 :contents-begin 50172 :contents-end 50239 :post-blank 1 :post-affiliated 50172 :mode planning :granularity element :cached t :parent #208=(section (:begin 50172 :end 50319 :contents-begin 50172 :contents-end 50318 :robust-begin 50172 :robust-end 50316 :post-blank 1 :post-affiliated 50172 :mode section :granularity element :cached t :parent #207# :org-element--cache-sync-key nil)) :org-element--cache-sync-key nil)) 0] #208# 0] [[nil nil #209# 0] [nil nil (src-block (:language "emacs-lisp" :switches nil :parameters nil :begin 50336 :end 50426 :number-lines nil :preserve-indent nil :retain-labels t :use-labels t :label-fmt nil :value "  (add-hook 'prog-mode-hook 'display-line-numbers-mode)\12" :post-blank 1 :post-affiliated 50336 :mode planning :granularity element :cached t :parent #210=(section (:begin 50336 :end 50426 :contents-begin 50336 :contents-end 50425 :robust-begin 50336 :robust-end 50423 :post-blank 1 :post-affiliated 50336 :mode section :granularity element :cached t :parent #209# :org-element--cache-sync-key nil)) :org-element--cache-sync-key nil)) 0] #210# 0] (src-block (:language "emacs-lisp" :switches nil :parameters nil :begin 50240 :end 50319 :number-lines nil :preserve-indent nil :retain-labels t :use-labels t :label-fmt nil :value "  (use-package json-navigator\12    :ensure t)\12" :post-blank 1 :post-affiliated 50240 :mode nil :granularity element :cached t :parent #208# :org-element--cache-sync-key nil)) 0] [[[nil nil #212=(section (:begin 50446 :end 50606 :contents-begin 50446 :contents-end 50605 :robust-begin 50446 :robust-end 50603 :post-blank 1 :post-affiliated 50446 :mode section :granularity element :cached t :parent #211# :org-element--cache-sync-key nil)) 0] [nil nil #72# 0] (src-block (:language "emacs-lisp" :switches nil :parameters nil :begin 50446 :end 50606 :number-lines nil :preserve-indent nil :retain-labels t :use-labels t :label-fmt nil :value "  \12  (provide 'init-dev)\12  ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;\12  ;;; init-dev.el ends here\12" :post-blank 1 :post-affiliated 50446 :mode planning :granularity element :cached t :parent #212# :org-element--cache-sync-key nil)) 0] [[[nil nil (property-drawer (:begin 50627 :end 50705 :contents-begin 50640 :contents-end 50698 :post-blank 1 :post-affiliated 50627 :mode planning :granularity element :cached t :parent #215=(section (:begin 50627 :end 50705 :contents-begin 50627 :contents-end 50704 :robust-begin 50627 :robust-end 50702 :post-blank 1 :post-affiliated 50627 :mode section :granularity element :cached t :parent #72# :org-element--cache-sync-key nil)) :org-element--cache-sync-key nil)) 0] nil #213# -1] [nil nil (src-block (:language "emacs-lisp" :switches nil :parameters nil :begin 50735 :end 50871 :number-lines nil :preserve-indent nil :retain-labels t :use-labels t :label-fmt nil :value ";;; init-completion.el --- Completion settings -*- lexical-binding: t -*-\12;;; Commentary:\12\12;;; Code:\12" :post-blank 1 :post-affiliated 50735 :mode planning :granularity element :cached t :parent #214=(section (:begin 50735 :end 50871 :contents-begin 50735 :contents-end 50870 :robust-begin 50735 :robust-end 50868 :post-blank 1 :post-affiliated 50735 :mode section :granularity element :cached t :parent #213# :org-element--cache-sync-key nil)) :org-element--cache-sync-key nil)) 0] #214# -1] #215# 1] #211# 1] (src-block (:language "emacs-lisp" :switches nil :parameters nil :begin 50079 :end 50153 :number-lines nil :preserve-indent nil :retain-labels t :use-labels t :label-fmt nil :value "  (use-package json-mode\12    :ensure t)\12" :post-blank 1 :post-affiliated 50079 :mode nil :granularity element :cached t :parent #204# :org-element--cache-sync-key nil)) 1] [[[[[nil nil #217=(section (:begin 50883 :end 52148 :contents-begin 50883 :contents-end 52147 :robust-begin 50883 :robust-end 52145 :post-blank 1 :post-affiliated 50883 :mode section :granularity element :cached t :parent #216# :org-element--cache-sync-key nil)) 0] [nil nil (src-block (:language "emacs-lisp" :switches nil :parameters nil :begin 50931 :end 52148 :number-lines nil :preserve-indent nil :retain-labels t :use-labels t :label-fmt nil :value "  (use-package vertico\12    :ensure t\12    :hook (after-init . vertico-mode)\12    :bind (:map minibuffer-local-map\12                (\"M-<DEL>\" . my/minibuffer-backward-kill)\12                :map vertico-map\12                (\"M-q\" . vertico-quick-insert)) ; use C-g to exit\12    :config\12    (defun my/minibuffer-backward-kill (arg)\12      \"When minibuffer is completing a file name delete up to parent\12  folder, otherwise delete a word\"\12      (interactive \"p\")\12      (if minibuffer-completing-file-name\12          ;; Borrowed from https://github.com/raxod502/selectrum/issues/498#issuecomment-803283608\12          (if (string-match-p \"/.\" (minibuffer-contents))\12              (zap-up-to-char (- arg) ?/)\12            (delete-minibuffer-contents))\12        (backward-kill-word arg)))\12\12    ;; Do not allow the cursor in the minibuffer prompt\12    (setq minibuffer-prompt-properties\12          '(read-only t cursor-intangible t face minibuffer-prompt))\12    (add-hook 'minibuffer-setup-hook #'cursor-intangible-mode)\12    \12    (setq vertico-cycle t)                ; cycle from last to first\12    :custom\12    (vertico-count 15)                    ; number of candidates to display, default is 10\12    )\12" :post-blank 1 :post-affiliated 50931 :mode nil :granularity element :cached t :parent #217# :org-element--cache-sync-key nil)) 0] (paragraph (:begin 50883 :end 50931 :contents-begin 50883 :contents-end 50930 :post-blank 1 :post-affiliated 50883 :mode planning :granularity element :cached t :parent #217# :org-element--cache-sync-key nil)) 0] [[nil nil #219=(section (:begin 52162 :end 52942 :contents-begin 52162 :contents-end 52941 :robust-begin 52162 :robust-end 52939 :post-blank 1 :post-affiliated 52162 :mode section :granularity element :cached t :parent #218# :org-element--cache-sync-key nil)) 0] [nil nil (src-block (:language "emacs-lisp" :switches nil :parameters nil :begin 52215 :end 52942 :number-lines nil :preserve-indent nil :retain-labels t :use-labels t :label-fmt nil :value ";; support Pinyin first character match for orderless, avy etc.\12(use-package pinyinlib\12  :ensure t)\12\12;; orderless 是一种哲学思想\12(use-package orderless\12  :ensure t\12  :init\12  (setq completion-styles '(orderless partial-completion basic))\12  (setq orderless-component-separator \"[ &]\") ; & is for company because space will break completion\12  (setq completion-category-defaults nil)\12  (setq completion-category-overrides nil)\12  :config\12  ;; make completion support pinyin, refer to\12  ;; https://emacs-china.org/t/vertico/17913/2\12  (defun completion--regex-pinyin (str)\12    (orderless-regexp (pinyinlib-build-regexp-string str)))\12  (add-to-list 'orderless-matching-styles 'completion--regex-pinyin)\12  )\12" :post-blank 1 :post-affiliated 52215 :mode nil :granularity element :cached t :parent #219# :org-element--cache-sync-key nil)) 0] (paragraph (:begin 52162 :end 52215 :contents-begin 52162 :contents-end 52214 :post-blank 1 :post-affiliated 52162 :mode planning :granularity element :cached t :parent #219# :org-element--cache-sync-key nil)) 0] #218# 0] [[[nil nil #221=(section (:begin 52957 :end 53253 :contents-begin 52957 :contents-end 53252 :robust-begin 52957 :robust-end 53250 :post-blank 1 :post-affiliated 52957 :mode section :granularity element :cached t :parent #220# :org-element--cache-sync-key nil)) 0] [nil nil (src-block (:language "emacs-lisp" :switches nil :parameters nil :begin 53010 :end 53253 :number-lines nil :preserve-indent nil :retain-labels t :use-labels t :label-fmt nil :value ";; minibuffer helpful annotations\12(use-package marginalia\12  :ensure t\12  :hook (after-init . marginalia-mode)\12  :custom\12  (marginalia-annotators '(marginalia-annotators-heavy marginalia-annotators-light nil)))\12" :post-blank 1 :post-affiliated 53010 :mode nil :granularity element :cached t :parent #221# :org-element--cache-sync-key nil)) 0] (paragraph (:begin 52957 :end 53010 :contents-begin 52957 :contents-end 53009 :post-blank 1 :post-affiliated 52957 :mode planning :granularity element :cached t :parent #221# :org-element--cache-sync-key nil)) 0] [[nil nil #223=(section (:begin 53265 :end 57221 :contents-begin 53265 :contents-end 57220 :robust-begin 53265 :robust-end 57218 :post-blank 1 :post-affiliated 53265 :mode section :granularity element :cached t :parent #222# :org-element--cache-sync-key nil)) 0] [nil nil (src-block (:language "emacs-lisp" :switches nil :parameters nil :begin 53312 :end 57221 :number-lines nil :preserve-indent nil :retain-labels t :use-labels t :label-fmt nil :value "  (use-package consult\12    :ensure t\12    :after org\12    :bind (([remap goto-line]                     . consult-goto-line)\12           ([remap isearch-forward]               . consult-line)\12  ;         ([remap switch-to-buffer]              . consult-buffer)\12           ([remap switch-to-buffer-other-window] . consult-buffer-other-window)\12           ([remap switch-to-buffer-other-frame]  . consult-buffer-other-frame)\12           ([remap yank-pop]                      . consult-yank-pop)\12           ([remap apropos]                       . consult-apropos)\12           ([remap bookmark-jump]                 . consult-bookmark)\12           ([remap goto-line]                     . consult-goto-line)\12           ([remap imenu]                         . consult-imenu)\12           ([remap multi-occur]                   . consult-multi-occur)\12           ([remap recentf-open-files]            . consult-recent-file)\12           (\"C-x j\"                               . consult-mark)\12           (\"C-c g\"                               . consult-ripgrep)\12           (\"C-c f\"                               . consult-find)\12           (\"\\e\\ef\"                               . consult-locate) ; need to enable locate first\12           (\"C-c n h\"                             . my/consult-find-org-headings)\12           :map org-mode-map\12           (\"C-c C-j\"                             . consult-org-heading)\12           :map minibuffer-local-map\12           (\"C-r\"                                 . consult-history)\12           :map isearch-mode-map\12           (\"C-;\"                                 . consult-line)\12           :map prog-mode-map\12           (\"C-c C-j\"                             . consult-outline)\12           )\12    :hook (completion-list-mode . consult-preview-at-point-mode)\12    :init\12    ;; Optionally configure the register formatting. This improves the register\12    ;; preview for `consult-register', `consult-register-load',\12    ;; `consult-register-store' and the Emacs built-ins.\12    (setq register-preview-delay 0\12          register-preview-function #'consult-register-format)\12\12    ;; Optionally tweak the register preview window.\12    ;; This adds thin lines, sorting and hides the mode line of the window.\12    (advice-add #'register-preview :override #'consult-register-window)\12\12    ;; Use Consult to select xref locations with preview\12    (setq xref-show-xrefs-function #'consult-xref\12          xref-show-definitions-function #'consult-xref)\12\12    ;; MacOS locate doesn't support `--ignore-case --existing' args.\12    (setq consult-locate-args (pcase system-type\12                                ('gnu/linux \"locate --ignore-case --existing --regex\")\12                                ('darwin \"mdfind -name\")))\12    :config\12    (consult-customize\12     consult-theme\12     :preview-key '(:debounce 0.2 any)\12     consult-ripgrep consult-git-grep consult-grep\12     consult-bookmark consult-recent-file consult-xref\12     consult--source-recent-file consult--source-project-recent-file consult--source-bookmark\12     :preview-key \"M-.\")\12\12    ;; Optionally configure the narrowing key.\12    ;; Both < and C-+ work reasonably well.\12    (setq consult-narrow-key \"<\") ;; (kbd \"C-+\")\12\12    (autoload 'projectile-project-root \"projectile\")\12    (setq consult-project-root-function #'projectile-project-root)\12\12    ;; search all org file headings under a directory, see:\12    ;; https://emacs-china.org/t/org-files-heading-entry/20830/4\12    (defun my/consult-find-org-headings (&optional match)\12      \"find headngs in all org files.\"\12      (interactive)\12      (consult-org-heading match (directory-files org-directory t \"^[0-9]\\\\{8\\\\}.+\\\\.org$\")))\12\12    ;; Use `consult-ripgrep' instead of `consult-line' in large buffers\12    (defun consult-line-symbol-at-point ()\12      \"Consult line the symbol where the point is\"\12      (interactive)\12      (consult-line (thing-at-point 'symbol)))\12    )\12" :post-blank 1 :post-affiliated 53312 :mode nil :granularity element :cached t :parent #223# :org-element--cache-sync-key nil)) 0] (paragraph (:begin 53265 :end 53312 :contents-begin 53265 :contents-end 53311 :post-blank 1 :post-affiliated 53265 :mode planning :granularity element :cached t :parent #223# :org-element--cache-sync-key nil)) 0] #222# 0] #220# 0] [[[nil nil #225=(section (:begin 57244 :end 58897 :contents-begin 57244 :contents-end 58896 :robust-begin 57244 :robust-end 58894 :post-blank 1 :post-affiliated 57244 :mode section :granularity element :cached t :parent #224# :org-element--cache-sync-key nil)) 0] [nil nil (src-block (:language "emacs-lisp" :switches nil :parameters ":tangle no" :begin 57287 :end 58897 :number-lines nil :preserve-indent nil :retain-labels t :use-labels t :label-fmt nil :value "(use-package corfu\12  :ensure t\12  :hook (after-init . global-corfu-mode)\12  :bind\12  (:map corfu-map\12        (\"SPC\" . corfu-insert-separator)    ; configure space for separator insertion\12        (\"M-q\" . corfu-quick-complete)      ; use C-g to exit\12        (\"TAB\" . corfu-next)\12        ([tab] . corfu-next)\12        (\"S-TAB\" . corfu-previous)\12        ([backtab] . corfu-previous))\12  :config\12  ;; TAB cycle if there are only few candidates\12  (setq completion-cycle-threshold 0)\12  (setq tab-always-indent 'complete)\12\12  (defun corfu-enable-always-in-minibuffer ()\12    \"Enable Corfu in the minibuffer if Vertico/Mct are not active.\"\12    (unless (or (bound-and-true-p mct--active)\12                (bound-and-true-p vertico--input))\12      ;; (setq-local corfu-auto nil) Enable/disable auto completion\12      (corfu-mode 1)))\12  (add-hook 'minibuffer-setup-hook #'corfu-enable-always-in-minibuffer 1)\12\12  ;; enable corfu in eshell\12  (add-hook 'eshell-mode-hook\12            (lambda ()\12              (setq-local corfu-auto nil)\12              (corfu-mode)))\12\12  ;; For Eshell\12  ;; ===========\12  ;; avoid press RET twice in Eshell\12  (defun corfu-send-shell (&rest _)\12    \"Send completion candidate when inside comint/eshell.\"\12    (cond\12     ((and (derived-mode-p 'eshell-mode) (fboundp 'eshell-send-input))\12      (eshell-send-input))\12     ((and (derived-mode-p 'comint-mode)  (fboundp 'comint-send-input))\12      (comint-send-input))))\12\12  (advice-add #'corfu-insert :after #'corfu-send-shell)\12\12  :custom\12  (corfu-cycle t)                ;; Enable cycling for `corfu-next/previous'\12  )\12" :post-blank 1 :post-affiliated 57287 :mode nil :granularity element :cached t :parent #225# :org-element--cache-sync-key nil)) 0] (paragraph (:begin 57244 :end 57287 :contents-begin 57244 :contents-end 57286 :post-blank 1 :post-affiliated 57244 :mode planning :granularity element :cached t :parent #225# :org-element--cache-sync-key nil)) 0] [[[nil nil #227=(section (:begin 58924 :end 59803 :contents-begin 58924 :contents-end 59802 :robust-begin 58924 :robust-end 59800 :post-blank 1 :post-affiliated 58924 :mode section :granularity element :cached t :parent #226# :org-element--cache-sync-key nil)) 0] [nil nil (src-block (:language "emacs-lisp" :switches nil :parameters ":tangle no" :begin 58981 :end 59803 :number-lines nil :preserve-indent nil :retain-labels t :use-labels t :label-fmt nil :value ";; yasnippet settings\12(use-package yasnippet\12  :ensure t\12  :diminish yas-minor-mode\12  :hook ((after-init . yas-reload-all)\12         ((prog-mode LaTeX-mode org-mode) . yas-minor-mode))\12  :config\12  ;; Suppress warning for yasnippet code.\12  (require 'warnings)\12  (add-to-list 'warning-suppress-types '(yasnippet backquote-change))\12\12  (setq yas-prompt-functions '(yas-x-prompt yas-dropdown-prompt))\12  (defun smarter-yas-expand-next-field ()\12    \"Try to `yas-expand' then `yas-next-field' at current cursor position.\"\12    (interactive)\12    (let ((old-point (point))\12          (old-tick (buffer-chars-modified-tick)))\12      (yas-expand)\12      (when (and (eq old-point (point))\12                 (eq old-tick (buffer-chars-modified-tick)))\12        (ignore-errors (yas-next-field))))))\12" :post-blank 1 :post-affiliated 58981 :mode nil :granularity element :cached t :parent #227# :org-element--cache-sync-key nil)) 0] (paragraph (:begin 58924 :end 58981 :contents-begin 58924 :contents-end 58980 :post-blank 1 :post-affiliated 58924 :mode planning :granularity element :cached t :parent #227# :org-element--cache-sync-key nil)) 0] [nil [nil nil (src-block (:language "emacs-lisp" :switches nil :parameters nil :begin 59832 :end 59999 :number-lines nil :preserve-indent nil :retain-labels t :use-labels t :label-fmt nil :value "\12(provide 'init-completion)\12;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;\12;;; init-completion.el ends here\12" :post-blank 2 :post-affiliated 59832 :mode planning :granularity element :cached t :parent #229=(section (:begin 59832 :end 59999 :contents-begin 59832 :contents-end 59997 :robust-begin 59832 :robust-end 59995 :post-blank 2 :post-affiliated 59832 :mode section :granularity element :cached t :parent #228# :org-element--cache-sync-key nil)) :org-element--cache-sync-key nil)) 0] #229# 1] #228# 0] #226# 1] #224# 0] #216# -1] #197# 0] #40# 0] nil nil 0] org-element--cache-compare)))