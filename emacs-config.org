#+TITLE:     Emacs config file 
#+AUTHOR:    DDOSvoid
#+DATE:      2023-11-01 18:10:23

#+STARTUP: overview

* early-init.el
:PROPERTIES:
:HEADER-ARGS: :tangle early-init.el
:END:

在Emacs刚启动，还未加载主要配置文件时的配置文件。

#+BEGIN_SRC emacs-lisp
;;; early-init.el --- Emacs pre-initialization config -*- lexical-binding: t -*-
;;; Commentary:

;;; Code:

;; 设置垃圾回收参数
(setq gc-cons-threshold (* 16 1024 1024))
(setq gc-cons-percentage 0.6)

;; 启动早期不加载`package.el'包管理器
(setq package-enable-at-startup nil)
;; 不从包缓存中加载
(setq package-quickstart nil)

;; 禁止展示菜单栏、工具栏和纵向滚动条
(push '(menu-bar-lines . 0) default-frame-alist)
(push '(tool-bar-lines . 0) default-frame-alist)
(push '(vertical-scroll-bars) default-frame-alist)

;; 禁止自动缩放窗口先
(setq frame-inhibit-implied-resize t)

;; 禁止菜单栏、工具栏、滚动条模式，禁止启动屏幕和文件对话框
(menu-bar-mode -1)
(tool-bar-mode -1)
(scroll-bar-mode -1)
(setq inhibit-splash-screen t)
(setq use-file-dialog nil)

;; 在这个阶段不编译
(setq comp-deferred-compilation nil)

(provide 'early-init)
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;;; early-init.el ends here
#+END_SRC

* init.el
:PROPERTIES:
:HEADER-ARGS: :tangle init.el
:END:

** init.el header

#+BEGIN_SRC emacs-lisp
;;; init.el --- The main init entry for Emacs -*- lexical-binding: t -*-
;;; Commentary:

;;; Code:

#+END_SRC

** package

#+BEGIN_SRC emacs-lisp
  (require 'package)
  (setq package-archives
        '(("melpa" . "http://mirrors.tuna.tsinghua.edu.cn/elpa/melpa/")
          ("melpa-stable" . "http://mirrors.tuna.tsinghua.edu.cn/elpa/stable-melpa/")
          ("gnu" . "http://mirrors.tuna.tsinghua.edu.cn/elpa/gnu/")))
  (package-initialize)
#+END_SRC 

** use-package
[[https://github.com/jwiegley/use-package][use-package]]

#+BEGIN_SRC emacs-lisp
  ;; 安装 `use-package'
  ;; become built-in in Emacs 29.1
  (unless (package-installed-p 'use-package)
    (package-refresh-contents)
    (package-install 'use-package))

  ;; 配置 `use-package'
  (eval-and-compile
    (setq use-package-always-ensure nil)
    (setq use-package-always-defer nil)
    (setq use-package-expand-minimally nil)
    (setq use-package-enable-imenu-support t)
    (if (daemonp)
        (setq use-package-always-demand t)))

  (eval-when-compile
    (require 'use-package))

  ;; 安装 `use-package' 的集成模块
  (use-package use-package-ensure-system-package
    :ensure t)
  (use-package diminish
    :ensure t)
  (use-package bind-key
    :ensure t)
#+END_SRC

** quelpa
Reference:
+ [[https://github.com/quelpa/quelpa][quelpa/quelpa: Build and install your Emacs Lisp packages on-the-fly directly from source]]
+ [[https://github.com/quelpa/quelpa-use-package][quelpa/quelpa-use-package: Emacs quelpa handler for use-package]]

#+BEGIN_SRC emacs-lisp
(use-package quelpa
  :ensure t
  :commands quelpa
  :custom
  (quelpa-git-clone-depth 1)
  (quelpa-update-melpa-p nil)
  (quelpa-self-upgrade-p nil)
  (quelpa-checkout-melpa-p nil))

;; `quelpa' 与 `use-package' 集成
(use-package quelpa-use-package
  :ensure t)
(use-package quelpa
  :ensure t)
#+END_SRC 

** loading config

#+BEGIN_SRC emacs-lisp
  ;; 将lisp目录放到加载路径的前面以加快启动速度
  (let ((dir (locate-user-emacs-file "lisp")))
    (add-to-list 'load-path (file-name-as-directory dir)))

  ;; 加载各模块化配置
  ;; 不要在`*message*'缓冲区显示加载模块化配置的信息
  (with-temp-message ""
    (require 'init-ui) 
    (require 'init-base)
    (require 'init-edit) 
    (require 'init-org)
    (require 'init-completion)
    (require 'init-dev)
    )
#+END_SRC

** other config

Reference:
+ [[https://emacs-china.org/t/emacs/6731/4][emacs 修改文件提示没有权限 - Emacs-general - Emacs China]]

#+BEGIN_SRC emacs-lisp
  ;; F2 to open init file
  (defun ddosvoid/open-init-file()
    (interactive)
    (find-file "~/.emacs.d/emacs-config.org"))
  (global-set-key (kbd "<f2>") 'ddosvoid/open-init-file)

  ;; sudo find-file
  (defun ddosvoid/sudo-edit-current-file ()
    (interactive)
    (when (buffer-file-name)
      (let ((old-point (point)))
        (find-file (concat "/sudo:root@localhost:" (buffer-file-name)))
        (goto-char old-point))))

  ;; set proxy in wsl2
  (defvar default-proxy "172.26.0.1:7890")
  (defun ddosvoid/proxy-http-show ()
    "Show HTTP/HTTPS proxy."
    (interactive)
    (if url-proxy-services
        (message "Current HTTP proxy is `%s'" default-proxy)
      (message "No HTTP proxy")))

  (defun ddosvoid/proxy-http-enable ()
    "Enable HTTP/HTTPS proxy."
    (interactive)
    (setq url-proxy-services
          `(("http" . ,default-proxy)
            ("https" . ,default-proxy)
            ("no_proxy" . "^\\(localhost\\|192.168.*\\|10.*\\)")))
    (ddosvoid/proxy-http-show))

  (defun ddosvoid/proxy-http-disable ()
    "Disable HTTP/HTTPS proxy."
    (interactive)
    (setq url-proxy-services nil)
    (ddosvoid/proxy-http-show))

  (defun ddosovid/proxy-http-toggle ()
    "Toggle HTTP/HTTPS proxy."
    (interactive)
    (if (bound-and-true-p url-proxy-services)
        (ddosvoid/proxy-http-disable)
      (ddosvoid/proxy-http-enable)))

#+END_SRC

** init.el footer

#+BEGIN_SRC emacs-lisp

(provide 'init)
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;;; init.el ends here
#+END_SRC 

* init-ui.el
:PROPERTIES:
:HEADER-ARGS: :tangle lisp/init-ui.el :mkdirp yes
:END:

** init-ui.el header

#+BEGIN_SRC emacs-lisp
;;; init-ui.el --- UI settings -*- lexical-binding: t -*-
;;; Commentary:

;;; Code:

#+END_SRC

** ef-themes
   
[[https://protesilaos.com/emacs/ef-themes][ef themes]]

#+BEGIN_SRC emacs-lisp
  (use-package ef-themes
    :ensure t
    :bind ("C-c t" . ef-themes-toggle)
    :init
    ;; set two specific themes and switch between them
    (setq ef-themes-to-toggle '(ef-cyprus ef-night))

    ;; set org headings and function syntax
    ;; (setq ef-themes-headings
    ;;       '((0 . (bold 1))
    ;;         (1 . (bold 1))
    ;;         (2 . (rainbow bold 1))
    ;;         (3 . (rainbow bold 1))
    ;;         (4 . (rainbow bold 1))
    ;;         (t . (rainbow bold 1))))
    ;; (setq ef-themes-region '(intense no-extend neutral))

    ;; Disable all other themes to avoid awkward blending:
    (mapc #'disable-theme custom-enabled-themes)

    ;; Load the theme of choice:
    ;; The themes we provide are recorded in the `ef-themes-dark-themes',
    ;; `ef-themes-light-themes'.

    ;; 如果你不喜欢随机主题，也可以直接固定选择一个主题，如下：
    (ef-themes-select 'ef-cyprus)

    ;; 随机挑选一款主题，如果是命令行打开Emacs，则随机挑选一款黑色主题
    ;;(if (display-graphic-p)
    ;;    (ef-themes-load-random)
    ;;  (ef-themes-load-random 'dark))

    :config
    ;; auto change theme, aligning with system themes.
    (defun my/apply-theme (appearance)
      "Load theme, taking current system APPEARANCE into consideration."
      (mapc #'disable-theme custom-enabled-themes)
      (pcase appearance
        ('light (if (display-graphic-p) (ef-themes-load-random 'light) (ef-themes-load-random 'dark)))
        ('dark (ef-themes-load-random 'dark))))

    ;;(if (eq system-type 'darwin)
        ;; only for emacs-plus
    ;;    (add-hook 'ns-system-appearance-change-functions #'my/apply-theme)
    ;;  (ef-themes-select 'ef-summer)
    ;;  )
    )
#+END_SRC

** doom-themes [deprecated]

[[https://github.com/doomemacs/themes][doom-themes]]

#+begin_src emacs-lisp :tangle no
  (use-package doom-themes
    :ensure t
    :config
    ;; Global settings (defaults)
    (setq doom-themes-enable-bold t    ; if nil, bold is universally disabled
          doom-themes-enable-italic t) ; if nil, italics is universally disabled

    ;; Load theme
    (load-theme 'doom-1337 t)          ; doom-city-lights, doom-gruvbox and doom-1337

    ;; Enable flashing mode-line on errors
    (doom-themes-visual-bell-config)
    ;; Enable custom neotree theme (all-the-icons must be installed!)
    (doom-themes-neotree-config)
    ;; Corrects (and improves) org-mode's native fontification.
    (doom-themes-org-config))
#+end_src

** eshell-git-prompt

[[https://github.com/xuchunyang/eshell-git-prompt/tree/master][eshell-git-prompt]]

#+begin_src emacs-lisp
  (use-package eshell-git-prompt
    :ensure t
    :config
    (eshell-git-prompt-use-theme 'robbyrussell))
#+end_src

** all-the-icons

[[https://github.com/domtronn/all-the-icons.el][all-the-icons]]

Use M-x all-the-icons-install-fonts to install the Resource Fonts.

#+BEGIN_SRC emacs-lisp
(use-package all-the-icons
  :ensure t
  :if (display-graphic-p))
#+END_SRC

** nerd-icons

[[https://github.com/rainstormstudio/nerd-icons.el][nerd-icons.el]]

Use M-x nerd-icons-install-fonts to install Symbols Nerd Fonts Mono.

#+BEGIN_SRC emacs-lisp
  (use-package nerd-icons
    :ensure t
    ;; :custom
    ;; The Nerd Font you want to use in GUI
    ;; "Symbols Nerd Font Mono" is the default and is recommended
    ;; but you can use any other Nerd Font if you want
    ;; (nerd-icons-font-family "Symbols Nerd Font Mono")
    )
#+END_SRC

** fontaine

[[https://protesilaos.com/emacs/fontaine][fontaine]]

Need to download [[https://github.com/laishulu/Sarasa-Mono-SC-Nerd][Sarasa-Mono-SC-Nerd]] and [[https://fonts.google.com/specimen/Source+Code+Pro][Source code Pro]] in advance. 

#+BEGIN_SRC emacs-lisp
(use-package fontaine
  :ensure t
  :when (display-graphic-p)
  ;; :hook (kill-emacs . fontaine-store-latest-preset)
  :config
  (setq fontaine-latest-state-file
        (locate-user-emacs-file "etc/fontaine-latest-state.eld"))
  (setq fontaine-presets
        '((regular
           :default-height 140
           :default-weight regular
           :fixed-pitch-height 1.0
           :variable-pitch-height 1.0
           )
          (large
           :default-height 180
           :default-weight normal
           :fixed-pitch-height 1.0
           :variable-pitch-height 1.05
           )
          (t
           :default-family "Source Code Pro"
           :fixed-pitch-family "Source Code Pro"
           :variable-pitch-family "Source Code Pro"
           :italic-family "Source Code Pro"
           :variable-pitch-weight normal
           :bold-weight normal
           :italic-slant italic
           :line-spacing 0.1)
          ))
  ;; (fontaine-set-preset (or (fontaine-restore-latest-preset) 'regular))
  (fontaine-set-preset 'regular)

  ;; set emoji font
  (set-fontset-font
   t
   (if (version< emacs-version "28.1")
       '(#x1f300 . #x1fad0)
     'emoji)
   (cond
    ((member "Noto Emoji" (font-family-list)) "Noto Emoji")
    ((member "Symbola" (font-family-list)) "Symbola")
    ((member "Apple Color Emoji" (font-family-list)) "Apple Color Emoji")
    ((member "Noto Color Emoji" (font-family-list)) "Noto Color Emoji")
    ((member "Segoe UI Emoji" (font-family-list)) "Segoe UI Emoji")
    ))

  ;; set Chinese font
  (dolist (charset '(kana han symbol cjk-misc bopomofo))
    (set-fontset-font
     (frame-parameter nil 'font)
     charset
     (font-spec :family
                (cond
                 ((eq system-type 'darwin)
                  (cond
                   ((member "Sarasa Mono SC Nerd" (font-family-list)) "Sarasa Mono SC Nerd")
                   ((member "PingFang SC" (font-family-list)) "PingFang SC")
                   ((member "WenQuanYi Zen Hei" (font-family-list)) "WenQuanYi Zen Hei")
                   ((member "Microsoft YaHei" (font-family-list)) "Microsoft YaHei")
                   ))
                 ((eq system-type 'gnu/linux)
                  (cond
                   ((member "Sarasa Mono SC Nerd" (font-family-list)) "Sarasa Mono SC Nerd")
                   ((member "WenQuanYi Micro Hei" (font-family-list)) "WenQuanYi Micro Hei")
                   ((member "WenQuanYi Zen Hei" (font-family-list)) "WenQuanYi Zen Hei")
                   ((member "Microsoft YaHei" (font-family-list)) "Microsoft YaHei")
                   ))
                 (t
                  (cond
                   ((member "Sarasa Mono SC Nerd" (font-family-list)) "Sarasa Mono SC Nerd")
                   ((member "Microsoft YaHei" (font-family-list)) "Microsoft YaHei")
                   )))
                )))

  ;; set Chinese font scale
  (setq face-font-rescale-alist `(
                                  ("Symbola"             . 1.3)
                                  ("Microsoft YaHei"     . 1.2)
                                  ("WenQuanYi Zen Hei"   . 1.2)
                                  ("Sarasa Mono SC Nerd" . 1.2)
                                  ("PingFang SC"         . 1.16)
                                  ("Lantinghei SC"       . 1.16)
                                  ("Kaiti SC"            . 1.16)
                                  ("Yuanti SC"           . 1.16)
                                  ("Apple Color Emoji"   . 0.91)
                                  ))
  )
#+END_SRC

** other config

#+begin_src emacs-lisp
  ;; 禁用一些GUI特性
  (setq use-dialog-box nil)               ; 鼠标操作不使用对话框
  (setq inhibit-default-init t)           ; 不加载 `default' 库
  (setq inhibit-startup-screen t)         ; 不加载启动画面
  (setq inhibit-startup-message t)        ; 不加载启动消息
  (setq inhibit-startup-buffer-menu t)    ; 不显示缓冲区列表

  ;; 全屏启动
  (add-to-list 'default-frame-alist '(fullscreen . maximized))

  ;; 草稿缓冲区默认文字设置
  (setq initial-scratch-message (concat ";; Happy coding, DDOSvoid - Emacs ♥ you!\n\n"))

  ;; 设置缓冲区的文字方向为从左到右
  (setq bidi-paragraph-direction 'left-to-right)
  ;; 禁止使用双向括号算法
  ;; (setq bidi-inhibit-bpa t)

  ;; 设置自动折行宽度为80个字符，默认值为70
  (setq-default fill-column 80)

  ;; 设置大文件阈值为100MB，默认10MB
  (setq large-file-warning-threshold 100000000)

  ;; 以16进制显示字节数
  (setq display-raw-bytes-as-hex t)
  ;; 有输入时禁止 `fontification' 相关的函数钩子，能让滚动更顺滑
  (setq redisplay-skip-fontification-on-input t)

  ;; 禁止响铃
  (setq ring-bell-function 'ignore)

  ;; 禁止闪烁光标
  (blink-cursor-mode -1)

  ;; 在光标处而非鼠标所在位置粘贴
  (setq mouse-yank-at-point t)

  ;; 拷贝粘贴设置
  (setq select-enable-primary nil)        ; 选择文字时不拷贝
  (setq select-enable-clipboard t)        ; 拷贝时使用剪贴板

  ;; 鼠标滚动设置

  ;; (setq scroll-step 2)
  ;; (setq scroll-margin 2)
  ;; (setq hscroll-step 2)
  ;; (setq hscroll-margin 2)
  ;; (setq scroll-conservatively 101)
  ;; (setq scroll-up-aggressively 0.01)
  ;; (setq scroll-down-aggressively 0.01)
  ;; (setq scroll-preserve-screen-position 'always)

  ;; 对于高的行禁止自动垂直滚动
  (setq auto-window-vscroll nil)

  ;; 设置新分屏打开的位置的阈值
  (setq split-width-threshold (assoc-default 'width default-frame-alist))
  (setq split-height-threshold nil)

  ;; TAB键设置，在Emacs里不使用TAB键，所有的TAB默认为4个空格
  (setq-default indent-tabs-mode nil)
  (setq-default tab-width 4)

  ;; yes或no提示设置，通过下面这个函数设置当缓冲区名字匹配到预设的字符串时自动回答yes
  (setq original-y-or-n-p 'y-or-n-p)
  (defalias 'original-y-or-n-p (symbol-function 'y-or-n-p))
  (defun default-yes-sometimes (prompt)
    "automatically say y when buffer name match following string"
    (if (or
         (string-match "has a running process" prompt)
         (string-match "does not exist; create" prompt)
         (string-match "modified; kill anyway" prompt)
         (string-match "Delete buffer using" prompt)
         (string-match "Kill buffer of" prompt)
         (string-match "still connected.  Kill it?" prompt)
         (string-match "Shutdown the client's kernel" prompt)
         (string-match "kill them and exit anyway" prompt)
         (string-match "Revert buffer from file" prompt)
         (string-match "Kill Dired buffer of" prompt)
         (string-match "delete buffer using" prompt)
         (string-match "Kill all pass entry" prompt)
         (string-match "for all cursors" prompt)
         (string-match "Do you want edit the entry" prompt))
        t
      (original-y-or-n-p prompt)))
  (defalias 'yes-or-no-p 'default-yes-sometimes)
  (defalias 'y-or-n-p 'default-yes-sometimes)

  ;; 设置剪贴板历史长度300，默认为60
  (setq kill-ring-max 200)

  ;; 在剪贴板里不存储重复内容
  (setq kill-do-not-save-duplicates t)

  ;; 设置位置记录长度为6，默认为16
  ;; 可以使用 `counsel-mark-ring' or `consult-mark' (C-x j) 来访问光标位置记录
  ;; 使用 C-x C-SPC 执行 `pop-global-mark' 直接跳转到上一个全局位置处
  ;; 使用 C-u C-SPC 跳转到本地位置处
  (setq mark-ring-max 6)
  (setq global-mark-ring-max 6)

  ;; 设置 emacs-lisp 的限制
  (setq max-lisp-eval-depth 10000)        ; 默认值为 800
  (setq max-specpdl-size 10000)           ; 默认值为 1600

  ;; 启用 `list-timers', `list-threads' 这两个命令
  (put 'list-timers 'disabled nil)
  (put 'list-threads 'disabled nil)

  ;; 在命令行里支持鼠标
  (xterm-mouse-mode 1)

  ;; 退出Emacs时进行确认
  (setq confirm-kill-emacs 'y-or-n-p)

  ;; 在模式栏上显示当前光标的列号
  (column-number-mode t)

  ;; 配置所有的编码为UTF-8，参考：
  ;; https://thraxys.wordpress.com/2016/01/13/utf-8-in-emacs-everywhere-forever/
  (setq locale-coding-system 'utf-8)
  (set-terminal-coding-system 'utf-8)
  (set-keyboard-coding-system 'utf-8)
  (set-selection-coding-system 'utf-8)
  (set-default-coding-systems 'utf-8)
  (set-language-environment 'utf-8)
  (set-clipboard-coding-system 'utf-8)
  (set-file-name-coding-system 'utf-8)
  (set-buffer-file-coding-system 'utf-8)
  (prefer-coding-system 'utf-8)
  (modify-coding-system-alist 'process "*" 'utf-8)
  (when (display-graphic-p)
    (setq x-select-request-type '(UTF8_STRING COMPOUND_TEXT TEXT STRING)))
#+end_src

** mode line config
*** doom-modeline

[[https://github.com/seagle0128/doom-modeline][doom-modeline]]

#+BEGIN_SRC emacs-lisp
(use-package doom-modeline
  :ensure t
  :hook (after-init . doom-modeline-mode))
#+END_SRC

*** minions [deprecated]

[[https://github.com/tarsius/minions][minions]]

#+BEGIN_SRC emacs-lisp :tangle no

#+END_SRC 

*** keycast

[[https://github.com/tarsius/keycast][keycast]]

#+BEGIN_SRC emacs-lisp
(use-package keycast
  :ensure t
  :hook (after-init . keycast-mode)
  :config
  ;; set for doom-modeline support
  ;; With the latest change 72d9add, mode-line-keycast needs to be modified to keycast-mode-line.
  (define-minor-mode keycast-mode
    "Show current command and its key binding in the mode line (fix for use with doom-mode-line)."
    :global t
    (if keycast-mode
        (progn
          (add-hook 'pre-command-hook 'keycast--update t)
          (add-to-list 'global-mode-string '("" keycast-mode-line "  ")))
      (remove-hook 'pre-command-hook 'keycast--update)
      (setq global-mode-string (delete '("" keycast-mode-line "  ") global-mode-string))
      ))

  (dolist (input '(self-insert-command
                   org-self-insert-command))
    (add-to-list 'keycast-substitute-alist `(,input "." "Typing...")))

  (dolist (event '(mouse-event-p
                   mouse-movement-p
                   mwheel-scroll))
    (add-to-list 'keycast-substitute-alist `(,event nil)))

  (setq keycast-log-format "%-20K%C\n")
  (setq keycast-log-frame-alist
        '((minibuffer . nil)))
  (setq keycast-log-newest-first t)
  )
#+END_SRC

** init-ui.el footer

#+BEGIN_SRC emacs-lisp

(provide 'init-ui)
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;;; init-ui.el ends here
#+END_SRC

* init-base.el
:PROPERTIES:
:HEADER-ARGS: :tangle lisp/init-base.el :mkdirp yes
:END:

** init-base header

#+BEGIN_SRC emacs-lisp
;;; init-base.el --- Basical settings -*- lexical-binding: t -*-
;;; Commentary:

;;; Code:

#+END_SRC

** no-littering

[[https://github.com/emacscollective/no-littering][no-littering]]

#+begin_src emacs-lisp
(use-package no-littering
  :ensure t)
#+end_src

** savehist

#+BEGIN_SRC emacs-lisp
(use-package savehist
  :ensure nil
  :hook (after-init . savehist-mode)
  :config
  ;; Allow commands in minibuffers, will affect `dired-do-dired-do-find-regexp-and-replace' command:
  (setq enable-recursive-minibuffers t)
  (setq history-length 1000)
  (setq savehist-additional-variables '(mark-ring
                                        global-mark-ring
                                        search-ring
                                        regexp-search-ring
                                        extended-command-history))
  (setq savehist-autosave-interval 300))
#+END_SRC

** saveplace

#+BEGIN_SRC emacs-lisp
(use-package saveplace
  :ensure nil
  :hook (after-init . save-place-mode))
#+END_SRC

** recentf

#+BEGIN_SRC emacs-lisp
(use-package recentf
  :ensure nil
  :defines no-littering-etc-directory no-littering-var-directory
  :hook (after-init . recentf-mode)
  :custom
  (recentf-max-saved-items 300)
  (recentf-auto-cleanup 'never)
  ;; `recentf-add-file' will apply handlers first, then call `string-prefix-p'
  ;; to check if it can be pushed to recentf list.
  (recentf-filename-handlers '(abbreviate-file-name))
  (recentf-exclude `(,@(cl-loop for f in `(,package-user-dir
                                           ,no-littering-var-directory
                                           ,no-littering-etc-directory)
                                collect (abbreviate-file-name f))
                     ;; Folders on MacOS start
                     "^/private/tmp/"
                     "^/var/folders/"
                     ;; Folders on MacOS end
                     ".cache"
                     ".cask"
                     ".elfeed"
                     "elfeed"
                     "bookmarks"
                     "cache"
                     "ido.*"
                     "persp-confs"
                     "recentf"
                     "undo-tree-hist"
                     "url"
                     "^/tmp/"
                     "/ssh\\(x\\)?:"
                     "/su\\(do\\)?:"
                     "^/usr/include/"
                     "/TAGS\\'"
                     "COMMIT_EDITMSG\\'")))
#+END_SRC

** undo-tree [deprecated]

[[https://www.dr-qubit.org/undo-tree.html][undo-tree]]

#+begin_src emacs-lisp :tangle no
  (use-package undo-tree
    :ensure t
    :hook (after-init . global-undo-tree-mode)
    :config
    ;; don't save undo history to local files
    (setq undo-tree-auto-save-history nil))
#+end_src

** crux

[[https://github.com/bbatsov/crux][crux]]

#+begin_src emacs-lisp
  (use-package crux
    :ensure t
    :bind (("C-a" . crux-move-beginning-of-line)
           ("C-k" . crux-smart-kill-line)
           ("C-c r" . crux-rename-file-and-buffer)
           ("C-x DEL" . crux-kill-line-backwards))
    :config
    (crux-with-region-or-buffer indent-region)
    (crux-with-region-or-point-to-eol kill-ring-save)
    (defalias 'rename-file-and-buffer #'crux-rename-file-and-buffer))
#+end_src

** rime
Common usage:
+ ~rime-deploy~: Deploy Rime.
+ ~rime-select-schema~: Select Rime schema.
+ ~rime-open-schema~: Open Rime SCHEMA file.
+ ~rime-open-configuration~: Open Rime Configuration file.
  
Reference:
+ [[https://github.com/DogLooksGood/emacs-rime][DogLooksGood/emacs-rime: RIME ㄓ in Emacs]]
+ [[https://emacs-china.org/t/rime-emacs/23369][rime/鼠须管里已经设成简体，但emacs里打字还是繁体 - Emacs-general - Emacs China]]
+ [[https://manateelazycat.github.io/2020/03/22/emacs-rime/][折腾 emacs-rime]]

#+begin_src emacs-lisp
  (use-package rime
    :ensure t
    :custom
    (default-input-method "rime")
    (rime-show-candidate 'posframe))
#+end_src

** init-base footer

#+BEGIN_SRC emacs-lisp

(provide 'init-base)
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;;; init-base.el ends here
#+END_SRC

* init-edit.el
:PROPERTIES:
:HEADER-ARGS: :tangle lisp/init-edit.el :mkdirp yes
:END:

** init-edit.el header

#+BEGIN_SRC emacs-lisp
;;; init-edit.el --- Editing settings -*- lexical-binding: t -*-
;;; Commentary:

;;; Code:

#+END_SRC

** backup config

#+BEGIN_SRC emacs-lisp
;; 不自动备份
(setq make-backup-files nil)
;; 不使用Emacs自带的自动保存
(setq auto-save-default nil)
#+END_SRC

** pixel-scroll-precision-mode

#+begin_src emacs-lisp
  (pixel-scroll-precision-mode t)
#+end_src

** delsel

Emacs默认选择文本后直接输入，是不会直接删除所选择的文本进行替换的。通过内置的 =delsel= 插件来实现这个行为。

#+begin_src emacs-lisp
;; Directly modify when selecting text
(use-package delsel
  :ensure nil
  :hook (after-init . delete-selection-mode))
#+end_src 

** autorevert

当我们的文件发生了改变后，我们希望Emacs里打开的永远是最新的文件，这个时候，我们需要对自动重载进行设置，让我们的Emacs在文件发生改变的时候自动重载文件。

#+begin_src emacs-lisp
(use-package autorevert
  :ensure nil
  :hook (after-init . global-auto-revert-mode)
  :bind ("s-u" . revert-buffer)
  :custom
  (auto-revert-interval 10)
  (auto-revert-avoid-polling t)
  (auto-revert-verbose nil)
  (auto-revert-remote-files t)
  (auto-revert-check-vc-info t)
  (global-auto-revert-non-file-buffers t))
#+end_src

** avy
Reference:
+ [[https://github.com/abo-abo/avy][GitHub - abo-abo/avy: Jump to things in Emacs tree-style]]
+ [[https://karthinks.com/software/avy-can-do-anything/][Avy can do anything | Karthinks]]

#+begin_src emacs-lisp
  (use-package avy
    :ensure t
    :bind (("C-." . avy-goto-char-timer)
           :map isearch-mode-map
           ("C-." . avy-isearch))
    :config
    ;; Make `avy-goto-char-timer' support pinyin, refer to:
    ;; https://emacs-china.org/t/avy-avy-goto-char-timer/20900/2
    (defun my/avy-goto-char-timer (&optional arg)
      "Make avy-goto-char-timer support pinyin"
      (interactive "P")
      (let ((avy-all-windows (if arg
                                 (not avy-all-windows)
                               avy-all-windows)))
        (avy-with avy-goto-char-timer
          (setq avy--old-cands (avy--read-candidates
                                'pinyinlib-build-regexp-string))
          (avy-process avy--old-cands))))

    (defun avy-action-kill-whole-line (pt)
      "avy action: kill the whole line where avy selection is"
      (save-excursion
        (goto-char pt)
        (kill-whole-line))
      (select-window
       (cdr
        (ring-ref avy-ring 0)))
      t)

    (defun avy-action-copy-whole-line (pt)
      "avy action: copy the whole line where avy selection is"
      (save-excursion
        (goto-char pt)
        (cl-destructuring-bind (start . end)
            (bounds-of-thing-at-point 'line)
          (copy-region-as-kill start end)))
      (select-window
       (cdr
        (ring-ref avy-ring 0)))
      t)

    (defun avy-action-yank-whole-line (pt)
      "avy action: copy the line where avy selection is and paste to current point"
      (avy-action-copy-whole-line pt)
      (save-excursion (yank))
      t)

    (defun avy-action-teleport-whole-line (pt)
      "avy action: kill the line where avy selection is and paste to current point"
      (avy-action-kill-whole-line pt)
      (save-excursion (yank)) t)

    (defun avy-action-helpful (pt)
      "avy action: get helpful information at point"
      (save-excursion
        (goto-char pt)
        (helpful-at-point))
      t)

    (defun avy-action-mark-to-char (pt)
      "avy action: mark from current point to avy selection"
      (activate-mark)
      (goto-char pt))

    (defun avy-action-flyspell (pt)
      "avy action: flyspell the word where avy selection is"
      (save-excursion
        (goto-char pt)
        (when (require 'flyspell nil t)
          (flyspell-correct-wrapper))))

    (defun avy-action-define (pt)
      "avy action: define the word in dictionary where avy selection is"
      (save-excursion
        (goto-char pt)
        (fanyi-dwim2)))

    (defun avy-action-embark (pt)
      "avy action: embark where avy selection is"
      (unwind-protect
          (save-excursion
            (goto-char pt)
            (embark-act))
        (select-window
         (cdr (ring-ref avy-ring 0))))
      t)

    (defun avy-action-google (pt)
      "avy action: google the avy selection when it is a word or browse it when it is a link"
      (save-excursion
        (goto-char pt)
        (my/search-or-browse)))

    (setf (alist-get ?k avy-dispatch-alist) 'avy-action-kill-stay
          (alist-get ?K avy-dispatch-alist) 'avy-action-kill-whole-line
          (alist-get ?w avy-dispatch-alist) 'avy-action-copy
          (alist-get ?W avy-dispatch-alist) 'avy-action-copy-whole-line
          (alist-get ?y avy-dispatch-alist) 'avy-action-yank
          (alist-get ?Y avy-dispatch-alist) 'avy-action-yank-whole-line
          (alist-get ?t avy-dispatch-alist) 'avy-action-teleport
          (alist-get ?T avy-dispatch-alist) 'avy-action-teleport-whole-line
          (alist-get ?H avy-dispatch-alist) 'avy-action-helpful
          (alist-get ?  avy-dispatch-alist) 'avy-action-mark-to-char
          (alist-get ?\; avy-dispatch-alist) 'avy-action-flyspell
          (alist-get ?= avy-dispatch-alist) 'avy-action-define
          (alist-get ?o avy-dispatch-alist) 'avy-action-embark
          (alist-get ?G avy-dispatch-alist) 'avy-action-google
          )

    :custom
    (avy-timeout-seconds 0.5)
    (avy-all-windows t)
    (avy-background t)
    (avy-keys '(?a ?s ?d ?f ?g ?h ?j ?l ?q ?e ?r ?u ?i ?p ?n))
    )
#+end_src

** symbol-overlay
Reference:
+ [[https://github.com/wolray/symbol-overlay][wolray/symbol-overlay: Highlight symbols with keymap-enabled overlays]]

| Key | Command                      |
| i   | symbol-overlay-put           |
| n   | symbol-overlay-jump-next     |
| p   | symbol-overlay-jump-prev     |
| q   | symbol-overlay-query-replace |
| r   | symbol-overlay-rename        |

#+begin_src emacs-lisp
  (use-package symbol-overlay
    :ensure t
    :init
    (global-set-key (kbd "M-i") 'symbol-overlay-put)
    (global-set-key (kbd "M-n") 'symbol-overlay-switch-forward)
    (global-set-key (kbd "M-p") 'symbol-overlay-switch-backward)
    (global-set-key (kbd "<f7>") 'symbol-overlay-mode)
    (global-set-key (kbd "<f8>") 'symbol-overlay-remove-all))
#+end_src

** thing-edit
Reference: [[https://github.com/manateelazycat/thing-edit][GitHub - manateelazycat/thing-edit: Copy and paste anything under cursor.]]

#+begin_src emacs-lisp
  (use-package thing-edit
    :ensure t
    :quelpa (thing-edit :fetcher github :repo "manateelazycat/thing-edit"))
#+end_src

** init-edit.el footer

#+BEGIN_SRC emacs-lisp
(provide 'init-edit)
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;;; init-edit.el ends here
#+END_SRC

* init-org.el
:PROPERTIES:
:HEADER-ARGS: :tangle lisp/init-org.el :mkdirp yes
:END:
** init-org.el header

#+BEGIN_SRC emacs-lisp
;;; init-org.el --- Org mode settings -*- lexical-binding: t -*-
;;; Commentary:

;;; Code:

#+END_SRC

** org-mode config

#+BEGIN_SRC emacs-lisp
  (use-package org
    :ensure nil
    :mode ("\\.org\\'" . org-mode)
    :hook ((org-mode . visual-line-mode))
    :commands (org-find-exact-headline-in-buffer org-set-tags)
    :custom-face
    ;; 设置Org mode标题以及每级标题行的大小
    (org-document-title ((t (:height 1.75 :weight bold))))
    (org-level-1 ((t (:height 1.2 :weight bold))))
    (org-level-2 ((t (:height 1.15 :weight bold))))
    (org-level-3 ((t (:height 1.1 :weight bold))))
    (org-level-4 ((t (:height 1.05 :weight bold))))
    (org-level-5 ((t (:height 1.0 :weight bold))))
    (org-level-6 ((t (:height 1.0 :weight bold))))
    (org-level-7 ((t (:height 1.0 :weight bold))))
    (org-level-8 ((t (:height 1.0 :weight bold))))
    (org-level-9 ((t (:height 1.0 :weight bold))))
    ;; 设置代码块用上下边线包裹
    ;; (org-block-begin-line ((t (:underline t :background unspecified))))
    ;; (org-block-end-line ((t (:overline t :underline nil :background unspecified))))
    :config
    ;; 提升latex预览的图片清晰度
    (plist-put org-format-latex-options :scale 1.8)

    ;; 设置标题行之间总是有空格；列表之间根据情况自动加空格
    (setq org-blank-before-new-entry '((heading . t)
                                       (plain-list-item . auto)
                                       ))
    ;; 
    (setq org-startup-indented t) 

    ;; ======================================
    ;; 设置打开Org links的程序
    ;; ======================================
    (defun my-func/open-and-play-gif-image (file &optional link)
      "Open and play GIF image `FILE' in Emacs buffer.

  Optional for Org-mode file: `LINK'."
      (let ((gif-image (create-image file))
            (tmp-buf (get-buffer-create "*Org-mode GIF image animation*")))
        (switch-to-buffer tmp-buf)
        (erase-buffer)
        (insert-image gif-image)
        (image-animate gif-image nil t)
        (local-set-key (kbd "q") 'bury-buffer)
        ))
    (setq org-file-apps '(("\\.png\\'"     . default)
                          (auto-mode       . emacs)
                          (directory       . emacs)
                          ("\\.mm\\'"      . default)
                          ("\\.x?html?\\'" . default)
                          ("\\.pdf\\'"     . emacs)
                          ("\\.md\\'"      . emacs)
                          ("\\.gif\\'"     . my-func/open-and-play-gif-image)
                          ("\\.xlsx\\'"    . default)
                          ("\\.svg\\'"     . default)
                          ("\\.pptx\\'"    . default)
                          ("\\.docx\\'"    . default)))

    :custom
    ;; 设置Org mode的目录
    (org-directory "~/org")
    ;; 设置笔记的默认存储位置
    (org-default-notes-file (expand-file-name "capture.org" org-directory))
    ;; 启用一些子模块
    (org-modules '(ol-bibtex ol-gnus ol-info ol-eww org-habit org-protocol))
    ;; 在按M-RET时，是否根据光标所在的位置分行，这里设置为是
    ;; (org-M-RET-may-split-line '((default . nil)))
    ;; 一些Org mode自带的美化设置
    ;; 标题行美化
    (org-fontify-whole-heading-line t)
    ;; 设置标题行折叠符号
    (org-ellipsis " ▾")
    ;; 在活动区域内的所有标题栏执行某些命令
    (org-loop-over-headlines-in-active-region t)
    ;; TODO标签美化
    (org-fontify-todo-headline t)
    ;; DONE标签美化
    (org-fontify-done-headline t)
    ;; 引用块美化
    (org-fontify-quote-and-verse-blocks t)
    ;; 隐藏宏标记
    (org-hide-macro-markers t)
    ;; 隐藏强调标签
    (org-hide-emphasis-markers t)
    ;; 高亮latex语法
    (org-highlight-latex-and-related '(native script entities))
    ;; 以UTF-8显示
    (org-pretty-entities t)
    ;; 是否隐藏标题栏的前置星号，这里我们通过org-modern来隐藏
    ;; (org-hide-leading-stars t)
    ;; 当启用缩进模式时自动隐藏前置星号
    (org-indent-mode-turns-on-hiding-stars t)
    ;; 自动启用缩进
    (org-startup-indented nil)
    ;; 根据标题栏自动缩进文本
    (org-adapt-indentation nil)
    ;; 自动显示图片
    (org-startup-with-inline-images t)
    ;; 默认以Overview的模式展示标题行
    (org-startup-folded 'overview)
    ;; 允许字母列表
    (org-list-allow-alphabetical t)
    ;; 列表的下一级设置
    (org-list-demote-modify-bullet '(
                                     ("-"  . "+")
                                     ("+"  . "1.")
                                     ("1." . "a.")
                                     ))
    ;; 编辑时检查是否在折叠的不可见区域
    (org-fold-catch-invisible-edits 'smart)
    ;; 在当前位置插入新标题行还是在当前标题行后插入，这里设置为当前位置
    (org-insert-heading-respect-content nil)
    ;; 设置图片的最大宽度，如果有imagemagick支持将会改变图片实际宽度
    ;; 四种设置方法：(1080), 1080, t, nil
    (org-image-actual-width nil)
    ;; imenu的最大深度，默认为2
    (org-imenu-depth 4)
    ;; 回车要不要触发链接，这里设置不触发
    (org-return-follows-link nil)
    ;; 上标^下标_是否需要特殊字符包裹，这里设置需要用大括号包裹
    (org-use-sub-superscripts '{})
    ;; 复制粘贴标题行的时候删除id
    (org-clone-delete-id t)
    ;; 粘贴时调整标题行的级别
    (org-yank-adjusted-subtrees t)

    ;; TOOD的关键词设置，可以设置不同的组
    (org-todo-keywords '((sequence "TODO(t)" "HOLD(h!)" "WIP(i!)" "WAIT(w!)" "|" "DONE(d!)" "CANCELLED(c@/!)")
                         (sequence "REPORT(r)" "BUG(b)" "KNOWNCAUSE(k)" "|" "FIXED(f!)")))
    ;; TODO关键词的样式设置
    (org-todo-keyword-faces '(("TODO"       :foreground "#7c7c75" :weight bold)
                              ("HOLD"       :foreground "#feb24c" :weight bold)
                              ("WIP"        :foreground "#0098dd" :weight bold)
                              ("WAIT"       :foreground "#9f7efe" :weight bold)
                              ("DONE"       :foreground "#50a14f" :weight bold)
                              ("CANCELLED"  :foreground "#ff6480" :weight bold)
                              ("REPORT"     :foreground "magenta" :weight bold)
                              ("BUG"        :foreground "red"     :weight bold)
                              ("KNOWNCAUSE" :foreground "yellow"  :weight bold)
                              ("FIXED"      :foreground "green"   :weight bold)))
    ;; 当标题行状态变化时标签同步发生的变化
    ;; Moving a task to CANCELLED adds a CANCELLED tag
    ;; Moving a task to WAIT adds a WAIT tag
    ;; Moving a task to HOLD adds WAIT and HOLD tags
    ;; Moving a task to a done state removes WAIT and HOLD tags
    ;; Moving a task to TODO removes WAIT, CANCELLED, and HOLD tags
    ;; Moving a task to DONE removes WAIT, CANCELLED, and HOLD tags
    (org-todo-state-tags-triggers
     (quote (("CANCELLED" ("CANCELLED" . t))
             ("WAIT" ("WAIT" . t))
             ("HOLD" ("WAIT") ("HOLD" . t))
             (done ("WAIT") ("HOLD"))
             ("TODO" ("WAIT") ("CANCELLED") ("HOLD"))
             ("DONE" ("WAIT") ("CANCELLED") ("HOLD")))))
    ;; 使用专家模式选择标题栏状态
    (org-use-fast-todo-selection 'expert)
    ;; 父子标题栏状态有依赖
    (org-enforce-todo-dependencies t)
    ;; 标题栏和任务复选框有依赖
    (org-enforce-todo-checkbox-dependencies t)
    ;; 优先级样式设置
    (org-priority-faces '((?A :foreground "red")
                          (?B :foreground "orange")
                          (?C :foreground "yellow")))
    ;; 标题行全局属性设置
    (org-global-properties '(("EFFORT_ALL" . "0:15 0:30 0:45 1:00 2:00 3:00 4:00 5:00 6:00 7:00 8:00")
                             ("APPT_WARNTIME_ALL" . "0 5 10 15 20 25 30 45 60")
                             ("RISK_ALL" . "Low Medium High")
                             ("STYLE_ALL" . "habit")))
    ;; Org columns的默认格式
    (org-columns-default-format "%25ITEM %TODO %SCHEDULED %DEADLINE %3PRIORITY %TAGS %CLOCKSUM %EFFORT{:}")
    ;; 当状态从DONE改成其他状态时，移除 CLOSED: [timestamp]
    (org-closed-keep-when-no-todo t)
    ;; DONE时加上时间戳
    (org-log-done 'time)
    ;; 重复执行时加上时间戳
    (org-log-repeat 'time)
    ;; Deadline修改时加上一条记录
    (org-log-redeadline 'note)
    ;; Schedule修改时加上一条记录
    (org-log-reschedule 'note)
    ;; 以抽屉的方式记录
    (org-log-into-drawer t)
    ;; 紧接着标题行或者计划/截止时间戳后加上记录抽屉
    (org-log-state-notes-insert-after-drawers nil)

    ;; refile使用缓存
    (org-refile-use-cache t)
    ;; refile的目的地，这里设置的是agenda文件的所有标题
    (org-refile-targets '((org-agenda-files . (:maxlevel . 9))))
    ;; 将文件名加入到路径
    (org-refile-use-outline-path 'file)
    ;; 是否按步骤refile
    (org-outline-path-complete-in-steps nil)
    ;; 允许创建新的标题行，但需要确认
    (org-refile-allow-creating-parent-nodes 'confirm)

    ;; 设置标签的默认位置，默认是第77列右对齐
    ;; (org-tags-column -77)
    ;; 自动对齐标签
    (org-auto-align-tags t)
    ;; 标签不继承
    (org-use-tag-inheritance nil)
    ;; 在日程视图的标签不继承
    (org-agenda-use-tag-inheritance nil)
    ;; 标签快速选择
    (org-use-fast-tag-selection t)
    ;; 标签选择不需要回车确认
    (org-fast-tag-selection-single-key t)
    ;; 定义了有序属性的标题行也加上 OREDERD 标签
    (org-track-ordered-property-with-tag t)
    ;; 始终存在的的标签
    (org-tag-persistent-alist '(("read"     . ?r)
                                ("mail"     . ?m)
                                ("emacs"    . ?e)
                                ("study"    . ?s)
                                ("work"     . ?w)))
    ;; 预定义好的标签
    (org-tag-alist '((:startgroup)
                     ("crypt"    . ?c)
                     ("linux"    . ?l)
                     ("apple"    . ?a)
                     ("noexport" . ?n)
                     ("ignore"   . ?i)
                     ("TOC"      . ?t)
                     (:endgroup)))

    ;; 归档设置
    (org-archive-location "%s_archive::datetree/")
    )
#+END_SRC 

** org-modern

[[https://github.com/minad/org-modern][org-modern]]

#+BEGIN_SRC emacs-lisp
(use-package org-modern
  :ensure t
  :hook (after-init . (lambda ()
                        (setq org-modern-hide-stars 'leading)
                        (global-org-modern-mode t)))
  :config
  ;; 标题行型号字符
  (setq org-modern-star ["◉" "○" "✸" "✳" "◈" "◇" "✿" "❀" "✜"])
  ;; 额外的行间距，0.1表示10%，1表示1px
  (setq-default line-spacing 0.1)
  ;; tag边框宽度，还可以设置为 `auto' 即自动计算
  (setq org-modern-label-border 1)
  ;; 设置表格竖线宽度，默认为3
  (setq org-modern-table-vertical 2)
  ;; 设置表格横线为0，默认为0.1
  (setq org-modern-table-horizontal 0)
  ;; 复选框美化
  (setq org-modern-checkbox
        '((?X . #("▢✓" 0 2 (composition ((2)))))
          (?- . #("▢–" 0 2 (composition ((2)))))
          (?\s . #("▢" 0 1 (composition ((1)))))))
  ;; 列表符号美化
  (setq org-modern-list
        '((?- . "•")
          (?+ . "◦")
          (?* . "▹")))
  ;; 代码块左边加上一条竖边线（需要Org mode顶头，如果启用了 `visual-fill-column-mode' 会很难看）
  (setq org-modern-block-fringe t)
  ;; 代码块类型美化，我们使用了 `prettify-symbols-mode'
  (setq org-modern-block-name nil)
  ;; #+关键字美化，我们使用了 `prettify-symbols-mode'
  (setq org-modern-keyword nil)
  )
#+END_SRC 

** org-appear

[[https://github.com/awth13/org-appear][org-appear]]

#+BEGIN_SRC emacs-lisp
(use-package org-appear
  :ensure t
  :hook (org-mode . org-appear-mode)
  :config
  (setq org-appear-autolinks t)
  (setq org-appear-autosubmarkers t)
  (setq org-appear-autoentities t)
  (setq org-appear-autokeywords t)
  (setq org-appear-inside-latex t)
  )
#+END_SRC

** org-capture

See this blog for more information about org-capture. [[https://www.zmonster.me/2018/02/28/org-mode-capture.html#org1a3d856][强大的 Org mode(4): 使用 capture 功能快速记录]]

#+BEGIN_SRC emacs-lisp
(use-package org-capture
  :ensure nil
  :bind ("\e\e c" . (lambda () (interactive) (org-capture)))
  :hook ((org-capture-mode . (lambda ()
                               (setq-local org-complete-tags-always-offer-all-agenda-tags t)))
         (org-capture-mode . delete-other-windows))
  :custom
  (org-capture-use-agenda-date nil)
  ;; define common template
  (org-capture-templates `(("t" "Tasks" entry (file+headline "tasks.org" "Reminders")
                            "* TODO %i%?"
                            :empty-lines-after 1
                            :prepend t)))
  )
#+END_SRC

** denote

[[https://protesilaos.com/emacs/denote][denote]]

#+BEGIN_SRC emacs-lisp
  (use-package denote
    :ensure t
    :hook (dired-mode . denote-dired-mode-in-directories)
    :bind (("C-c d n" . denote)
           ("C-c d d" . denote-date)
           ("C-c d t" . denote-type)
           ("C-c d s" . denote-subdirectory)
           ("C-c d f" . denote-open-or-create)
           ("C-c d r" . denote-dired-rename-file))
    :init
    (with-eval-after-load 'org-capture
      (setq denote-org-capture-specifiers "%l\n%i\n%?")
      (add-to-list 'org-capture-templates
                   '("N" "New note (with denote.el)" plain
                     (file denote-last-path)
                     #'denote-org-capture
                     :no-save t
                     :immediate-finish nil
                     :kill-buffer t
                     :jump-to-captured t)))
    :config
    (setq denote-directory (expand-file-name "~/org/"))
    (setq denote-known-keywords '("emacs" "cpp" "linux" "commom" "cheatsheet" "finance"))
    (setq denote-infer-keywords t)
    (setq denote-sort-keywords t)
    ;; org is default, set others such as text, markdown-yaml, markdown-toml
    (setq denote-file-type nil)
    (setq denote-prompts '(title keywords))

    ;; We allow multi-word keywords by default.  The author's personal
    ;; preference is for single-word keywords for a more rigid workflow.
    (setq denote-allow-multi-word-keywords t)
    (setq denote-date-format nil)

    ;; DEPRECATED
    ;; If you use Markdown or plain text files (Org renders links as buttons
    ;; right away)
    ;; (add-hook 'find-file-hook #'denote-link-buttonize-buffer)
    ;; (setq denote-dired-rename-expert nil)
    ;; OR if only want it in `denote-dired-directories':
    ;; (add-hook 'dired-mode-hook #'denote-dired-mode-in-directories)
    )
#+END_SRC

** consult-notes

[[https://github.com/mclear-tools/consult-notes][consult-notes]]

#+begin_src emacs-lisp
  (use-package consult-notes
    :ensure t
    :commands (consult-notes
               consult-notes-search-in-all-notes)
    :bind (("C-c n f" . consult-notes)
           ("C-c n c" . consult-notes-search-in-all-notes))
    :config
    (setq consult-notes-file-dir-sources
          `(("org"     ?o ,(concat org-directory "/"))))

    ;; embark support
    (with-eval-after-load 'embark
      (defun consult-notes-open-dired (cand)
        "Open notes directory dired with point on file CAND."
        (interactive "fNote: ")
        ;; dired-jump is in dired-x.el but is moved to dired in Emacs 28
        (dired-jump nil cand))

      (defun consult-notes-marked (cand)
        "Open a notes file CAND in Marked 2.
  Marked 2 is a mac app that renders markdown."
        (interactive "fNote: ")
        (call-process-shell-command (format "open -a \"Marked 2\" \"%s\"" (expand-file-name cand))))

      (defun consult-notes-grep (cand)
        "Run grep in directory of notes file CAND."
        (interactive "fNote: ")
        (consult-grep (file-name-directory cand)))

      (embark-define-keymap consult-notes-map
                            "Keymap for Embark notes actions."
                            :parent embark-file-map
                            ("d" consult-notes-dired)
                            ("g" consult-notes-grep)
                            ("m" consult-notes-marked))

      (add-to-list 'embark-keymap-alist `(,consult-notes-category . consult-notes-map))

      ;; make embark-export use dired for notes
      (setf (alist-get consult-notes-category embark-exporters-alist) #'embark-export-dired)
      )
    )
#+end_src

** auctex [deprecated]

[[https://www.gnu.org/software/auctex/][AUCTeX - Sophisticated document creation]]

#+begin_src elisp :tangle no
  (use-package auctex
    :ensure t)
#+end_src

** init-org.el footer
   
#+BEGIN_SRC emacs-lisp

(provide 'init-org)
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;;; init-org.el ends here
#+END_SRC
 
* init-dev.el
:PROPERTIES:
:HEADER-ARGS: :tangle lisp/init-dev.el :mkdirp yes
:END:

** init-dev header

#+begin_src emacs-lisp
  ;;; init-dev.el --- Development settings -*- lexical-binding: t -*-
  ;;; Commentary:

  ;;; Code:
#+end_src

** eshell

#+begin_src emacs-lisp :tangle no
  (use-package eshell
    :ensure nil
    :config
    (setenv "http_proxy" "http://172.26.0.1:7890")
    (setenv "https_proxy" "https://172.26.0.1:7890"))
#+end_src

** with-proxy
Reference:
+ [[https://github.com/twlz0ne/with-proxy.el][twlz0ne/with-proxy.el: Evaluate expressions with proxy]]

#+begin_src emacs-lisp
  (use-package with-proxy
    :ensure t)

  (defun ddosvoid/proxy-around (&rest args)
    "Wrap a function with proxy configuration"
    (with-proxy
     :http-server "172.26.0.1:7890"
     (apply args)))

  (defun ddosvoid/run-eshell-with-proxy ()
      "Run eshell with proxy"
    (interactive)
    (ddosvoid/proxy-around (eshell)))
#+end_src

** magit

#+begin_src emacs-lisp
  (use-package magit
    :ensure t
    :hook (git-commit-mode . flyspell-mode)
    :bind (("C-x g"   . magit-status)
           ("C-x M-g" . magit-dispatch)
           ("C-c M-g" . magit-file-dispatch))
    :custom
    (magit-diff-refine-hunk t)
    (magit-ediff-dwim-show-on-hunks t))
#+end_src

** projectile
[[https://docs.projectile.mx/projectile/index.html][projectile]]

#+begin_src emacs-lisp
  (use-package projectile
    :ensure t
    :init
    (projectile-mode +1)
    :bind (:map projectile-mode-map
                ("C-c p" . projectile-command-map))
    :config
    (setq projectile-track-known-projects-automatically nil))
#+end_src

** lsp-mode [deprecated]

[[https://emacs-lsp.github.io/lsp-mode/][lsp-mode]]

#+begin_src emacs-lisp :tangle no
  (use-package lsp-mode
    :ensure t
    :init
    ;; set prefix for lsp-command-keymap (few alternatives - "C-l", "C-c l")
    (setq lsp-keymap-prefix "C-c l")
    :hook ((c++-mode . lsp))
    :commands lsp)


#+end_src

** eglot

[[https://github.com/joaotavora/eglot][eglot]]

#+begin_src emacs-lisp
  (use-package eglot
    :ensure nil
    :hook (c++-mode . eglot-ensure))
#+end_src

** eglot-booster [disabled for now]
Reference:
+ [[https://github.com/jdtsmith/eglot-booster][jdtsmith/eglot-booster: Boost eglot using lsp-booster]]

#+begin_src emacs-lisp :tangle no
  (use-package eglot-booster
    :ensure t
    :after eglot
    :quelpa (eglot-booster :fetcher github :repo "jdtsmith/eglot-booster")
    :config (eglot-booster-mode))
#+end_src

** lsp-bridge [disabled for now]
Reference:
+ [[https://github.com/manateelazycat/lsp-bridge][manateelazycat/lsp-bridge: A blazingly fast LSP client for Emacs]]

#+begin_src emacs-lisp :tangle no
  (use-package lsp-bridge
    :ensure t
    :after ('yasnippet 'markdown-mode)
    :quelpa
    (lsp-bridge
     :fetcher github
     :repo "manateelazycat/lsp-bridge"
     :files (:defaults "*.el" "*.py" "acm" "core" "langserver" "multiserver" "resources"))
    :init (global-lsp-bridge-mode))
#+end_src

** company-mode

#+begin_src emacs-lisp
  (use-package company
    :ensure t
    :hook (c++-mode . company-mode)
    :init
    (setq company-tooltip-align-annotations t)
    (setq company-idle-delay 0.0)
    (setq company-show-numbers t) ; 给选项编号 (按快捷键 M-1、M-2 等等来进行选择).
    (setq company-minimum-prefix-length 1)) ; 只需敲 1 个字母就开始进行自动补全
#+end_src

** racket-mode [deprecated]

#+begin_src emacs-lisp :tangle no
  (use-package racket-mode
    :ensure t)
#+end_src

** cc-mode

#+begin_src emacs-lisp 
  (use-package cc-mode
    :ensure nil
    :mode (("\\.cpp\\'" . c++-mode)
           ("\\.h\\'" . c++-mode))
    :custom
    (c-basic-offset 2)
    (c-offsets-alist '(;; a multi-line C style block comment
                       ;;
                       ;; /**
                       ;;  * text
                       ;;  */
                       ;; int foo();
                       (c                     . c-lineup-C-comments)
                       ;; a multi-line string
                       ;;
                       ;; const char* s = "hello,\
                       ;; world";
                       (string                . c-lineup-dont-change)
                       ;; brace of function
                       ;;
                       ;; int add1(int x) {
                       ;;   return ++x;
                       ;; }
                       (defun-open            . 0)
                       (defun-close           . 0)
                       (defun-block-intro     . +)
                       ;; brace of class
                       ;;
                       ;; class Foo {
                       ;;  public:                                 // <- access-label
                       ;; };
                       (class-open            . 0)
                       (class-close           . 0)
                       (access-label          . /)
                       ;; brace of class method
                       ;;
                       ;; class Foo {
                       ;;   friend class Bar;                   // <- friend
                       ;;   int getVar() {                      // <- inclass
                       ;;       return 42;
                       ;;   }
                       ;; };
                       (inline-open           . 0)
                       (inline-close          . 0)
                       (inclass               . +)
                       (friend                . 0)
                       ;; `noexcept' specifier indentation
                       (func-decl-cont        . +)
                       ;; brace of list
                       ;;
                       ;; int nums[] =
                       ;; {
                       ;;   0,
                       ;;   1,
                       ;;   {2},
                       ;; };
                       (brace-list-open       . 0)
                       (brace-list-close      . 0)
                       (brace-list-intro      . +)
                       (brace-list-entry      . 0)
                       (brace-entry-open      . 0)
                       ;; brace of namespace
                       ;;
                       ;; namespace ns {
                       ;; const int var = 42;
                       ;; }
                       (namespace-open        . 0)
                       (namespace-close       . 0)
                       (innamespace           . 0)
                       ;; brace of statement block
                       ;;
                       ;; int send_mail() {
                       ;;   std::mutex io_mtx;
                       ;;   {
                       ;;       std::lock_guard<std::mutex> lk(io_mtx);
                       ;;       // ...
                       ;;   }
                       ;; }
                       (block-open            . 0)
                       (block-close           . 0)
                       ;; topmost definition
                       ;;
                       ;; struct
                       ;; foo {};
                       (topmost-intro         . 0)
                       (topmost-intro-cont    . c-lineup-topmost-intro-cont)
                       ;; class member initialization list
                       ;;
                       ;; struct foo {
                       ;;   foo(int a, int b) :
                       ;;       a_(a),
                       ;;       b_(b) {}
                       ;; };
                       (member-init-intro     . +)
                       (member-init-cont      . c-lineup-multi-inher)
                       ;; class inheritance
                       ;;
                       ;; struct Derived : public Base1,
                       ;;                  public Base2 {
                       ;; };
                       (inher-intro           . +)
                       (inher-cont            . c-lineup-multi-inher)
                       ;; A C statement
                       ;;
                       ;; int main(int argc, char* argv[]) {
                       ;;   const int var1 = 42;
                       ;;   const int var2 = (argc > 1) ? 314   // <- a new statement starts
                       ;;                               : 512;  // <- statement-cont
                       ;;   {
                       ;;       const int var3 = 42;            // <- statement-block-intro
                       ;;   }
                       ;;
                       ;;   switch (argc) {
                       ;;     case 0:                           // <- case-label
                       ;;       break;                          // <- statement-case-intro
                       ;;
                       ;;     case 1:
                       ;;       {                               // <- statement-case-open
                       ;;           const int tmp = 101;
                       ;;       }
                       ;;       break;
                       ;;   }
                       ;;
                       ;;   if (argc == 1)
                       ;;       assert(argc == 1);              // <- substatement
                       ;;
                       ;;   if (argc == 1)
                       ;;   {                                   // <- substatement-open
                       ;;       assert(argc == 1);
                       ;;   }
                       ;;
                       ;;   // comments                         // <- comment-intro
                       ;;   if (argc == 1)
                       ;;   glabel:                             // <- substatement-label
                       ;;       assert(argc == 1);
                       ;;
                       ;; error:                                  // <- label, with zero `c-label-minimum-indentation'
                       ;;   return -1;
                       ;; }
                       (statement             . 0)
                       (statement-cont        . (c-lineup-ternary-bodies +))
                       (statement-block-intro . +)
                       (statement-case-intro  . +)
                       (statement-case-open   . +)
                       (substatement          . +)
                       (substatement-open     . 0)
                       (substatement-label    . 0)
                       (case-label            . +)
                       (label                 . 0)
                       (do-while-closure      . 0)
                       (else-clause           . 0)
                       (catch-clause          . 0)
                       (comment-intro         . c-lineup-comment)
                       ;; funcall with arglist
                       ;;
                       ;; sum(
                       ;;   1, 2, 3
                       ;; );
                       (arglist-intro         . +)
                       (arglist-cont          . 0)
                       (arglist-cont-nonempty . c-lineup-arglist)
                       (arglist-close         . c-lineup-close-paren)
                       ;; operator>> and operator<< for cin/cout
                       ;;
                       ;; std::cin >> a
                       ;;          >> b;
                       ;; std::cout << a
                       ;;           << b;
                       (stream-op             . c-lineup-streamop)
                       ;; macros
                       ;;
                       ;; #define ALIST(G)                                \
                       ;;   G(1)                                        \
                       ;;   G(2)
                       (cpp-macro             . -1000)
                       (cpp-macro-cont        . +)
                       ;; extern
                       ;;
                       ;; extern "C" {
                       ;; void test();
                       ;; }
                       (extern-lang-open      . 0)
                       (extern-lang-close     . 0)
                       (inextern-lang         . 0)
                       ;; lambda
                       ;;
                       ;; auto f = [](int a, int b) {
                       ;;   return a + b;
                       ;; };
                       (inlambda              . 0)
                       (lambda-intro-cont     . +)
                       ;; GNU extension, a compound statement as expression
                       ;;
                       ;; int x = 1, y = 2;
                       ;; int z = ({
                       ;;   int ret;
                       ;;   if (y > 0)
                       ;;       ret = y;
                       ;;   else
                       ;;       ret = x - y;
                       ;;   ret;
                       ;; });
                       (inexpr-statement      . 0)
                       ;; c++ template args
                       ;;
                       ;; dummy<int,
                       ;;       char,
                       ;;       double>(0, 0, 0);
                       (template-args-cont    . (c-lineup-template-args +)))))
#+end_src

** json-mode [deprecated]

[[https://github.com/json-emacs/json-mode][json-mode]]

#+begin_src emacs-lisp :tangle no
  (use-package json-mode
    :ensure t)
#+end_src

** json-navigator [deprecated]

[[https://github.com/DamienCassou/json-navigator][json-navigator]]

#+begin_src emacs-lisp :tangle no
  (use-package json-navigator
    :ensure t)
#+end_src

** markdown-mode
Reference:
+ [[https://github.com/jrblevin/markdown-mode][jrblevin/markdown-mode: Emacs Markdown Mode]]

#+begin_src emacs-lisp
  (use-package markdown-mode
    :ensure t
    :mode ("README\\.md\\'" . gfm-mode)
    :init (setq markdown-command "multimarkdown")
    ;; :bind (:map markdown-mode-map
    ;;       ("C-c C-e" . markdown-do))
    )
#+end_src

** treesit-auto
Reference:
+ [[https://github.com/renzmann/treesit-auto][renzmann/treesit-auto: Automatic installation, usage, and fallback for tree-sitter major modes in Emacs 29]]

#+begin_src emacs-lisp
    (use-package treesit-auto
      :ensure t
      :custom
      (treesit-auto-install 'prompt)
      :config
      (setq treesit-auto-langs '(c cpp))
      (treesit-auto-add-to-auto-mode-alist '(c cpp))
      (setq ddosvoid-cpp-tsauto-config
            (make-treesit-auto-recipe
             :lang 'cpp
             :ts-mode 'c++-ts-mode
             :remap 'c++-mode
             :url "https://github.com/tree-sitter/tree-sitter-cpp"
             :revision "v0.22.0"
             :ext "\\.cpp\\'"))
      (add-to-list 'treesit-auto-recipe-list ddosvoid-cpp-tsauto-config)
      (setq treesit-font-lock-level 4)
      (global-treesit-auto-mode))
#+end_src

** treesit [deprecated, see treesit-auto]
Reference:
+ [[https://github.com/tree-sitter/tree-sitter-cpp/][tree-sitter/tree-sitter-cpp: C++ grammar for tree-sitter]]
+ [[https://github.com/tree-sitter/tree-sitter-cpp/issues/271][bug: Emacs c++-ts-mode failing with "Node type error at" 575 · Issue #271 · tree-sitter/tree-sitter-cpp]]
+ [[https://elliot00.com/posts/emacs-tree-sitter][Emacs配置tree-sitter - Elliot]]

#+begin_src emacs-lisp :tangle no
  (use-package treesit
    :ensure nil
    :config (setq treesit-font-lock-level 4)
    :init
    (setq treesit-language-source-alist
      '((cpp     . ("https://github.com/tree-sitter/tree-sitter-cpp" "v0.22.0"))))
    (add-to-list 'major-mode-remap-alist '(c++-mode . c++-ts-mode)))
#+end_src

** other config

#+begin_src emacs-lisp
  (add-hook 'prog-mode-hook 'display-line-numbers-mode)
#+end_src

** init-dev footer

#+begin_src emacs-lisp
  
  (provide 'init-dev)
  ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
  ;;; init-dev.el ends here
#+end_src

* init-completion.el
:PROPERTIES:
:HEADER-ARGS: :tangle lisp/init-completion.el :mkdirp yes
:END:

** init-completion.el header

#+BEGIN_SRC emacs-lisp
;;; init-completion.el --- Completion settings -*- lexical-binding: t -*-
;;; Commentary:

;;; Code:
#+END_SRC 

** vertico

[[https://github.com/minad/vertico][vertico]] 

#+BEGIN_SRC emacs-lisp
  (use-package vertico
    :ensure t
    :hook (after-init . vertico-mode)
    :bind (:map minibuffer-local-map
                ("M-<DEL>" . my/minibuffer-backward-kill)
                :map vertico-map
                ("M-q" . vertico-quick-insert)) ; use C-g to exit
    :config
    (defun my/minibuffer-backward-kill (arg)
      "When minibuffer is completing a file name delete up to parent
  folder, otherwise delete a word"
      (interactive "p")
      (if minibuffer-completing-file-name
          ;; Borrowed from https://github.com/raxod502/selectrum/issues/498#issuecomment-803283608
          (if (string-match-p "/." (minibuffer-contents))
              (zap-up-to-char (- arg) ?/)
            (delete-minibuffer-contents))
        (backward-kill-word arg)))

    ;; Do not allow the cursor in the minibuffer prompt
    (setq minibuffer-prompt-properties
          '(read-only t cursor-intangible t face minibuffer-prompt))
    (add-hook 'minibuffer-setup-hook #'cursor-intangible-mode)
    
    (setq vertico-cycle t)                ; cycle from last to first
    :custom
    (vertico-count 15)                    ; number of candidates to display, default is 10
    )
#+END_SRC

** orderless

[[https://github.com/oantolin/orderless][oderless]]

#+BEGIN_SRC emacs-lisp
;; support Pinyin first character match for orderless, avy etc.
(use-package pinyinlib
  :ensure t)

;; orderless 是一种哲学思想
(use-package orderless
  :ensure t
  :init
  (setq completion-styles '(orderless partial-completion basic))
  (setq orderless-component-separator "[ &]") ; & is for company because space will break completion
  (setq completion-category-defaults nil)
  (setq completion-category-overrides nil)
  :config
  ;; make completion support pinyin, refer to
  ;; https://emacs-china.org/t/vertico/17913/2
  (defun completion--regex-pinyin (str)
    (orderless-regexp (pinyinlib-build-regexp-string str)))
  (add-to-list 'orderless-matching-styles 'completion--regex-pinyin)
  )
#+END_SRC 

** marginalia

[[https://github.com/minad/marginalia][marginalia]]

#+BEGIN_SRC emacs-lisp
;; minibuffer helpful annotations
(use-package marginalia
  :ensure t
  :hook (after-init . marginalia-mode)
  :custom
  (marginalia-annotators '(marginalia-annotators-heavy marginalia-annotators-light nil)))
#+END_SRC

** consult

[[https://github.com/minad/consult][consult]]

#+BEGIN_SRC emacs-lisp
  (use-package consult
    :ensure t
    :after org
    :bind (([remap goto-line]                     . consult-goto-line)
           ([remap isearch-forward]               . consult-line)
  ;         ([remap switch-to-buffer]              . consult-buffer)
           ([remap switch-to-buffer-other-window] . consult-buffer-other-window)
           ([remap switch-to-buffer-other-frame]  . consult-buffer-other-frame)
           ([remap yank-pop]                      . consult-yank-pop)
           ([remap apropos]                       . consult-apropos)
           ([remap bookmark-jump]                 . consult-bookmark)
           ([remap goto-line]                     . consult-goto-line)
           ([remap imenu]                         . consult-imenu)
           ([remap multi-occur]                   . consult-multi-occur)
           ([remap recentf-open-files]            . consult-recent-file)
           ("C-x j"                               . consult-mark)
           ("C-c g"                               . consult-ripgrep)
           ("C-c f"                               . consult-find)
           ("\e\ef"                               . consult-locate) ; need to enable locate first
           ("C-c n h"                             . my/consult-find-org-headings)
           :map org-mode-map
           ("C-c C-j"                             . consult-org-heading)
           :map minibuffer-local-map
           ("C-r"                                 . consult-history)
           :map isearch-mode-map
           ("C-;"                                 . consult-line)
           :map prog-mode-map
           ("C-c C-j"                             . consult-outline)
           )
    :hook (completion-list-mode . consult-preview-at-point-mode)
    :init
    ;; Optionally configure the register formatting. This improves the register
    ;; preview for `consult-register', `consult-register-load',
    ;; `consult-register-store' and the Emacs built-ins.
    (setq register-preview-delay 0
          register-preview-function #'consult-register-format)

    ;; Optionally tweak the register preview window.
    ;; This adds thin lines, sorting and hides the mode line of the window.
    (advice-add #'register-preview :override #'consult-register-window)

    ;; Use Consult to select xref locations with preview
    (setq xref-show-xrefs-function #'consult-xref
          xref-show-definitions-function #'consult-xref)

    ;; MacOS locate doesn't support `--ignore-case --existing' args.
    (setq consult-locate-args (pcase system-type
                                ('gnu/linux "locate --ignore-case --existing --regex")
                                ('darwin "mdfind -name")))
    :config
    (consult-customize
     consult-theme
     :preview-key '(:debounce 0.2 any)
     consult-ripgrep consult-git-grep consult-grep
     consult-bookmark consult-recent-file consult-xref
     consult--source-recent-file consult--source-project-recent-file consult--source-bookmark
     :preview-key "M-.")

    ;; Optionally configure the narrowing key.
    ;; Both < and C-+ work reasonably well.
    (setq consult-narrow-key "<") ;; (kbd "C-+")

    (autoload 'projectile-project-root "projectile")
    (setq consult-project-root-function #'projectile-project-root)

    ;; search all org file headings under a directory, see:
    ;; https://emacs-china.org/t/org-files-heading-entry/20830/4
    (defun my/consult-find-org-headings (&optional match)
      "find headngs in all org files."
      (interactive)
      (consult-org-heading match (directory-files org-directory t "^[0-9]\\{8\\}.+\\.org$")))

    ;; Use `consult-ripgrep' instead of `consult-line' in large buffers
    (defun consult-line-symbol-at-point ()
      "Consult line the symbol where the point is"
      (interactive)
      (consult-line (thing-at-point 'symbol)))
    )
#+END_SRC

** corfu [deprecated]

[[https://github.com/minad/corfu][corfu]]

#+begin_src emacs-lisp :tangle no
(use-package corfu
  :ensure t
  :hook (after-init . global-corfu-mode)
  :bind
  (:map corfu-map
        ("SPC" . corfu-insert-separator)    ; configure space for separator insertion
        ("M-q" . corfu-quick-complete)      ; use C-g to exit
        ("TAB" . corfu-next)
        ([tab] . corfu-next)
        ("S-TAB" . corfu-previous)
        ([backtab] . corfu-previous))
  :config
  ;; TAB cycle if there are only few candidates
  (setq completion-cycle-threshold 0)
  (setq tab-always-indent 'complete)

  (defun corfu-enable-always-in-minibuffer ()
    "Enable Corfu in the minibuffer if Vertico/Mct are not active."
    (unless (or (bound-and-true-p mct--active)
                (bound-and-true-p vertico--input))
      ;; (setq-local corfu-auto nil) Enable/disable auto completion
      (corfu-mode 1)))
  (add-hook 'minibuffer-setup-hook #'corfu-enable-always-in-minibuffer 1)

  ;; enable corfu in eshell
  (add-hook 'eshell-mode-hook
            (lambda ()
              (setq-local corfu-auto nil)
              (corfu-mode)))

  ;; For Eshell
  ;; ===========
  ;; avoid press RET twice in Eshell
  (defun corfu-send-shell (&rest _)
    "Send completion candidate when inside comint/eshell."
    (cond
     ((and (derived-mode-p 'eshell-mode) (fboundp 'eshell-send-input))
      (eshell-send-input))
     ((and (derived-mode-p 'comint-mode)  (fboundp 'comint-send-input))
      (comint-send-input))))

  (advice-add #'corfu-insert :after #'corfu-send-shell)

  :custom
  (corfu-cycle t)                ;; Enable cycling for `corfu-next/previous'
  )
#+end_src

** yasnippet

Reference:
+ [[https://github.com/joaotavora/yasnippet][joaotavora/yasnippet: A template system for Emacs]] 

#+begin_src emacs-lisp
  (use-package yasnippet
    :ensure t
    :config
    (yas-global-mode 1))
#+end_src

** init-completion.el footer
#+BEGIN_SRC emacs-lisp

(provide 'init-completion)
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;;; init-completion.el ends here
#+END_SRC


